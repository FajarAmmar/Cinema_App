define(['react', 'react-dom'], (function (react, reactDom) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var propIsEnumerable$1 = Object.prototype.propertyIsEnumerable;

	function ToObject(val) {
	  if (val == null) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }

	  return Object(val);
	}

	function ownEnumerableKeys(obj) {
	  var keys = Object.getOwnPropertyNames(obj);

	  if (Object.getOwnPropertySymbols) {
	    keys = keys.concat(Object.getOwnPropertySymbols(obj));
	  }

	  return keys.filter(function (key) {
	    return propIsEnumerable$1.call(obj, key);
	  });
	}

	var objectAssign$1 = Object.assign || function (target, source) {
	  var from;
	  var keys;
	  var to = ToObject(target);

	  for (var s = 1; s < arguments.length; s++) {
	    from = arguments[s];
	    keys = ownEnumerableKeys(Object(from));

	    for (var i = 0; i < keys.length; i++) {
	      to[keys[i]] = from[keys[i]];
	    }
	  }

	  return to;
	};

	var propTypes = {exports: {}};

	var reactIs = {exports: {}};

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development;

	function requireReactIs_development () {
		if (hasRequiredReactIs_development) return reactIs_development;
		hasRequiredReactIs_development = 1;

		{
		  (function () {
		    // nor polyfill, then a plain number is used for performance.

		    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
		    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
		    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
		    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
		    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
		    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
		    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
		    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
		    // (unstable) APIs that have been removed. Can we remove the symbols?

		    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
		    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
		    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
		    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
		    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
		    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
		    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
		    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
		    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
		    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
		    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

		    function isValidElementType(type) {
		      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
		      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
		    }

		    function typeOf(object) {
		      if (typeof object === 'object' && object !== null) {
		        var $$typeof = object.$$typeof;

		        switch ($$typeof) {
		          case REACT_ELEMENT_TYPE:
		            var type = object.type;

		            switch (type) {
		              case REACT_ASYNC_MODE_TYPE:
		              case REACT_CONCURRENT_MODE_TYPE:
		              case REACT_FRAGMENT_TYPE:
		              case REACT_PROFILER_TYPE:
		              case REACT_STRICT_MODE_TYPE:
		              case REACT_SUSPENSE_TYPE:
		                return type;

		              default:
		                var $$typeofType = type && type.$$typeof;

		                switch ($$typeofType) {
		                  case REACT_CONTEXT_TYPE:
		                  case REACT_FORWARD_REF_TYPE:
		                  case REACT_LAZY_TYPE:
		                  case REACT_MEMO_TYPE:
		                  case REACT_PROVIDER_TYPE:
		                    return $$typeofType;

		                  default:
		                    return $$typeof;
		                }

		            }

		          case REACT_PORTAL_TYPE:
		            return $$typeof;
		        }
		      }

		      return undefined;
		    } // AsyncMode is deprecated along with isAsyncMode


		    var AsyncMode = REACT_ASYNC_MODE_TYPE;
		    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
		    var ContextConsumer = REACT_CONTEXT_TYPE;
		    var ContextProvider = REACT_PROVIDER_TYPE;
		    var Element = REACT_ELEMENT_TYPE;
		    var ForwardRef = REACT_FORWARD_REF_TYPE;
		    var Fragment = REACT_FRAGMENT_TYPE;
		    var Lazy = REACT_LAZY_TYPE;
		    var Memo = REACT_MEMO_TYPE;
		    var Portal = REACT_PORTAL_TYPE;
		    var Profiler = REACT_PROFILER_TYPE;
		    var StrictMode = REACT_STRICT_MODE_TYPE;
		    var Suspense = REACT_SUSPENSE_TYPE;
		    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

		    function isAsyncMode(object) {
		      {
		        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
		        }
		      }
		      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
		    }

		    function isConcurrentMode(object) {
		      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
		    }

		    function isContextConsumer(object) {
		      return typeOf(object) === REACT_CONTEXT_TYPE;
		    }

		    function isContextProvider(object) {
		      return typeOf(object) === REACT_PROVIDER_TYPE;
		    }

		    function isElement(object) {
		      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		    }

		    function isForwardRef(object) {
		      return typeOf(object) === REACT_FORWARD_REF_TYPE;
		    }

		    function isFragment(object) {
		      return typeOf(object) === REACT_FRAGMENT_TYPE;
		    }

		    function isLazy(object) {
		      return typeOf(object) === REACT_LAZY_TYPE;
		    }

		    function isMemo(object) {
		      return typeOf(object) === REACT_MEMO_TYPE;
		    }

		    function isPortal(object) {
		      return typeOf(object) === REACT_PORTAL_TYPE;
		    }

		    function isProfiler(object) {
		      return typeOf(object) === REACT_PROFILER_TYPE;
		    }

		    function isStrictMode(object) {
		      return typeOf(object) === REACT_STRICT_MODE_TYPE;
		    }

		    function isSuspense(object) {
		      return typeOf(object) === REACT_SUSPENSE_TYPE;
		    }

		    reactIs_development.AsyncMode = AsyncMode;
		    reactIs_development.ConcurrentMode = ConcurrentMode;
		    reactIs_development.ContextConsumer = ContextConsumer;
		    reactIs_development.ContextProvider = ContextProvider;
		    reactIs_development.Element = Element;
		    reactIs_development.ForwardRef = ForwardRef;
		    reactIs_development.Fragment = Fragment;
		    reactIs_development.Lazy = Lazy;
		    reactIs_development.Memo = Memo;
		    reactIs_development.Portal = Portal;
		    reactIs_development.Profiler = Profiler;
		    reactIs_development.StrictMode = StrictMode;
		    reactIs_development.Suspense = Suspense;
		    reactIs_development.isAsyncMode = isAsyncMode;
		    reactIs_development.isConcurrentMode = isConcurrentMode;
		    reactIs_development.isContextConsumer = isContextConsumer;
		    reactIs_development.isContextProvider = isContextProvider;
		    reactIs_development.isElement = isElement;
		    reactIs_development.isForwardRef = isForwardRef;
		    reactIs_development.isFragment = isFragment;
		    reactIs_development.isLazy = isLazy;
		    reactIs_development.isMemo = isMemo;
		    reactIs_development.isPortal = isPortal;
		    reactIs_development.isProfiler = isProfiler;
		    reactIs_development.isStrictMode = isStrictMode;
		    reactIs_development.isSuspense = isSuspense;
		    reactIs_development.isValidElementType = isValidElementType;
		    reactIs_development.typeOf = typeOf;
		  })();
		}
		return reactIs_development;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs.exports;
		hasRequiredReactIs = 1;
		(function (module) {

			{
			  module.exports = requireReactIs_development();
			}
	} (reactIs));
		return reactIs.exports;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }

	  return Object(val);
	}

	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    } // Detect buggy property enumeration order in older V8 versions.
	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

	    test1[5] = 'de';

	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test2 = {};

	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }

	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });

	    if (order2.join('') !== '0123456789') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });

	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }

	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject(target);
	  var symbols;

	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }

	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);

	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }

	  return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	var has;
	var hasRequiredHas;

	function requireHas () {
		if (hasRequiredHas) return has;
		hasRequiredHas = 1;
		has = Function.call.bind(Object.prototype.hasOwnProperty);
		return has;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var checkPropTypes_1;
	var hasRequiredCheckPropTypes;

	function requireCheckPropTypes () {
		if (hasRequiredCheckPropTypes) return checkPropTypes_1;
		hasRequiredCheckPropTypes = 1;

		var printWarning = function () {};

		{
		  var ReactPropTypesSecret = requireReactPropTypesSecret();

		  var loggedTypeFailures = {};

		  var has = requireHas();

		  printWarning = function (text) {
		    var message = 'Warning: ' + text;

		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }

		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {
		      /**/
		    }
		  };
		}
		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */


		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  {
		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
		        } catch (ex) {
		          error = ex;
		        }

		        if (error && !(error instanceof Error)) {
		          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
		        }

		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;
		          var stack = getStack ? getStack() : '';
		          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
		        }
		      }
		    }
		  }
		}
		/**
		 * Resets warning cache when testing.
		 *
		 * @private
		 */


		checkPropTypes.resetWarningCache = function () {
		  {
		    loggedTypeFailures = {};
		  }
		};

		checkPropTypes_1 = checkPropTypes;
		return checkPropTypes_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithTypeCheckers;
	var hasRequiredFactoryWithTypeCheckers;

	function requireFactoryWithTypeCheckers () {
		if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
		hasRequiredFactoryWithTypeCheckers = 1;

		var ReactIs = requireReactIs();

		var assign = objectAssign;

		var ReactPropTypesSecret = requireReactPropTypesSecret();

		var has = requireHas();

		var checkPropTypes = requireCheckPropTypes();

		var printWarning = function () {};

		{
		  printWarning = function (text) {
		    var message = 'Warning: ' + text;

		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }

		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };
		}

		function emptyFunctionThatReturnsNull() {
		  return null;
		}

		factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */

		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }
		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */


		  var ANONYMOUS = '<<anonymous>>'; // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bigint: createPrimitiveTypeChecker('bigint'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),
		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    elementType: createElementTypeTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker
		  };
		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */

		  /*eslint-disable no-self-compare*/

		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/

		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */


		  function PropTypeError(message, data) {
		    this.message = message;
		    this.data = data && typeof data === 'object' ? data : {};
		    this.stack = '';
		  } // Make `instanceof Error` still work for returned errors.


		  PropTypeError.prototype = Error.prototype;

		  function createChainableTypeChecker(validate) {
		    {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }

		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;

		      if (secret !== ReactPropTypesSecret) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
		          err.name = 'Invariant Violation';
		          throw err;
		        } else if (typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;

		          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
		          manualPropTypeWarningCount < 3) {
		            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }

		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }

		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }

		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }

		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);
		    return chainedCheckType;
		  }

		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);

		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
		          expectedType: expectedType
		        });
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
		  }

		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }

		      var propValue = props[propName];

		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }

		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

		        if (error instanceof Error) {
		          return error;
		        }
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];

		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];

		      if (!ReactIs.isValidElementType(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      {
		        if (arguments.length > 1) {
		          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
		        } else {
		          printWarning('Invalid argument supplied to oneOf, expected an array.');
		        }
		      }

		      return emptyFunctionThatReturnsNull;
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];

		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }

		      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
		        var type = getPreciseType(value);

		        if (type === 'symbol') {
		          return String(value);
		        }

		        return value;
		      });
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }

		      var propValue = props[propName];
		      var propType = getPropType(propValue);

		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }

		      for (var key in propValue) {
		        if (has(propValue, key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
		      return emptyFunctionThatReturnsNull;
		    }

		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];

		      if (typeof checker !== 'function') {
		        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
		        return emptyFunctionThatReturnsNull;
		      }
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var expectedTypes = [];

		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);

		        if (checkerResult == null) {
		          return null;
		        }

		        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
		          expectedTypes.push(checkerResult.data.expectedType);
		        }
		      }

		      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function invalidValidatorError(componentName, location, propFullName, key, type) {
		    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
		  }

		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);

		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }

		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];

		        if (typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }

		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

		        if (error) {
		          return error;
		        }
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);

		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      } // We need to check all keys in case some are required but missing from props.


		      var allKeys = assign({}, props[propName], shapeTypes);

		      for (var key in allKeys) {
		        var checker = shapeTypes[key];

		        if (has(shapeTypes, key) && typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }

		        if (!checker) {
		          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
		        }

		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

		        if (error) {
		          return error;
		        }
		      }

		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;

		      case 'boolean':
		        return !propValue;

		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }

		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }

		        var iteratorFn = getIteratorFn(propValue);

		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;

		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;

		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }

		        return true;

		      default:
		        return false;
		    }
		  }

		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    } // falsy value can't be a Symbol


		    if (!propValue) {
		      return false;
		    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    } // Fallback for non-spec compliant Symbols which are polyfilled.


		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }

		    return false;
		  } // Equivalent of `typeof` but with special handling for array and regexp.


		  function getPropType(propValue) {
		    var propType = typeof propValue;

		    if (Array.isArray(propValue)) {
		      return 'array';
		    }

		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }

		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }

		    return propType;
		  } // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.


		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }

		    var propType = getPropType(propValue);

		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }

		    return propType;
		  } // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"


		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);

		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;

		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;

		      default:
		        return type;
		    }
		  } // Returns class name of the object, if any.


		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }

		    return propValue.constructor.name;
		  }

		  ReactPropTypes.checkPropTypes = checkPropTypes;
		  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
		  ReactPropTypes.PropTypes = ReactPropTypes;
		  return ReactPropTypes;
		};
		return factoryWithTypeCheckers;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = requireReactIs(); // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod


	  var throwOnDirectAccess = true;
	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	var _assign = objectAssign; // -- Inlined from fbjs --


	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}

	var validateFormat = function validateFormat(format) {};

	{
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function _invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;

	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame

	    throw error;
	  }
	}

	var warning = function () {};

	{
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });

	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	} // /-- Inlined from fbjs --


	var MIXINS_KEY = 'mixins'; // Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.

	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;

	{
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	function factory$1(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */
	  var injectedMixins = [];
	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */

	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',
	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',
	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillMount`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillMount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillReceiveProps`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillUpdate`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillUpdate: 'DEFINE_MANY',
	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };
	  /**
	   * Similar to ReactClassInterface but for static methods.
	   */

	  var ReactClassStaticInterface = {
	    /**
	     * This method is invoked after a component is instantiated and when it
	     * receives new props. Return an object to update state in response to
	     * prop changes. Return null to indicate no change to state.
	     *
	     * If an object is returned, its keys will be merged into the existing state.
	     *
	     * @return {object || null}
	     * @optional
	     */
	    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
	  };
	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */

	  var RESERVED_SPEC_KEYS = {
	    displayName: function (Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function (Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function (Constructor, childContextTypes) {
	      {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }

	      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	    },
	    contextTypes: function (Constructor, contextTypes) {
	      {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }

	      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	    },

	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function (Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function (Constructor, propTypes) {
	      {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }

	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function (Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function () {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        {
	          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.

	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
	    } // Disallow defining methods more than once unless explicitly allowed.


	    if (isAlreadyDefined) {
	      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
	    }
	  }
	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */


	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        {
	          warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
	        }
	      }

	      return;
	    }

	    _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');

	    _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs; // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.

	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride.

	            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name); // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.


	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;

	            {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }

	    for (var name in statics) {
	      var property = statics[name];

	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = (name in RESERVED_SPEC_KEYS);

	      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

	      var isAlreadyDefined = (name in Constructor);

	      if (isAlreadyDefined) {
	        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

	        _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

	        Constructor[name] = createMergedResultFunction(Constructor[name], property);
	        return;
	      }

	      Constructor[name] = property;
	    }
	  }
	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */


	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);

	        one[key] = two[key];
	      }
	    }

	    return one;
	  }
	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */


	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);

	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }

	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }
	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */


	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }
	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */


	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);

	    {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;

	      boundMethod.bind = function (newThis) {
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        } // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.


	        if (newThis !== component && newThis !== null) {
	          {
	            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
	          }
	        } else if (!args.length) {
	          {
	            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
	          }

	          return boundMethod;
	        }

	        var reboundMethod = _bind.apply(boundMethod, arguments);

	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }

	    return boundMethod;
	  }
	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */


	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;

	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function () {
	      this.__isMounted = true;
	    }
	  };
	  var IsMountedPostMixin = {
	    componentWillUnmount: function () {
	      this.__isMounted = false;
	    }
	  };
	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */

	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function (newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function () {
	      {
	        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
	        this.__didWarnIsMounted = true;
	      }

	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function () {};

	  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */


	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	      {
	        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
	      } // Wire up auto-binding


	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	      this.state = null; // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;

	      {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }

	      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin); // Initialize the defaultProps property after all mixins have been merged.

	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }

	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

	    {
	      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
	      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
	      warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
	    } // Reduce time spent doing lookups by setting these on the prototype.


	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	var factory_1 = factory$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	var React$6 = require('react');

	var factory = factory_1;

	if (typeof React$6 === 'undefined') {
	  throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
	} // Hack to grab NoopUpdateQueue from isomorphic React


	var ReactNoopUpdateQueue = new React$6.Component().updater;
	var createReactClass = factory(React$6.Component, React$6.isValidElement, ReactNoopUpdateQueue);

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var moment$3 = {exports: {}};

	(function (module, exports) {

		(function (global, factory) {
		  module.exports = factory() ;
		})(commonjsGlobal, function () {

		  var hookCallback;

		  function hooks() {
		    return hookCallback.apply(null, arguments);
		  } // This is done to register the method called with moment()
		  // without creating circular dependencies.


		  function setHookCallback(callback) {
		    hookCallback = callback;
		  }

		  function isArray(input) {
		    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
		  }

		  function isObject(input) {
		    // IE8 will treat undefined and null as object if it wasn't for
		    // input != null
		    return input != null && Object.prototype.toString.call(input) === '[object Object]';
		  }

		  function hasOwnProp(a, b) {
		    return Object.prototype.hasOwnProperty.call(a, b);
		  }

		  function isObjectEmpty(obj) {
		    if (Object.getOwnPropertyNames) {
		      return Object.getOwnPropertyNames(obj).length === 0;
		    } else {
		      var k;

		      for (k in obj) {
		        if (hasOwnProp(obj, k)) {
		          return false;
		        }
		      }

		      return true;
		    }
		  }

		  function isUndefined(input) {
		    return input === void 0;
		  }

		  function isNumber(input) {
		    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
		  }

		  function isDate(input) {
		    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
		  }

		  function map(arr, fn) {
		    var res = [],
		        i,
		        arrLen = arr.length;

		    for (i = 0; i < arrLen; ++i) {
		      res.push(fn(arr[i], i));
		    }

		    return res;
		  }

		  function extend(a, b) {
		    for (var i in b) {
		      if (hasOwnProp(b, i)) {
		        a[i] = b[i];
		      }
		    }

		    if (hasOwnProp(b, 'toString')) {
		      a.toString = b.toString;
		    }

		    if (hasOwnProp(b, 'valueOf')) {
		      a.valueOf = b.valueOf;
		    }

		    return a;
		  }

		  function createUTC(input, format, locale, strict) {
		    return createLocalOrUTC(input, format, locale, strict, true).utc();
		  }

		  function defaultParsingFlags() {
		    // We need to deep clone this object.
		    return {
		      empty: false,
		      unusedTokens: [],
		      unusedInput: [],
		      overflow: -2,
		      charsLeftOver: 0,
		      nullInput: false,
		      invalidEra: null,
		      invalidMonth: null,
		      invalidFormat: false,
		      userInvalidated: false,
		      iso: false,
		      parsedDateParts: [],
		      era: null,
		      meridiem: null,
		      rfc2822: false,
		      weekdayMismatch: false
		    };
		  }

		  function getParsingFlags(m) {
		    if (m._pf == null) {
		      m._pf = defaultParsingFlags();
		    }

		    return m._pf;
		  }

		  var some;

		  if (Array.prototype.some) {
		    some = Array.prototype.some;
		  } else {
		    some = function (fun) {
		      var t = Object(this),
		          len = t.length >>> 0,
		          i;

		      for (i = 0; i < len; i++) {
		        if (i in t && fun.call(this, t[i], i, t)) {
		          return true;
		        }
		      }

		      return false;
		    };
		  }

		  function isValid(m) {
		    if (m._isValid == null) {
		      var flags = getParsingFlags(m),
		          parsedParts = some.call(flags.parsedDateParts, function (i) {
		        return i != null;
		      }),
		          isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

		      if (m._strict) {
		        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
		      }

		      if (Object.isFrozen == null || !Object.isFrozen(m)) {
		        m._isValid = isNowValid;
		      } else {
		        return isNowValid;
		      }
		    }

		    return m._isValid;
		  }

		  function createInvalid(flags) {
		    var m = createUTC(NaN);

		    if (flags != null) {
		      extend(getParsingFlags(m), flags);
		    } else {
		      getParsingFlags(m).userInvalidated = true;
		    }

		    return m;
		  } // Plugins that add properties should also add the key here (null value),
		  // so we can properly clone ourselves.


		  var momentProperties = hooks.momentProperties = [],
		      updateInProgress = false;

		  function copyConfig(to, from) {
		    var i,
		        prop,
		        val,
		        momentPropertiesLen = momentProperties.length;

		    if (!isUndefined(from._isAMomentObject)) {
		      to._isAMomentObject = from._isAMomentObject;
		    }

		    if (!isUndefined(from._i)) {
		      to._i = from._i;
		    }

		    if (!isUndefined(from._f)) {
		      to._f = from._f;
		    }

		    if (!isUndefined(from._l)) {
		      to._l = from._l;
		    }

		    if (!isUndefined(from._strict)) {
		      to._strict = from._strict;
		    }

		    if (!isUndefined(from._tzm)) {
		      to._tzm = from._tzm;
		    }

		    if (!isUndefined(from._isUTC)) {
		      to._isUTC = from._isUTC;
		    }

		    if (!isUndefined(from._offset)) {
		      to._offset = from._offset;
		    }

		    if (!isUndefined(from._pf)) {
		      to._pf = getParsingFlags(from);
		    }

		    if (!isUndefined(from._locale)) {
		      to._locale = from._locale;
		    }

		    if (momentPropertiesLen > 0) {
		      for (i = 0; i < momentPropertiesLen; i++) {
		        prop = momentProperties[i];
		        val = from[prop];

		        if (!isUndefined(val)) {
		          to[prop] = val;
		        }
		      }
		    }

		    return to;
		  } // Moment prototype object


		  function Moment(config) {
		    copyConfig(this, config);
		    this._d = new Date(config._d != null ? config._d.getTime() : NaN);

		    if (!this.isValid()) {
		      this._d = new Date(NaN);
		    } // Prevent infinite loop in case updateOffset creates new moment
		    // objects.


		    if (updateInProgress === false) {
		      updateInProgress = true;
		      hooks.updateOffset(this);
		      updateInProgress = false;
		    }
		  }

		  function isMoment(obj) {
		    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
		  }

		  function warn(msg) {
		    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
		      console.warn('Deprecation warning: ' + msg);
		    }
		  }

		  function deprecate(msg, fn) {
		    var firstTime = true;
		    return extend(function () {
		      if (hooks.deprecationHandler != null) {
		        hooks.deprecationHandler(null, msg);
		      }

		      if (firstTime) {
		        var args = [],
		            arg,
		            i,
		            key,
		            argLen = arguments.length;

		        for (i = 0; i < argLen; i++) {
		          arg = '';

		          if (typeof arguments[i] === 'object') {
		            arg += '\n[' + i + '] ';

		            for (key in arguments[0]) {
		              if (hasOwnProp(arguments[0], key)) {
		                arg += key + ': ' + arguments[0][key] + ', ';
		              }
		            }

		            arg = arg.slice(0, -2); // Remove trailing comma and space
		          } else {
		            arg = arguments[i];
		          }

		          args.push(arg);
		        }

		        warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
		        firstTime = false;
		      }

		      return fn.apply(this, arguments);
		    }, fn);
		  }

		  var deprecations = {};

		  function deprecateSimple(name, msg) {
		    if (hooks.deprecationHandler != null) {
		      hooks.deprecationHandler(name, msg);
		    }

		    if (!deprecations[name]) {
		      warn(msg);
		      deprecations[name] = true;
		    }
		  }

		  hooks.suppressDeprecationWarnings = false;
		  hooks.deprecationHandler = null;

		  function isFunction(input) {
		    return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
		  }

		  function set(config) {
		    var prop, i;

		    for (i in config) {
		      if (hasOwnProp(config, i)) {
		        prop = config[i];

		        if (isFunction(prop)) {
		          this[i] = prop;
		        } else {
		          this['_' + i] = prop;
		        }
		      }
		    }

		    this._config = config; // Lenient ordinal parsing accepts just a number in addition to
		    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
		    // TODO: Remove "ordinalParse" fallback in next major release.

		    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
		  }

		  function mergeConfigs(parentConfig, childConfig) {
		    var res = extend({}, parentConfig),
		        prop;

		    for (prop in childConfig) {
		      if (hasOwnProp(childConfig, prop)) {
		        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
		          res[prop] = {};
		          extend(res[prop], parentConfig[prop]);
		          extend(res[prop], childConfig[prop]);
		        } else if (childConfig[prop] != null) {
		          res[prop] = childConfig[prop];
		        } else {
		          delete res[prop];
		        }
		      }
		    }

		    for (prop in parentConfig) {
		      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
		        // make sure changes to properties don't modify parent config
		        res[prop] = extend({}, res[prop]);
		      }
		    }

		    return res;
		  }

		  function Locale(config) {
		    if (config != null) {
		      this.set(config);
		    }
		  }

		  var keys;

		  if (Object.keys) {
		    keys = Object.keys;
		  } else {
		    keys = function (obj) {
		      var i,
		          res = [];

		      for (i in obj) {
		        if (hasOwnProp(obj, i)) {
		          res.push(i);
		        }
		      }

		      return res;
		    };
		  }

		  var defaultCalendar = {
		    sameDay: '[Today at] LT',
		    nextDay: '[Tomorrow at] LT',
		    nextWeek: 'dddd [at] LT',
		    lastDay: '[Yesterday at] LT',
		    lastWeek: '[Last] dddd [at] LT',
		    sameElse: 'L'
		  };

		  function calendar(key, mom, now) {
		    var output = this._calendar[key] || this._calendar['sameElse'];
		    return isFunction(output) ? output.call(mom, now) : output;
		  }

		  function zeroFill(number, targetLength, forceSign) {
		    var absNumber = '' + Math.abs(number),
		        zerosToFill = targetLength - absNumber.length,
		        sign = number >= 0;
		    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
		  }

		  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
		      localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
		      formatFunctions = {},
		      formatTokenFunctions = {}; // token:    'M'
		  // padded:   ['MM', 2]
		  // ordinal:  'Mo'
		  // callback: function () { this.month() + 1 }

		  function addFormatToken(token, padded, ordinal, callback) {
		    var func = callback;

		    if (typeof callback === 'string') {
		      func = function () {
		        return this[callback]();
		      };
		    }

		    if (token) {
		      formatTokenFunctions[token] = func;
		    }

		    if (padded) {
		      formatTokenFunctions[padded[0]] = function () {
		        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
		      };
		    }

		    if (ordinal) {
		      formatTokenFunctions[ordinal] = function () {
		        return this.localeData().ordinal(func.apply(this, arguments), token);
		      };
		    }
		  }

		  function removeFormattingTokens(input) {
		    if (input.match(/\[[\s\S]/)) {
		      return input.replace(/^\[|\]$/g, '');
		    }

		    return input.replace(/\\/g, '');
		  }

		  function makeFormatFunction(format) {
		    var array = format.match(formattingTokens),
		        i,
		        length;

		    for (i = 0, length = array.length; i < length; i++) {
		      if (formatTokenFunctions[array[i]]) {
		        array[i] = formatTokenFunctions[array[i]];
		      } else {
		        array[i] = removeFormattingTokens(array[i]);
		      }
		    }

		    return function (mom) {
		      var output = '',
		          i;

		      for (i = 0; i < length; i++) {
		        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
		      }

		      return output;
		    };
		  } // format date using native date object


		  function formatMoment(m, format) {
		    if (!m.isValid()) {
		      return m.localeData().invalidDate();
		    }

		    format = expandFormat(format, m.localeData());
		    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
		    return formatFunctions[format](m);
		  }

		  function expandFormat(format, locale) {
		    var i = 5;

		    function replaceLongDateFormatTokens(input) {
		      return locale.longDateFormat(input) || input;
		    }

		    localFormattingTokens.lastIndex = 0;

		    while (i >= 0 && localFormattingTokens.test(format)) {
		      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
		      localFormattingTokens.lastIndex = 0;
		      i -= 1;
		    }

		    return format;
		  }

		  var defaultLongDateFormat = {
		    LTS: 'h:mm:ss A',
		    LT: 'h:mm A',
		    L: 'MM/DD/YYYY',
		    LL: 'MMMM D, YYYY',
		    LLL: 'MMMM D, YYYY h:mm A',
		    LLLL: 'dddd, MMMM D, YYYY h:mm A'
		  };

		  function longDateFormat(key) {
		    var format = this._longDateFormat[key],
		        formatUpper = this._longDateFormat[key.toUpperCase()];

		    if (format || !formatUpper) {
		      return format;
		    }

		    this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
		      if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
		        return tok.slice(1);
		      }

		      return tok;
		    }).join('');
		    return this._longDateFormat[key];
		  }

		  var defaultInvalidDate = 'Invalid date';

		  function invalidDate() {
		    return this._invalidDate;
		  }

		  var defaultOrdinal = '%d',
		      defaultDayOfMonthOrdinalParse = /\d{1,2}/;

		  function ordinal(number) {
		    return this._ordinal.replace('%d', number);
		  }

		  var defaultRelativeTime = {
		    future: 'in %s',
		    past: '%s ago',
		    s: 'a few seconds',
		    ss: '%d seconds',
		    m: 'a minute',
		    mm: '%d minutes',
		    h: 'an hour',
		    hh: '%d hours',
		    d: 'a day',
		    dd: '%d days',
		    w: 'a week',
		    ww: '%d weeks',
		    M: 'a month',
		    MM: '%d months',
		    y: 'a year',
		    yy: '%d years'
		  };

		  function relativeTime(number, withoutSuffix, string, isFuture) {
		    var output = this._relativeTime[string];
		    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
		  }

		  function pastFuture(diff, output) {
		    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
		    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
		  }

		  var aliases = {};

		  function addUnitAlias(unit, shorthand) {
		    var lowerCase = unit.toLowerCase();
		    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
		  }

		  function normalizeUnits(units) {
		    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
		  }

		  function normalizeObjectUnits(inputObject) {
		    var normalizedInput = {},
		        normalizedProp,
		        prop;

		    for (prop in inputObject) {
		      if (hasOwnProp(inputObject, prop)) {
		        normalizedProp = normalizeUnits(prop);

		        if (normalizedProp) {
		          normalizedInput[normalizedProp] = inputObject[prop];
		        }
		      }
		    }

		    return normalizedInput;
		  }

		  var priorities = {};

		  function addUnitPriority(unit, priority) {
		    priorities[unit] = priority;
		  }

		  function getPrioritizedUnits(unitsObj) {
		    var units = [],
		        u;

		    for (u in unitsObj) {
		      if (hasOwnProp(unitsObj, u)) {
		        units.push({
		          unit: u,
		          priority: priorities[u]
		        });
		      }
		    }

		    units.sort(function (a, b) {
		      return a.priority - b.priority;
		    });
		    return units;
		  }

		  function isLeapYear(year) {
		    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
		  }

		  function absFloor(number) {
		    if (number < 0) {
		      // -0 -> 0
		      return Math.ceil(number) || 0;
		    } else {
		      return Math.floor(number);
		    }
		  }

		  function toInt(argumentForCoercion) {
		    var coercedNumber = +argumentForCoercion,
		        value = 0;

		    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
		      value = absFloor(coercedNumber);
		    }

		    return value;
		  }

		  function makeGetSet(unit, keepTime) {
		    return function (value) {
		      if (value != null) {
		        set$1(this, unit, value);
		        hooks.updateOffset(this, keepTime);
		        return this;
		      } else {
		        return get(this, unit);
		      }
		    };
		  }

		  function get(mom, unit) {
		    return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
		  }

		  function set$1(mom, unit, value) {
		    if (mom.isValid() && !isNaN(value)) {
		      if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
		        value = toInt(value);

		        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
		      } else {
		        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
		      }
		    }
		  } // MOMENTS


		  function stringGet(units) {
		    units = normalizeUnits(units);

		    if (isFunction(this[units])) {
		      return this[units]();
		    }

		    return this;
		  }

		  function stringSet(units, value) {
		    if (typeof units === 'object') {
		      units = normalizeObjectUnits(units);
		      var prioritized = getPrioritizedUnits(units),
		          i,
		          prioritizedLen = prioritized.length;

		      for (i = 0; i < prioritizedLen; i++) {
		        this[prioritized[i].unit](units[prioritized[i].unit]);
		      }
		    } else {
		      units = normalizeUnits(units);

		      if (isFunction(this[units])) {
		        return this[units](value);
		      }
		    }

		    return this;
		  }

		  var match1 = /\d/,
		      //       0 - 9
		  match2 = /\d\d/,
		      //      00 - 99
		  match3 = /\d{3}/,
		      //     000 - 999
		  match4 = /\d{4}/,
		      //    0000 - 9999
		  match6 = /[+-]?\d{6}/,
		      // -999999 - 999999
		  match1to2 = /\d\d?/,
		      //       0 - 99
		  match3to4 = /\d\d\d\d?/,
		      //     999 - 9999
		  match5to6 = /\d\d\d\d\d\d?/,
		      //   99999 - 999999
		  match1to3 = /\d{1,3}/,
		      //       0 - 999
		  match1to4 = /\d{1,4}/,
		      //       0 - 9999
		  match1to6 = /[+-]?\d{1,6}/,
		      // -999999 - 999999
		  matchUnsigned = /\d+/,
		      //       0 - inf
		  matchSigned = /[+-]?\d+/,
		      //    -inf - inf
		  matchOffset = /Z|[+-]\d\d:?\d\d/gi,
		      // +00:00 -00:00 +0000 -0000 or Z
		  matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
		      // +00 -00 +00:00 -00:00 +0000 -0000 or Z
		  matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
		      // 123456789 123456789.123
		  // any word (or two) characters or numbers including two/three word month in arabic.
		  // includes scottish gaelic two word and hyphenated months
		  matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
		      regexes;
		  regexes = {};

		  function addRegexToken(token, regex, strictRegex) {
		    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
		      return isStrict && strictRegex ? strictRegex : regex;
		    };
		  }

		  function getParseRegexForToken(token, config) {
		    if (!hasOwnProp(regexes, token)) {
		      return new RegExp(unescapeFormat(token));
		    }

		    return regexes[token](config._strict, config._locale);
		  } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


		  function unescapeFormat(s) {
		    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
		      return p1 || p2 || p3 || p4;
		    }));
		  }

		  function regexEscape(s) {
		    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		  }

		  var tokens = {};

		  function addParseToken(token, callback) {
		    var i,
		        func = callback,
		        tokenLen;

		    if (typeof token === 'string') {
		      token = [token];
		    }

		    if (isNumber(callback)) {
		      func = function (input, array) {
		        array[callback] = toInt(input);
		      };
		    }

		    tokenLen = token.length;

		    for (i = 0; i < tokenLen; i++) {
		      tokens[token[i]] = func;
		    }
		  }

		  function addWeekParseToken(token, callback) {
		    addParseToken(token, function (input, array, config, token) {
		      config._w = config._w || {};
		      callback(input, config._w, config, token);
		    });
		  }

		  function addTimeToArrayFromToken(token, input, config) {
		    if (input != null && hasOwnProp(tokens, token)) {
		      tokens[token](input, config._a, config, token);
		    }
		  }

		  var YEAR = 0,
		      MONTH = 1,
		      DATE = 2,
		      HOUR = 3,
		      MINUTE = 4,
		      SECOND = 5,
		      MILLISECOND = 6,
		      WEEK = 7,
		      WEEKDAY = 8;

		  function mod(n, x) {
		    return (n % x + x) % x;
		  }

		  var indexOf;

		  if (Array.prototype.indexOf) {
		    indexOf = Array.prototype.indexOf;
		  } else {
		    indexOf = function (o) {
		      // I know
		      var i;

		      for (i = 0; i < this.length; ++i) {
		        if (this[i] === o) {
		          return i;
		        }
		      }

		      return -1;
		    };
		  }

		  function daysInMonth(year, month) {
		    if (isNaN(year) || isNaN(month)) {
		      return NaN;
		    }

		    var modMonth = mod(month, 12);
		    year += (month - modMonth) / 12;
		    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
		  } // FORMATTING


		  addFormatToken('M', ['MM', 2], 'Mo', function () {
		    return this.month() + 1;
		  });
		  addFormatToken('MMM', 0, 0, function (format) {
		    return this.localeData().monthsShort(this, format);
		  });
		  addFormatToken('MMMM', 0, 0, function (format) {
		    return this.localeData().months(this, format);
		  }); // ALIASES

		  addUnitAlias('month', 'M'); // PRIORITY

		  addUnitPriority('month', 8); // PARSING

		  addRegexToken('M', match1to2);
		  addRegexToken('MM', match1to2, match2);
		  addRegexToken('MMM', function (isStrict, locale) {
		    return locale.monthsShortRegex(isStrict);
		  });
		  addRegexToken('MMMM', function (isStrict, locale) {
		    return locale.monthsRegex(isStrict);
		  });
		  addParseToken(['M', 'MM'], function (input, array) {
		    array[MONTH] = toInt(input) - 1;
		  });
		  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
		    var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


		    if (month != null) {
		      array[MONTH] = month;
		    } else {
		      getParsingFlags(config).invalidMonth = input;
		    }
		  }); // LOCALES

		  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
		      defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
		      MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
		      defaultMonthsShortRegex = matchWord,
		      defaultMonthsRegex = matchWord;

		  function localeMonths(m, format) {
		    if (!m) {
		      return isArray(this._months) ? this._months : this._months['standalone'];
		    }

		    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
		  }

		  function localeMonthsShort(m, format) {
		    if (!m) {
		      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
		    }

		    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
		  }

		  function handleStrictParse(monthName, format, strict) {
		    var i,
		        ii,
		        mom,
		        llc = monthName.toLocaleLowerCase();

		    if (!this._monthsParse) {
		      // this is not used
		      this._monthsParse = [];
		      this._longMonthsParse = [];
		      this._shortMonthsParse = [];

		      for (i = 0; i < 12; ++i) {
		        mom = createUTC([2000, i]);
		        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
		        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
		      }
		    }

		    if (strict) {
		      if (format === 'MMM') {
		        ii = indexOf.call(this._shortMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._longMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    } else {
		      if (format === 'MMM') {
		        ii = indexOf.call(this._shortMonthsParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._longMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._longMonthsParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._shortMonthsParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    }
		  }

		  function localeMonthsParse(monthName, format, strict) {
		    var i, mom, regex;

		    if (this._monthsParseExact) {
		      return handleStrictParse.call(this, monthName, format, strict);
		    }

		    if (!this._monthsParse) {
		      this._monthsParse = [];
		      this._longMonthsParse = [];
		      this._shortMonthsParse = [];
		    } // TODO: add sorting
		    // Sorting makes sure if one month (or abbr) is a prefix of another
		    // see sorting in computeMonthsParse


		    for (i = 0; i < 12; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, i]);

		      if (strict && !this._longMonthsParse[i]) {
		        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
		        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
		      }

		      if (!strict && !this._monthsParse[i]) {
		        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
		        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
		      } // test the regex


		      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
		        return i;
		      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
		        return i;
		      } else if (!strict && this._monthsParse[i].test(monthName)) {
		        return i;
		      }
		    }
		  } // MOMENTS


		  function setMonth(mom, value) {
		    var dayOfMonth;

		    if (!mom.isValid()) {
		      // No op
		      return mom;
		    }

		    if (typeof value === 'string') {
		      if (/^\d+$/.test(value)) {
		        value = toInt(value);
		      } else {
		        value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

		        if (!isNumber(value)) {
		          return mom;
		        }
		      }
		    }

		    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

		    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

		    return mom;
		  }

		  function getSetMonth(value) {
		    if (value != null) {
		      setMonth(this, value);
		      hooks.updateOffset(this, true);
		      return this;
		    } else {
		      return get(this, 'Month');
		    }
		  }

		  function getDaysInMonth() {
		    return daysInMonth(this.year(), this.month());
		  }

		  function monthsShortRegex(isStrict) {
		    if (this._monthsParseExact) {
		      if (!hasOwnProp(this, '_monthsRegex')) {
		        computeMonthsParse.call(this);
		      }

		      if (isStrict) {
		        return this._monthsShortStrictRegex;
		      } else {
		        return this._monthsShortRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_monthsShortRegex')) {
		        this._monthsShortRegex = defaultMonthsShortRegex;
		      }

		      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
		    }
		  }

		  function monthsRegex(isStrict) {
		    if (this._monthsParseExact) {
		      if (!hasOwnProp(this, '_monthsRegex')) {
		        computeMonthsParse.call(this);
		      }

		      if (isStrict) {
		        return this._monthsStrictRegex;
		      } else {
		        return this._monthsRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_monthsRegex')) {
		        this._monthsRegex = defaultMonthsRegex;
		      }

		      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
		    }
		  }

		  function computeMonthsParse() {
		    function cmpLenRev(a, b) {
		      return b.length - a.length;
		    }

		    var shortPieces = [],
		        longPieces = [],
		        mixedPieces = [],
		        i,
		        mom;

		    for (i = 0; i < 12; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, i]);
		      shortPieces.push(this.monthsShort(mom, ''));
		      longPieces.push(this.months(mom, ''));
		      mixedPieces.push(this.months(mom, ''));
		      mixedPieces.push(this.monthsShort(mom, ''));
		    } // Sorting makes sure if one month (or abbr) is a prefix of another it
		    // will match the longer piece.


		    shortPieces.sort(cmpLenRev);
		    longPieces.sort(cmpLenRev);
		    mixedPieces.sort(cmpLenRev);

		    for (i = 0; i < 12; i++) {
		      shortPieces[i] = regexEscape(shortPieces[i]);
		      longPieces[i] = regexEscape(longPieces[i]);
		    }

		    for (i = 0; i < 24; i++) {
		      mixedPieces[i] = regexEscape(mixedPieces[i]);
		    }

		    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		    this._monthsShortRegex = this._monthsRegex;
		    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
		    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
		  } // FORMATTING


		  addFormatToken('Y', 0, 0, function () {
		    var y = this.year();
		    return y <= 9999 ? zeroFill(y, 4) : '+' + y;
		  });
		  addFormatToken(0, ['YY', 2], 0, function () {
		    return this.year() % 100;
		  });
		  addFormatToken(0, ['YYYY', 4], 0, 'year');
		  addFormatToken(0, ['YYYYY', 5], 0, 'year');
		  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

		  addUnitAlias('year', 'y'); // PRIORITIES

		  addUnitPriority('year', 1); // PARSING

		  addRegexToken('Y', matchSigned);
		  addRegexToken('YY', match1to2, match2);
		  addRegexToken('YYYY', match1to4, match4);
		  addRegexToken('YYYYY', match1to6, match6);
		  addRegexToken('YYYYYY', match1to6, match6);
		  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
		  addParseToken('YYYY', function (input, array) {
		    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
		  });
		  addParseToken('YY', function (input, array) {
		    array[YEAR] = hooks.parseTwoDigitYear(input);
		  });
		  addParseToken('Y', function (input, array) {
		    array[YEAR] = parseInt(input, 10);
		  }); // HELPERS

		  function daysInYear(year) {
		    return isLeapYear(year) ? 366 : 365;
		  } // HOOKS


		  hooks.parseTwoDigitYear = function (input) {
		    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
		  }; // MOMENTS


		  var getSetYear = makeGetSet('FullYear', true);

		  function getIsLeapYear() {
		    return isLeapYear(this.year());
		  }

		  function createDate(y, m, d, h, M, s, ms) {
		    // can't just apply() to create a date:
		    // https://stackoverflow.com/q/181348
		    var date; // the date constructor remaps years 0-99 to 1900-1999

		    if (y < 100 && y >= 0) {
		      // preserve leap years using a full 400 year cycle, then reset
		      date = new Date(y + 400, m, d, h, M, s, ms);

		      if (isFinite(date.getFullYear())) {
		        date.setFullYear(y);
		      }
		    } else {
		      date = new Date(y, m, d, h, M, s, ms);
		    }

		    return date;
		  }

		  function createUTCDate(y) {
		    var date, args; // the Date.UTC function remaps years 0-99 to 1900-1999

		    if (y < 100 && y >= 0) {
		      args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

		      args[0] = y + 400;
		      date = new Date(Date.UTC.apply(null, args));

		      if (isFinite(date.getUTCFullYear())) {
		        date.setUTCFullYear(y);
		      }
		    } else {
		      date = new Date(Date.UTC.apply(null, arguments));
		    }

		    return date;
		  } // start-of-first-week - start-of-year


		  function firstWeekOffset(year, dow, doy) {
		    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
		    fwd = 7 + dow - doy,
		        // first-week day local weekday -- which local weekday is fwd
		    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
		    return -fwdlw + fwd - 1;
		  } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


		  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
		    var localWeekday = (7 + weekday - dow) % 7,
		        weekOffset = firstWeekOffset(year, dow, doy),
		        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
		        resYear,
		        resDayOfYear;

		    if (dayOfYear <= 0) {
		      resYear = year - 1;
		      resDayOfYear = daysInYear(resYear) + dayOfYear;
		    } else if (dayOfYear > daysInYear(year)) {
		      resYear = year + 1;
		      resDayOfYear = dayOfYear - daysInYear(year);
		    } else {
		      resYear = year;
		      resDayOfYear = dayOfYear;
		    }

		    return {
		      year: resYear,
		      dayOfYear: resDayOfYear
		    };
		  }

		  function weekOfYear(mom, dow, doy) {
		    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
		        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
		        resWeek,
		        resYear;

		    if (week < 1) {
		      resYear = mom.year() - 1;
		      resWeek = week + weeksInYear(resYear, dow, doy);
		    } else if (week > weeksInYear(mom.year(), dow, doy)) {
		      resWeek = week - weeksInYear(mom.year(), dow, doy);
		      resYear = mom.year() + 1;
		    } else {
		      resYear = mom.year();
		      resWeek = week;
		    }

		    return {
		      week: resWeek,
		      year: resYear
		    };
		  }

		  function weeksInYear(year, dow, doy) {
		    var weekOffset = firstWeekOffset(year, dow, doy),
		        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
		    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
		  } // FORMATTING


		  addFormatToken('w', ['ww', 2], 'wo', 'week');
		  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

		  addUnitAlias('week', 'w');
		  addUnitAlias('isoWeek', 'W'); // PRIORITIES

		  addUnitPriority('week', 5);
		  addUnitPriority('isoWeek', 5); // PARSING

		  addRegexToken('w', match1to2);
		  addRegexToken('ww', match1to2, match2);
		  addRegexToken('W', match1to2);
		  addRegexToken('WW', match1to2, match2);
		  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
		    week[token.substr(0, 1)] = toInt(input);
		  }); // HELPERS
		  // LOCALES

		  function localeWeek(mom) {
		    return weekOfYear(mom, this._week.dow, this._week.doy).week;
		  }

		  var defaultLocaleWeek = {
		    dow: 0,
		    // Sunday is the first day of the week.
		    doy: 6 // The week that contains Jan 6th is the first week of the year.

		  };

		  function localeFirstDayOfWeek() {
		    return this._week.dow;
		  }

		  function localeFirstDayOfYear() {
		    return this._week.doy;
		  } // MOMENTS


		  function getSetWeek(input) {
		    var week = this.localeData().week(this);
		    return input == null ? week : this.add((input - week) * 7, 'd');
		  }

		  function getSetISOWeek(input) {
		    var week = weekOfYear(this, 1, 4).week;
		    return input == null ? week : this.add((input - week) * 7, 'd');
		  } // FORMATTING


		  addFormatToken('d', 0, 'do', 'day');
		  addFormatToken('dd', 0, 0, function (format) {
		    return this.localeData().weekdaysMin(this, format);
		  });
		  addFormatToken('ddd', 0, 0, function (format) {
		    return this.localeData().weekdaysShort(this, format);
		  });
		  addFormatToken('dddd', 0, 0, function (format) {
		    return this.localeData().weekdays(this, format);
		  });
		  addFormatToken('e', 0, 0, 'weekday');
		  addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

		  addUnitAlias('day', 'd');
		  addUnitAlias('weekday', 'e');
		  addUnitAlias('isoWeekday', 'E'); // PRIORITY

		  addUnitPriority('day', 11);
		  addUnitPriority('weekday', 11);
		  addUnitPriority('isoWeekday', 11); // PARSING

		  addRegexToken('d', match1to2);
		  addRegexToken('e', match1to2);
		  addRegexToken('E', match1to2);
		  addRegexToken('dd', function (isStrict, locale) {
		    return locale.weekdaysMinRegex(isStrict);
		  });
		  addRegexToken('ddd', function (isStrict, locale) {
		    return locale.weekdaysShortRegex(isStrict);
		  });
		  addRegexToken('dddd', function (isStrict, locale) {
		    return locale.weekdaysRegex(isStrict);
		  });
		  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
		    var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


		    if (weekday != null) {
		      week.d = weekday;
		    } else {
		      getParsingFlags(config).invalidWeekday = input;
		    }
		  });
		  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
		    week[token] = toInt(input);
		  }); // HELPERS

		  function parseWeekday(input, locale) {
		    if (typeof input !== 'string') {
		      return input;
		    }

		    if (!isNaN(input)) {
		      return parseInt(input, 10);
		    }

		    input = locale.weekdaysParse(input);

		    if (typeof input === 'number') {
		      return input;
		    }

		    return null;
		  }

		  function parseIsoWeekday(input, locale) {
		    if (typeof input === 'string') {
		      return locale.weekdaysParse(input) % 7 || 7;
		    }

		    return isNaN(input) ? null : input;
		  } // LOCALES


		  function shiftWeekdays(ws, n) {
		    return ws.slice(n, 7).concat(ws.slice(0, n));
		  }

		  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
		      defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
		      defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
		      defaultWeekdaysRegex = matchWord,
		      defaultWeekdaysShortRegex = matchWord,
		      defaultWeekdaysMinRegex = matchWord;

		  function localeWeekdays(m, format) {
		    var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
		    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
		  }

		  function localeWeekdaysShort(m) {
		    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
		  }

		  function localeWeekdaysMin(m) {
		    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
		  }

		  function handleStrictParse$1(weekdayName, format, strict) {
		    var i,
		        ii,
		        mom,
		        llc = weekdayName.toLocaleLowerCase();

		    if (!this._weekdaysParse) {
		      this._weekdaysParse = [];
		      this._shortWeekdaysParse = [];
		      this._minWeekdaysParse = [];

		      for (i = 0; i < 7; ++i) {
		        mom = createUTC([2000, 1]).day(i);
		        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
		        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
		        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
		      }
		    }

		    if (strict) {
		      if (format === 'dddd') {
		        ii = indexOf.call(this._weekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else if (format === 'ddd') {
		        ii = indexOf.call(this._shortWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    } else {
		      if (format === 'dddd') {
		        ii = indexOf.call(this._weekdaysParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._shortWeekdaysParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else if (format === 'ddd') {
		        ii = indexOf.call(this._shortWeekdaysParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._weekdaysParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._minWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      } else {
		        ii = indexOf.call(this._minWeekdaysParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._weekdaysParse, llc);

		        if (ii !== -1) {
		          return ii;
		        }

		        ii = indexOf.call(this._shortWeekdaysParse, llc);
		        return ii !== -1 ? ii : null;
		      }
		    }
		  }

		  function localeWeekdaysParse(weekdayName, format, strict) {
		    var i, mom, regex;

		    if (this._weekdaysParseExact) {
		      return handleStrictParse$1.call(this, weekdayName, format, strict);
		    }

		    if (!this._weekdaysParse) {
		      this._weekdaysParse = [];
		      this._minWeekdaysParse = [];
		      this._shortWeekdaysParse = [];
		      this._fullWeekdaysParse = [];
		    }

		    for (i = 0; i < 7; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, 1]).day(i);

		      if (strict && !this._fullWeekdaysParse[i]) {
		        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
		        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
		        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
		      }

		      if (!this._weekdaysParse[i]) {
		        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
		        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
		      } // test the regex


		      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
		        return i;
		      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
		        return i;
		      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
		        return i;
		      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
		        return i;
		      }
		    }
		  } // MOMENTS


		  function getSetDayOfWeek(input) {
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }

		    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

		    if (input != null) {
		      input = parseWeekday(input, this.localeData());
		      return this.add(input - day, 'd');
		    } else {
		      return day;
		    }
		  }

		  function getSetLocaleDayOfWeek(input) {
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }

		    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
		    return input == null ? weekday : this.add(input - weekday, 'd');
		  }

		  function getSetISODayOfWeek(input) {
		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    } // behaves the same as moment#day except
		    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
		    // as a setter, sunday should belong to the previous week.


		    if (input != null) {
		      var weekday = parseIsoWeekday(input, this.localeData());
		      return this.day(this.day() % 7 ? weekday : weekday - 7);
		    } else {
		      return this.day() || 7;
		    }
		  }

		  function weekdaysRegex(isStrict) {
		    if (this._weekdaysParseExact) {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        computeWeekdaysParse.call(this);
		      }

		      if (isStrict) {
		        return this._weekdaysStrictRegex;
		      } else {
		        return this._weekdaysRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        this._weekdaysRegex = defaultWeekdaysRegex;
		      }

		      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
		    }
		  }

		  function weekdaysShortRegex(isStrict) {
		    if (this._weekdaysParseExact) {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        computeWeekdaysParse.call(this);
		      }

		      if (isStrict) {
		        return this._weekdaysShortStrictRegex;
		      } else {
		        return this._weekdaysShortRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
		        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
		      }

		      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
		    }
		  }

		  function weekdaysMinRegex(isStrict) {
		    if (this._weekdaysParseExact) {
		      if (!hasOwnProp(this, '_weekdaysRegex')) {
		        computeWeekdaysParse.call(this);
		      }

		      if (isStrict) {
		        return this._weekdaysMinStrictRegex;
		      } else {
		        return this._weekdaysMinRegex;
		      }
		    } else {
		      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
		        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
		      }

		      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
		    }
		  }

		  function computeWeekdaysParse() {
		    function cmpLenRev(a, b) {
		      return b.length - a.length;
		    }

		    var minPieces = [],
		        shortPieces = [],
		        longPieces = [],
		        mixedPieces = [],
		        i,
		        mom,
		        minp,
		        shortp,
		        longp;

		    for (i = 0; i < 7; i++) {
		      // make the regex if we don't have it already
		      mom = createUTC([2000, 1]).day(i);
		      minp = regexEscape(this.weekdaysMin(mom, ''));
		      shortp = regexEscape(this.weekdaysShort(mom, ''));
		      longp = regexEscape(this.weekdays(mom, ''));
		      minPieces.push(minp);
		      shortPieces.push(shortp);
		      longPieces.push(longp);
		      mixedPieces.push(minp);
		      mixedPieces.push(shortp);
		      mixedPieces.push(longp);
		    } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
		    // will match the longer piece.


		    minPieces.sort(cmpLenRev);
		    shortPieces.sort(cmpLenRev);
		    longPieces.sort(cmpLenRev);
		    mixedPieces.sort(cmpLenRev);
		    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		    this._weekdaysShortRegex = this._weekdaysRegex;
		    this._weekdaysMinRegex = this._weekdaysRegex;
		    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
		    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
		    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
		  } // FORMATTING


		  function hFormat() {
		    return this.hours() % 12 || 12;
		  }

		  function kFormat() {
		    return this.hours() || 24;
		  }

		  addFormatToken('H', ['HH', 2], 0, 'hour');
		  addFormatToken('h', ['hh', 2], 0, hFormat);
		  addFormatToken('k', ['kk', 2], 0, kFormat);
		  addFormatToken('hmm', 0, 0, function () {
		    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
		  });
		  addFormatToken('hmmss', 0, 0, function () {
		    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
		  });
		  addFormatToken('Hmm', 0, 0, function () {
		    return '' + this.hours() + zeroFill(this.minutes(), 2);
		  });
		  addFormatToken('Hmmss', 0, 0, function () {
		    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
		  });

		  function meridiem(token, lowercase) {
		    addFormatToken(token, 0, 0, function () {
		      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
		    });
		  }

		  meridiem('a', true);
		  meridiem('A', false); // ALIASES

		  addUnitAlias('hour', 'h'); // PRIORITY

		  addUnitPriority('hour', 13); // PARSING

		  function matchMeridiem(isStrict, locale) {
		    return locale._meridiemParse;
		  }

		  addRegexToken('a', matchMeridiem);
		  addRegexToken('A', matchMeridiem);
		  addRegexToken('H', match1to2);
		  addRegexToken('h', match1to2);
		  addRegexToken('k', match1to2);
		  addRegexToken('HH', match1to2, match2);
		  addRegexToken('hh', match1to2, match2);
		  addRegexToken('kk', match1to2, match2);
		  addRegexToken('hmm', match3to4);
		  addRegexToken('hmmss', match5to6);
		  addRegexToken('Hmm', match3to4);
		  addRegexToken('Hmmss', match5to6);
		  addParseToken(['H', 'HH'], HOUR);
		  addParseToken(['k', 'kk'], function (input, array, config) {
		    var kInput = toInt(input);
		    array[HOUR] = kInput === 24 ? 0 : kInput;
		  });
		  addParseToken(['a', 'A'], function (input, array, config) {
		    config._isPm = config._locale.isPM(input);
		    config._meridiem = input;
		  });
		  addParseToken(['h', 'hh'], function (input, array, config) {
		    array[HOUR] = toInt(input);
		    getParsingFlags(config).bigHour = true;
		  });
		  addParseToken('hmm', function (input, array, config) {
		    var pos = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos));
		    array[MINUTE] = toInt(input.substr(pos));
		    getParsingFlags(config).bigHour = true;
		  });
		  addParseToken('hmmss', function (input, array, config) {
		    var pos1 = input.length - 4,
		        pos2 = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos1));
		    array[MINUTE] = toInt(input.substr(pos1, 2));
		    array[SECOND] = toInt(input.substr(pos2));
		    getParsingFlags(config).bigHour = true;
		  });
		  addParseToken('Hmm', function (input, array, config) {
		    var pos = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos));
		    array[MINUTE] = toInt(input.substr(pos));
		  });
		  addParseToken('Hmmss', function (input, array, config) {
		    var pos1 = input.length - 4,
		        pos2 = input.length - 2;
		    array[HOUR] = toInt(input.substr(0, pos1));
		    array[MINUTE] = toInt(input.substr(pos1, 2));
		    array[SECOND] = toInt(input.substr(pos2));
		  }); // LOCALES

		  function localeIsPM(input) {
		    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
		    // Using charAt should be more compatible.
		    return (input + '').toLowerCase().charAt(0) === 'p';
		  }

		  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
		      // Setting the hour should keep the time, because the user explicitly
		  // specified which hour they want. So trying to maintain the same hour (in
		  // a new timezone) makes sense. Adding/subtracting hours does not follow
		  // this rule.
		  getSetHour = makeGetSet('Hours', true);

		  function localeMeridiem(hours, minutes, isLower) {
		    if (hours > 11) {
		      return isLower ? 'pm' : 'PM';
		    } else {
		      return isLower ? 'am' : 'AM';
		    }
		  }

		  var baseConfig = {
		    calendar: defaultCalendar,
		    longDateFormat: defaultLongDateFormat,
		    invalidDate: defaultInvalidDate,
		    ordinal: defaultOrdinal,
		    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
		    relativeTime: defaultRelativeTime,
		    months: defaultLocaleMonths,
		    monthsShort: defaultLocaleMonthsShort,
		    week: defaultLocaleWeek,
		    weekdays: defaultLocaleWeekdays,
		    weekdaysMin: defaultLocaleWeekdaysMin,
		    weekdaysShort: defaultLocaleWeekdaysShort,
		    meridiemParse: defaultLocaleMeridiemParse
		  }; // internal storage for locale config files

		  var locales = {},
		      localeFamilies = {},
		      globalLocale;

		  function commonPrefix(arr1, arr2) {
		    var i,
		        minl = Math.min(arr1.length, arr2.length);

		    for (i = 0; i < minl; i += 1) {
		      if (arr1[i] !== arr2[i]) {
		        return i;
		      }
		    }

		    return minl;
		  }

		  function normalizeLocale(key) {
		    return key ? key.toLowerCase().replace('_', '-') : key;
		  } // pick the locale from the array
		  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
		  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


		  function chooseLocale(names) {
		    var i = 0,
		        j,
		        next,
		        locale,
		        split;

		    while (i < names.length) {
		      split = normalizeLocale(names[i]).split('-');
		      j = split.length;
		      next = normalizeLocale(names[i + 1]);
		      next = next ? next.split('-') : null;

		      while (j > 0) {
		        locale = loadLocale(split.slice(0, j).join('-'));

		        if (locale) {
		          return locale;
		        }

		        if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
		          //the next array item is better than a shallower substring of this one
		          break;
		        }

		        j--;
		      }

		      i++;
		    }

		    return globalLocale;
		  }

		  function isLocaleNameSane(name) {
		    // Prevent names that look like filesystem paths, i.e contain '/' or '\'
		    return name.match('^[^/\\\\]*$') != null;
		  }

		  function loadLocale(name) {
		    var oldLocale = null,
		        aliasedRequire; // TODO: Find a better way to register and load all the locales in Node

		    if (locales[name] === undefined && 'object' !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
		      try {
		        oldLocale = globalLocale._abbr;
		        aliasedRequire = commonjsRequire;
		        aliasedRequire('./locale/' + name);
		        getSetGlobalLocale(oldLocale);
		      } catch (e) {
		        // mark as not found to avoid repeating expensive file require call causing high CPU
		        // when trying to find en-US, en_US, en-us for every format call
		        locales[name] = null; // null means not found
		      }
		    }

		    return locales[name];
		  } // This function will load locale and then set the global locale.  If
		  // no arguments are passed in, it will simply return the current global
		  // locale key.


		  function getSetGlobalLocale(key, values) {
		    var data;

		    if (key) {
		      if (isUndefined(values)) {
		        data = getLocale(key);
		      } else {
		        data = defineLocale(key, values);
		      }

		      if (data) {
		        // moment.duration._locale = moment._locale = data;
		        globalLocale = data;
		      } else {
		        if (typeof console !== 'undefined' && console.warn) {
		          //warn user if arguments are passed but the locale could not be set
		          console.warn('Locale ' + key + ' not found. Did you forget to load it?');
		        }
		      }
		    }

		    return globalLocale._abbr;
		  }

		  function defineLocale(name, config) {
		    if (config !== null) {
		      var locale,
		          parentConfig = baseConfig;
		      config.abbr = name;

		      if (locales[name] != null) {
		        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
		        parentConfig = locales[name]._config;
		      } else if (config.parentLocale != null) {
		        if (locales[config.parentLocale] != null) {
		          parentConfig = locales[config.parentLocale]._config;
		        } else {
		          locale = loadLocale(config.parentLocale);

		          if (locale != null) {
		            parentConfig = locale._config;
		          } else {
		            if (!localeFamilies[config.parentLocale]) {
		              localeFamilies[config.parentLocale] = [];
		            }

		            localeFamilies[config.parentLocale].push({
		              name: name,
		              config: config
		            });
		            return null;
		          }
		        }
		      }

		      locales[name] = new Locale(mergeConfigs(parentConfig, config));

		      if (localeFamilies[name]) {
		        localeFamilies[name].forEach(function (x) {
		          defineLocale(x.name, x.config);
		        });
		      } // backwards compat for now: also set the locale
		      // make sure we set the locale AFTER all child locales have been
		      // created, so we won't end up with the child locale set.


		      getSetGlobalLocale(name);
		      return locales[name];
		    } else {
		      // useful for testing
		      delete locales[name];
		      return null;
		    }
		  }

		  function updateLocale(name, config) {
		    if (config != null) {
		      var locale,
		          tmpLocale,
		          parentConfig = baseConfig;

		      if (locales[name] != null && locales[name].parentLocale != null) {
		        // Update existing child locale in-place to avoid memory-leaks
		        locales[name].set(mergeConfigs(locales[name]._config, config));
		      } else {
		        // MERGE
		        tmpLocale = loadLocale(name);

		        if (tmpLocale != null) {
		          parentConfig = tmpLocale._config;
		        }

		        config = mergeConfigs(parentConfig, config);

		        if (tmpLocale == null) {
		          // updateLocale is called for creating a new locale
		          // Set abbr so it will have a name (getters return
		          // undefined otherwise).
		          config.abbr = name;
		        }

		        locale = new Locale(config);
		        locale.parentLocale = locales[name];
		        locales[name] = locale;
		      } // backwards compat for now: also set the locale


		      getSetGlobalLocale(name);
		    } else {
		      // pass null for config to unupdate, useful for tests
		      if (locales[name] != null) {
		        if (locales[name].parentLocale != null) {
		          locales[name] = locales[name].parentLocale;

		          if (name === getSetGlobalLocale()) {
		            getSetGlobalLocale(name);
		          }
		        } else if (locales[name] != null) {
		          delete locales[name];
		        }
		      }
		    }

		    return locales[name];
		  } // returns locale data


		  function getLocale(key) {
		    var locale;

		    if (key && key._locale && key._locale._abbr) {
		      key = key._locale._abbr;
		    }

		    if (!key) {
		      return globalLocale;
		    }

		    if (!isArray(key)) {
		      //short-circuit everything else
		      locale = loadLocale(key);

		      if (locale) {
		        return locale;
		      }

		      key = [key];
		    }

		    return chooseLocale(key);
		  }

		  function listLocales() {
		    return keys(locales);
		  }

		  function checkOverflow(m) {
		    var overflow,
		        a = m._a;

		    if (a && getParsingFlags(m).overflow === -2) {
		      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

		      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
		        overflow = DATE;
		      }

		      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
		        overflow = WEEK;
		      }

		      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
		        overflow = WEEKDAY;
		      }

		      getParsingFlags(m).overflow = overflow;
		    }

		    return m;
		  } // iso 8601 regex
		  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


		  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		      basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		      tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
		      isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
		      // iso time formats and regexes
		  isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
		      aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
		      // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
		  rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
		      obsOffsets = {
		    UT: 0,
		    GMT: 0,
		    EDT: -4 * 60,
		    EST: -5 * 60,
		    CDT: -5 * 60,
		    CST: -6 * 60,
		    MDT: -6 * 60,
		    MST: -7 * 60,
		    PDT: -7 * 60,
		    PST: -8 * 60
		  }; // date from iso format

		  function configFromISO(config) {
		    var i,
		        l,
		        string = config._i,
		        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
		        allowTime,
		        dateFormat,
		        timeFormat,
		        tzFormat,
		        isoDatesLen = isoDates.length,
		        isoTimesLen = isoTimes.length;

		    if (match) {
		      getParsingFlags(config).iso = true;

		      for (i = 0, l = isoDatesLen; i < l; i++) {
		        if (isoDates[i][1].exec(match[1])) {
		          dateFormat = isoDates[i][0];
		          allowTime = isoDates[i][2] !== false;
		          break;
		        }
		      }

		      if (dateFormat == null) {
		        config._isValid = false;
		        return;
		      }

		      if (match[3]) {
		        for (i = 0, l = isoTimesLen; i < l; i++) {
		          if (isoTimes[i][1].exec(match[3])) {
		            // match[2] should be 'T' or space
		            timeFormat = (match[2] || ' ') + isoTimes[i][0];
		            break;
		          }
		        }

		        if (timeFormat == null) {
		          config._isValid = false;
		          return;
		        }
		      }

		      if (!allowTime && timeFormat != null) {
		        config._isValid = false;
		        return;
		      }

		      if (match[4]) {
		        if (tzRegex.exec(match[4])) {
		          tzFormat = 'Z';
		        } else {
		          config._isValid = false;
		          return;
		        }
		      }

		      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
		      configFromStringAndFormat(config);
		    } else {
		      config._isValid = false;
		    }
		  }

		  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
		    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

		    if (secondStr) {
		      result.push(parseInt(secondStr, 10));
		    }

		    return result;
		  }

		  function untruncateYear(yearStr) {
		    var year = parseInt(yearStr, 10);

		    if (year <= 49) {
		      return 2000 + year;
		    } else if (year <= 999) {
		      return 1900 + year;
		    }

		    return year;
		  }

		  function preprocessRFC2822(s) {
		    // Remove comments and folding whitespace and replace multiple-spaces with a single space
		    return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
		  }

		  function checkWeekday(weekdayStr, parsedInput, config) {
		    if (weekdayStr) {
		      // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
		      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
		          weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

		      if (weekdayProvided !== weekdayActual) {
		        getParsingFlags(config).weekdayMismatch = true;
		        config._isValid = false;
		        return false;
		      }
		    }

		    return true;
		  }

		  function calculateOffset(obsOffset, militaryOffset, numOffset) {
		    if (obsOffset) {
		      return obsOffsets[obsOffset];
		    } else if (militaryOffset) {
		      // the only allowed military tz is Z
		      return 0;
		    } else {
		      var hm = parseInt(numOffset, 10),
		          m = hm % 100,
		          h = (hm - m) / 100;
		      return h * 60 + m;
		    }
		  } // date and time from ref 2822 format


		  function configFromRFC2822(config) {
		    var match = rfc2822.exec(preprocessRFC2822(config._i)),
		        parsedArray;

		    if (match) {
		      parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

		      if (!checkWeekday(match[1], parsedArray, config)) {
		        return;
		      }

		      config._a = parsedArray;
		      config._tzm = calculateOffset(match[8], match[9], match[10]);
		      config._d = createUTCDate.apply(null, config._a);

		      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

		      getParsingFlags(config).rfc2822 = true;
		    } else {
		      config._isValid = false;
		    }
		  } // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict


		  function configFromString(config) {
		    var matched = aspNetJsonRegex.exec(config._i);

		    if (matched !== null) {
		      config._d = new Date(+matched[1]);
		      return;
		    }

		    configFromISO(config);

		    if (config._isValid === false) {
		      delete config._isValid;
		    } else {
		      return;
		    }

		    configFromRFC2822(config);

		    if (config._isValid === false) {
		      delete config._isValid;
		    } else {
		      return;
		    }

		    if (config._strict) {
		      config._isValid = false;
		    } else {
		      // Final attempt, use Input Fallback
		      hooks.createFromInputFallback(config);
		    }
		  }

		  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
		    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
		  }); // Pick the first defined of two or three arguments.

		  function defaults(a, b, c) {
		    if (a != null) {
		      return a;
		    }

		    if (b != null) {
		      return b;
		    }

		    return c;
		  }

		  function currentDateArray(config) {
		    // hooks is actually the exported moment object
		    var nowValue = new Date(hooks.now());

		    if (config._useUTC) {
		      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
		    }

		    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
		  } // convert an array to a date.
		  // the array should mirror the parameters below
		  // note: all values past the year are optional and will default to the lowest possible value.
		  // [year, month, day , hour, minute, second, millisecond]


		  function configFromArray(config) {
		    var i,
		        date,
		        input = [],
		        currentDate,
		        expectedWeekday,
		        yearToUse;

		    if (config._d) {
		      return;
		    }

		    currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

		    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
		      dayOfYearFromWeekInfo(config);
		    } //if the day of the year is set, figure out what it is


		    if (config._dayOfYear != null) {
		      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

		      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
		        getParsingFlags(config)._overflowDayOfYear = true;
		      }

		      date = createUTCDate(yearToUse, 0, config._dayOfYear);
		      config._a[MONTH] = date.getUTCMonth();
		      config._a[DATE] = date.getUTCDate();
		    } // Default to current date.
		    // * if no year, month, day of month are given, default to today
		    // * if day of month is given, default month and year
		    // * if month is given, default only year
		    // * if year is given, don't default anything


		    for (i = 0; i < 3 && config._a[i] == null; ++i) {
		      config._a[i] = input[i] = currentDate[i];
		    } // Zero out whatever was not defaulted, including time


		    for (; i < 7; i++) {
		      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
		    } // Check for 24:00:00.000


		    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
		      config._nextDay = true;
		      config._a[HOUR] = 0;
		    }

		    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
		    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
		    // with parseZone.

		    if (config._tzm != null) {
		      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
		    }

		    if (config._nextDay) {
		      config._a[HOUR] = 24;
		    } // check for mismatching day of week


		    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
		      getParsingFlags(config).weekdayMismatch = true;
		    }
		  }

		  function dayOfYearFromWeekInfo(config) {
		    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
		    w = config._w;

		    if (w.GG != null || w.W != null || w.E != null) {
		      dow = 1;
		      doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
		      // how we interpret now (local, utc, fixed offset). So create
		      // a now version of current config (take local/utc/offset flags, and
		      // create now).

		      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
		      week = defaults(w.W, 1);
		      weekday = defaults(w.E, 1);

		      if (weekday < 1 || weekday > 7) {
		        weekdayOverflow = true;
		      }
		    } else {
		      dow = config._locale._week.dow;
		      doy = config._locale._week.doy;
		      curWeek = weekOfYear(createLocal(), dow, doy);
		      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

		      week = defaults(w.w, curWeek.week);

		      if (w.d != null) {
		        // weekday -- low day numbers are considered next week
		        weekday = w.d;

		        if (weekday < 0 || weekday > 6) {
		          weekdayOverflow = true;
		        }
		      } else if (w.e != null) {
		        // local weekday -- counting starts from beginning of week
		        weekday = w.e + dow;

		        if (w.e < 0 || w.e > 6) {
		          weekdayOverflow = true;
		        }
		      } else {
		        // default to beginning of week
		        weekday = dow;
		      }
		    }

		    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
		      getParsingFlags(config)._overflowWeeks = true;
		    } else if (weekdayOverflow != null) {
		      getParsingFlags(config)._overflowWeekday = true;
		    } else {
		      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
		      config._a[YEAR] = temp.year;
		      config._dayOfYear = temp.dayOfYear;
		    }
		  } // constant that refers to the ISO standard


		  hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


		  hooks.RFC_2822 = function () {}; // date from string and format string


		  function configFromStringAndFormat(config) {
		    // TODO: Move this to another part of the creation flow to prevent circular deps
		    if (config._f === hooks.ISO_8601) {
		      configFromISO(config);
		      return;
		    }

		    if (config._f === hooks.RFC_2822) {
		      configFromRFC2822(config);
		      return;
		    }

		    config._a = [];
		    getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

		    var string = '' + config._i,
		        i,
		        parsedInput,
		        tokens,
		        token,
		        skipped,
		        stringLength = string.length,
		        totalParsedInputLength = 0,
		        era,
		        tokenLen;
		    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
		    tokenLen = tokens.length;

		    for (i = 0; i < tokenLen; i++) {
		      token = tokens[i];
		      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];

		      if (parsedInput) {
		        skipped = string.substr(0, string.indexOf(parsedInput));

		        if (skipped.length > 0) {
		          getParsingFlags(config).unusedInput.push(skipped);
		        }

		        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
		        totalParsedInputLength += parsedInput.length;
		      } // don't parse if it's not a known token


		      if (formatTokenFunctions[token]) {
		        if (parsedInput) {
		          getParsingFlags(config).empty = false;
		        } else {
		          getParsingFlags(config).unusedTokens.push(token);
		        }

		        addTimeToArrayFromToken(token, parsedInput, config);
		      } else if (config._strict && !parsedInput) {
		        getParsingFlags(config).unusedTokens.push(token);
		      }
		    } // add remaining unparsed input length to the string


		    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

		    if (string.length > 0) {
		      getParsingFlags(config).unusedInput.push(string);
		    } // clear _12h flag if hour is <= 12


		    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
		      getParsingFlags(config).bigHour = undefined;
		    }

		    getParsingFlags(config).parsedDateParts = config._a.slice(0);
		    getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

		    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem); // handle era

		    era = getParsingFlags(config).era;

		    if (era !== null) {
		      config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
		    }

		    configFromArray(config);
		    checkOverflow(config);
		  }

		  function meridiemFixWrap(locale, hour, meridiem) {
		    var isPm;

		    if (meridiem == null) {
		      // nothing to do
		      return hour;
		    }

		    if (locale.meridiemHour != null) {
		      return locale.meridiemHour(hour, meridiem);
		    } else if (locale.isPM != null) {
		      // Fallback
		      isPm = locale.isPM(meridiem);

		      if (isPm && hour < 12) {
		        hour += 12;
		      }

		      if (!isPm && hour === 12) {
		        hour = 0;
		      }

		      return hour;
		    } else {
		      // this is not supposed to happen
		      return hour;
		    }
		  } // date from string and array of format strings


		  function configFromStringAndArray(config) {
		    var tempConfig,
		        bestMoment,
		        scoreToBeat,
		        i,
		        currentScore,
		        validFormatFound,
		        bestFormatIsValid = false,
		        configfLen = config._f.length;

		    if (configfLen === 0) {
		      getParsingFlags(config).invalidFormat = true;
		      config._d = new Date(NaN);
		      return;
		    }

		    for (i = 0; i < configfLen; i++) {
		      currentScore = 0;
		      validFormatFound = false;
		      tempConfig = copyConfig({}, config);

		      if (config._useUTC != null) {
		        tempConfig._useUTC = config._useUTC;
		      }

		      tempConfig._f = config._f[i];
		      configFromStringAndFormat(tempConfig);

		      if (isValid(tempConfig)) {
		        validFormatFound = true;
		      } // if there is any input that was not parsed add a penalty for that format


		      currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

		      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
		      getParsingFlags(tempConfig).score = currentScore;

		      if (!bestFormatIsValid) {
		        if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
		          scoreToBeat = currentScore;
		          bestMoment = tempConfig;

		          if (validFormatFound) {
		            bestFormatIsValid = true;
		          }
		        }
		      } else {
		        if (currentScore < scoreToBeat) {
		          scoreToBeat = currentScore;
		          bestMoment = tempConfig;
		        }
		      }
		    }

		    extend(config, bestMoment || tempConfig);
		  }

		  function configFromObject(config) {
		    if (config._d) {
		      return;
		    }

		    var i = normalizeObjectUnits(config._i),
		        dayOrDate = i.day === undefined ? i.date : i.day;
		    config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
		      return obj && parseInt(obj, 10);
		    });
		    configFromArray(config);
		  }

		  function createFromConfig(config) {
		    var res = new Moment(checkOverflow(prepareConfig(config)));

		    if (res._nextDay) {
		      // Adding is smart enough around DST
		      res.add(1, 'd');
		      res._nextDay = undefined;
		    }

		    return res;
		  }

		  function prepareConfig(config) {
		    var input = config._i,
		        format = config._f;
		    config._locale = config._locale || getLocale(config._l);

		    if (input === null || format === undefined && input === '') {
		      return createInvalid({
		        nullInput: true
		      });
		    }

		    if (typeof input === 'string') {
		      config._i = input = config._locale.preparse(input);
		    }

		    if (isMoment(input)) {
		      return new Moment(checkOverflow(input));
		    } else if (isDate(input)) {
		      config._d = input;
		    } else if (isArray(format)) {
		      configFromStringAndArray(config);
		    } else if (format) {
		      configFromStringAndFormat(config);
		    } else {
		      configFromInput(config);
		    }

		    if (!isValid(config)) {
		      config._d = null;
		    }

		    return config;
		  }

		  function configFromInput(config) {
		    var input = config._i;

		    if (isUndefined(input)) {
		      config._d = new Date(hooks.now());
		    } else if (isDate(input)) {
		      config._d = new Date(input.valueOf());
		    } else if (typeof input === 'string') {
		      configFromString(config);
		    } else if (isArray(input)) {
		      config._a = map(input.slice(0), function (obj) {
		        return parseInt(obj, 10);
		      });
		      configFromArray(config);
		    } else if (isObject(input)) {
		      configFromObject(config);
		    } else if (isNumber(input)) {
		      // from milliseconds
		      config._d = new Date(input);
		    } else {
		      hooks.createFromInputFallback(config);
		    }
		  }

		  function createLocalOrUTC(input, format, locale, strict, isUTC) {
		    var c = {};

		    if (format === true || format === false) {
		      strict = format;
		      format = undefined;
		    }

		    if (locale === true || locale === false) {
		      strict = locale;
		      locale = undefined;
		    }

		    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
		      input = undefined;
		    } // object construction must be done this way.
		    // https://github.com/moment/moment/issues/1423


		    c._isAMomentObject = true;
		    c._useUTC = c._isUTC = isUTC;
		    c._l = locale;
		    c._i = input;
		    c._f = format;
		    c._strict = strict;
		    return createFromConfig(c);
		  }

		  function createLocal(input, format, locale, strict) {
		    return createLocalOrUTC(input, format, locale, strict, false);
		  }

		  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
		    var other = createLocal.apply(null, arguments);

		    if (this.isValid() && other.isValid()) {
		      return other < this ? this : other;
		    } else {
		      return createInvalid();
		    }
		  }),
		      prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
		    var other = createLocal.apply(null, arguments);

		    if (this.isValid() && other.isValid()) {
		      return other > this ? this : other;
		    } else {
		      return createInvalid();
		    }
		  }); // Pick a moment m from moments so that m[fn](other) is true for all
		  // other. This relies on the function fn to be transitive.
		  //
		  // moments should either be an array of moment objects or an array, whose
		  // first element is an array of moment objects.

		  function pickBy(fn, moments) {
		    var res, i;

		    if (moments.length === 1 && isArray(moments[0])) {
		      moments = moments[0];
		    }

		    if (!moments.length) {
		      return createLocal();
		    }

		    res = moments[0];

		    for (i = 1; i < moments.length; ++i) {
		      if (!moments[i].isValid() || moments[i][fn](res)) {
		        res = moments[i];
		      }
		    }

		    return res;
		  } // TODO: Use [].sort instead?


		  function min() {
		    var args = [].slice.call(arguments, 0);
		    return pickBy('isBefore', args);
		  }

		  function max() {
		    var args = [].slice.call(arguments, 0);
		    return pickBy('isAfter', args);
		  }

		  var now = function () {
		    return Date.now ? Date.now() : +new Date();
		  };

		  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

		  function isDurationValid(m) {
		    var key,
		        unitHasDecimal = false,
		        i,
		        orderLen = ordering.length;

		    for (key in m) {
		      if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
		        return false;
		      }
		    }

		    for (i = 0; i < orderLen; ++i) {
		      if (m[ordering[i]]) {
		        if (unitHasDecimal) {
		          return false; // only allow non-integers for smallest unit
		        }

		        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
		          unitHasDecimal = true;
		        }
		      }
		    }

		    return true;
		  }

		  function isValid$1() {
		    return this._isValid;
		  }

		  function createInvalid$1() {
		    return createDuration(NaN);
		  }

		  function Duration(duration) {
		    var normalizedInput = normalizeObjectUnits(duration),
		        years = normalizedInput.year || 0,
		        quarters = normalizedInput.quarter || 0,
		        months = normalizedInput.month || 0,
		        weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
		        days = normalizedInput.day || 0,
		        hours = normalizedInput.hour || 0,
		        minutes = normalizedInput.minute || 0,
		        seconds = normalizedInput.second || 0,
		        milliseconds = normalizedInput.millisecond || 0;
		    this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

		    this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
		    minutes * 6e4 + // 1000 * 60
		    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
		    // Because of dateAddRemove treats 24 hours as different from a
		    // day when working around DST, we need to store them separately

		    this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
		    // which months you are are talking about, so we have to store
		    // it separately.

		    this._months = +months + quarters * 3 + years * 12;
		    this._data = {};
		    this._locale = getLocale();

		    this._bubble();
		  }

		  function isDuration(obj) {
		    return obj instanceof Duration;
		  }

		  function absRound(number) {
		    if (number < 0) {
		      return Math.round(-1 * number) * -1;
		    } else {
		      return Math.round(number);
		    }
		  } // compare two arrays, return the number of differences


		  function compareArrays(array1, array2, dontConvert) {
		    var len = Math.min(array1.length, array2.length),
		        lengthDiff = Math.abs(array1.length - array2.length),
		        diffs = 0,
		        i;

		    for (i = 0; i < len; i++) {
		      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
		        diffs++;
		      }
		    }

		    return diffs + lengthDiff;
		  } // FORMATTING


		  function offset(token, separator) {
		    addFormatToken(token, 0, 0, function () {
		      var offset = this.utcOffset(),
		          sign = '+';

		      if (offset < 0) {
		        offset = -offset;
		        sign = '-';
		      }

		      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
		    });
		  }

		  offset('Z', ':');
		  offset('ZZ', ''); // PARSING

		  addRegexToken('Z', matchShortOffset);
		  addRegexToken('ZZ', matchShortOffset);
		  addParseToken(['Z', 'ZZ'], function (input, array, config) {
		    config._useUTC = true;
		    config._tzm = offsetFromString(matchShortOffset, input);
		  }); // HELPERS
		  // timezone chunker
		  // '+10:00' > ['10',  '00']
		  // '-1530'  > ['-15', '30']

		  var chunkOffset = /([\+\-]|\d\d)/gi;

		  function offsetFromString(matcher, string) {
		    var matches = (string || '').match(matcher),
		        chunk,
		        parts,
		        minutes;

		    if (matches === null) {
		      return null;
		    }

		    chunk = matches[matches.length - 1] || [];
		    parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
		    minutes = +(parts[1] * 60) + toInt(parts[2]);
		    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
		  } // Return a moment from input, that is local/utc/zone equivalent to model.


		  function cloneWithOffset(input, model) {
		    var res, diff;

		    if (model._isUTC) {
		      res = model.clone();
		      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

		      res._d.setTime(res._d.valueOf() + diff);

		      hooks.updateOffset(res, false);
		      return res;
		    } else {
		      return createLocal(input).local();
		    }
		  }

		  function getDateOffset(m) {
		    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
		    // https://github.com/moment/moment/pull/1871
		    return -Math.round(m._d.getTimezoneOffset());
		  } // HOOKS
		  // This function will be called whenever a moment is mutated.
		  // It is intended to keep the offset in sync with the timezone.


		  hooks.updateOffset = function () {}; // MOMENTS
		  // keepLocalTime = true means only change the timezone, without
		  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
		  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
		  // +0200, so we adjust the time as needed, to be valid.
		  //
		  // Keeping the time actually adds/subtracts (one hour)
		  // from the actual represented time. That is why we call updateOffset
		  // a second time. In case it wants us to change the offset again
		  // _changeInProgress == true case, then we have to adjust, because
		  // there is no such time in the given timezone.


		  function getSetOffset(input, keepLocalTime, keepMinutes) {
		    var offset = this._offset || 0,
		        localAdjust;

		    if (!this.isValid()) {
		      return input != null ? this : NaN;
		    }

		    if (input != null) {
		      if (typeof input === 'string') {
		        input = offsetFromString(matchShortOffset, input);

		        if (input === null) {
		          return this;
		        }
		      } else if (Math.abs(input) < 16 && !keepMinutes) {
		        input = input * 60;
		      }

		      if (!this._isUTC && keepLocalTime) {
		        localAdjust = getDateOffset(this);
		      }

		      this._offset = input;
		      this._isUTC = true;

		      if (localAdjust != null) {
		        this.add(localAdjust, 'm');
		      }

		      if (offset !== input) {
		        if (!keepLocalTime || this._changeInProgress) {
		          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
		        } else if (!this._changeInProgress) {
		          this._changeInProgress = true;
		          hooks.updateOffset(this, true);
		          this._changeInProgress = null;
		        }
		      }

		      return this;
		    } else {
		      return this._isUTC ? offset : getDateOffset(this);
		    }
		  }

		  function getSetZone(input, keepLocalTime) {
		    if (input != null) {
		      if (typeof input !== 'string') {
		        input = -input;
		      }

		      this.utcOffset(input, keepLocalTime);
		      return this;
		    } else {
		      return -this.utcOffset();
		    }
		  }

		  function setOffsetToUTC(keepLocalTime) {
		    return this.utcOffset(0, keepLocalTime);
		  }

		  function setOffsetToLocal(keepLocalTime) {
		    if (this._isUTC) {
		      this.utcOffset(0, keepLocalTime);
		      this._isUTC = false;

		      if (keepLocalTime) {
		        this.subtract(getDateOffset(this), 'm');
		      }
		    }

		    return this;
		  }

		  function setOffsetToParsedOffset() {
		    if (this._tzm != null) {
		      this.utcOffset(this._tzm, false, true);
		    } else if (typeof this._i === 'string') {
		      var tZone = offsetFromString(matchOffset, this._i);

		      if (tZone != null) {
		        this.utcOffset(tZone);
		      } else {
		        this.utcOffset(0, true);
		      }
		    }

		    return this;
		  }

		  function hasAlignedHourOffset(input) {
		    if (!this.isValid()) {
		      return false;
		    }

		    input = input ? createLocal(input).utcOffset() : 0;
		    return (this.utcOffset() - input) % 60 === 0;
		  }

		  function isDaylightSavingTime() {
		    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
		  }

		  function isDaylightSavingTimeShifted() {
		    if (!isUndefined(this._isDSTShifted)) {
		      return this._isDSTShifted;
		    }

		    var c = {},
		        other;
		    copyConfig(c, this);
		    c = prepareConfig(c);

		    if (c._a) {
		      other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
		      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
		    } else {
		      this._isDSTShifted = false;
		    }

		    return this._isDSTShifted;
		  }

		  function isLocal() {
		    return this.isValid() ? !this._isUTC : false;
		  }

		  function isUtcOffset() {
		    return this.isValid() ? this._isUTC : false;
		  }

		  function isUtc() {
		    return this.isValid() ? this._isUTC && this._offset === 0 : false;
		  } // ASP.NET json date format regex


		  var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
		      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
		  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
		  // and further modified to allow for strings containing both week and day
		  isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

		  function createDuration(input, key) {
		    var duration = input,
		        // matching against regexp is expensive, do it on demand
		    match = null,
		        sign,
		        ret,
		        diffRes;

		    if (isDuration(input)) {
		      duration = {
		        ms: input._milliseconds,
		        d: input._days,
		        M: input._months
		      };
		    } else if (isNumber(input) || !isNaN(+input)) {
		      duration = {};

		      if (key) {
		        duration[key] = +input;
		      } else {
		        duration.milliseconds = +input;
		      }
		    } else if (match = aspNetRegex.exec(input)) {
		      sign = match[1] === '-' ? -1 : 1;
		      duration = {
		        y: 0,
		        d: toInt(match[DATE]) * sign,
		        h: toInt(match[HOUR]) * sign,
		        m: toInt(match[MINUTE]) * sign,
		        s: toInt(match[SECOND]) * sign,
		        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

		      };
		    } else if (match = isoRegex.exec(input)) {
		      sign = match[1] === '-' ? -1 : 1;
		      duration = {
		        y: parseIso(match[2], sign),
		        M: parseIso(match[3], sign),
		        w: parseIso(match[4], sign),
		        d: parseIso(match[5], sign),
		        h: parseIso(match[6], sign),
		        m: parseIso(match[7], sign),
		        s: parseIso(match[8], sign)
		      };
		    } else if (duration == null) {
		      // checks for null or undefined
		      duration = {};
		    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
		      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
		      duration = {};
		      duration.ms = diffRes.milliseconds;
		      duration.M = diffRes.months;
		    }

		    ret = new Duration(duration);

		    if (isDuration(input) && hasOwnProp(input, '_locale')) {
		      ret._locale = input._locale;
		    }

		    if (isDuration(input) && hasOwnProp(input, '_isValid')) {
		      ret._isValid = input._isValid;
		    }

		    return ret;
		  }

		  createDuration.fn = Duration.prototype;
		  createDuration.invalid = createInvalid$1;

		  function parseIso(inp, sign) {
		    // We'd normally use ~~inp for this, but unfortunately it also
		    // converts floats to ints.
		    // inp may be undefined, so careful calling replace on it.
		    var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

		    return (isNaN(res) ? 0 : res) * sign;
		  }

		  function positiveMomentsDifference(base, other) {
		    var res = {};
		    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

		    if (base.clone().add(res.months, 'M').isAfter(other)) {
		      --res.months;
		    }

		    res.milliseconds = +other - +base.clone().add(res.months, 'M');
		    return res;
		  }

		  function momentsDifference(base, other) {
		    var res;

		    if (!(base.isValid() && other.isValid())) {
		      return {
		        milliseconds: 0,
		        months: 0
		      };
		    }

		    other = cloneWithOffset(other, base);

		    if (base.isBefore(other)) {
		      res = positiveMomentsDifference(base, other);
		    } else {
		      res = positiveMomentsDifference(other, base);
		      res.milliseconds = -res.milliseconds;
		      res.months = -res.months;
		    }

		    return res;
		  } // TODO: remove 'name' arg after deprecation is removed


		  function createAdder(direction, name) {
		    return function (val, period) {
		      var dur, tmp; //invert the arguments, but complain about it

		      if (period !== null && !isNaN(+period)) {
		        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
		        tmp = val;
		        val = period;
		        period = tmp;
		      }

		      dur = createDuration(val, period);
		      addSubtract(this, dur, direction);
		      return this;
		    };
		  }

		  function addSubtract(mom, duration, isAdding, updateOffset) {
		    var milliseconds = duration._milliseconds,
		        days = absRound(duration._days),
		        months = absRound(duration._months);

		    if (!mom.isValid()) {
		      // No op
		      return;
		    }

		    updateOffset = updateOffset == null ? true : updateOffset;

		    if (months) {
		      setMonth(mom, get(mom, 'Month') + months * isAdding);
		    }

		    if (days) {
		      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
		    }

		    if (milliseconds) {
		      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
		    }

		    if (updateOffset) {
		      hooks.updateOffset(mom, days || months);
		    }
		  }

		  var add = createAdder(1, 'add'),
		      subtract = createAdder(-1, 'subtract');

		  function isString(input) {
		    return typeof input === 'string' || input instanceof String;
		  } // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined


		  function isMomentInput(input) {
		    return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
		  }

		  function isMomentInputObject(input) {
		    var objectTest = isObject(input) && !isObjectEmpty(input),
		        propertyTest = false,
		        properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
		        i,
		        property,
		        propertyLen = properties.length;

		    for (i = 0; i < propertyLen; i += 1) {
		      property = properties[i];
		      propertyTest = propertyTest || hasOwnProp(input, property);
		    }

		    return objectTest && propertyTest;
		  }

		  function isNumberOrStringArray(input) {
		    var arrayTest = isArray(input),
		        dataTypeTest = false;

		    if (arrayTest) {
		      dataTypeTest = input.filter(function (item) {
		        return !isNumber(item) && isString(input);
		      }).length === 0;
		    }

		    return arrayTest && dataTypeTest;
		  }

		  function isCalendarSpec(input) {
		    var objectTest = isObject(input) && !isObjectEmpty(input),
		        propertyTest = false,
		        properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
		        i,
		        property;

		    for (i = 0; i < properties.length; i += 1) {
		      property = properties[i];
		      propertyTest = propertyTest || hasOwnProp(input, property);
		    }

		    return objectTest && propertyTest;
		  }

		  function getCalendarFormat(myMoment, now) {
		    var diff = myMoment.diff(now, 'days', true);
		    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
		  }

		  function calendar$1(time, formats) {
		    // Support for single parameter, formats only overload to the calendar function
		    if (arguments.length === 1) {
		      if (!arguments[0]) {
		        time = undefined;
		        formats = undefined;
		      } else if (isMomentInput(arguments[0])) {
		        time = arguments[0];
		        formats = undefined;
		      } else if (isCalendarSpec(arguments[0])) {
		        formats = arguments[0];
		        time = undefined;
		      }
		    } // We want to compare the start of today, vs this.
		    // Getting start-of-today depends on whether we're local/utc/offset or not.


		    var now = time || createLocal(),
		        sod = cloneWithOffset(now, this).startOf('day'),
		        format = hooks.calendarFormat(this, sod) || 'sameElse',
		        output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
		    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
		  }

		  function clone() {
		    return new Moment(this);
		  }

		  function isAfter(input, units) {
		    var localInput = isMoment(input) ? input : createLocal(input);

		    if (!(this.isValid() && localInput.isValid())) {
		      return false;
		    }

		    units = normalizeUnits(units) || 'millisecond';

		    if (units === 'millisecond') {
		      return this.valueOf() > localInput.valueOf();
		    } else {
		      return localInput.valueOf() < this.clone().startOf(units).valueOf();
		    }
		  }

		  function isBefore(input, units) {
		    var localInput = isMoment(input) ? input : createLocal(input);

		    if (!(this.isValid() && localInput.isValid())) {
		      return false;
		    }

		    units = normalizeUnits(units) || 'millisecond';

		    if (units === 'millisecond') {
		      return this.valueOf() < localInput.valueOf();
		    } else {
		      return this.clone().endOf(units).valueOf() < localInput.valueOf();
		    }
		  }

		  function isBetween(from, to, units, inclusivity) {
		    var localFrom = isMoment(from) ? from : createLocal(from),
		        localTo = isMoment(to) ? to : createLocal(to);

		    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
		      return false;
		    }

		    inclusivity = inclusivity || '()';
		    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
		  }

		  function isSame(input, units) {
		    var localInput = isMoment(input) ? input : createLocal(input),
		        inputMs;

		    if (!(this.isValid() && localInput.isValid())) {
		      return false;
		    }

		    units = normalizeUnits(units) || 'millisecond';

		    if (units === 'millisecond') {
		      return this.valueOf() === localInput.valueOf();
		    } else {
		      inputMs = localInput.valueOf();
		      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
		    }
		  }

		  function isSameOrAfter(input, units) {
		    return this.isSame(input, units) || this.isAfter(input, units);
		  }

		  function isSameOrBefore(input, units) {
		    return this.isSame(input, units) || this.isBefore(input, units);
		  }

		  function diff(input, units, asFloat) {
		    var that, zoneDelta, output;

		    if (!this.isValid()) {
		      return NaN;
		    }

		    that = cloneWithOffset(input, this);

		    if (!that.isValid()) {
		      return NaN;
		    }

		    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
		    units = normalizeUnits(units);

		    switch (units) {
		      case 'year':
		        output = monthDiff(this, that) / 12;
		        break;

		      case 'month':
		        output = monthDiff(this, that);
		        break;

		      case 'quarter':
		        output = monthDiff(this, that) / 3;
		        break;

		      case 'second':
		        output = (this - that) / 1e3;
		        break;
		      // 1000

		      case 'minute':
		        output = (this - that) / 6e4;
		        break;
		      // 1000 * 60

		      case 'hour':
		        output = (this - that) / 36e5;
		        break;
		      // 1000 * 60 * 60

		      case 'day':
		        output = (this - that - zoneDelta) / 864e5;
		        break;
		      // 1000 * 60 * 60 * 24, negate dst

		      case 'week':
		        output = (this - that - zoneDelta) / 6048e5;
		        break;
		      // 1000 * 60 * 60 * 24 * 7, negate dst

		      default:
		        output = this - that;
		    }

		    return asFloat ? output : absFloor(output);
		  }

		  function monthDiff(a, b) {
		    if (a.date() < b.date()) {
		      // end-of-month calculations work correct when the start month has more
		      // days than the end month.
		      return -monthDiff(b, a);
		    } // difference in months


		    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
		        // b is in (anchor - 1 month, anchor + 1 month)
		    anchor = a.clone().add(wholeMonthDiff, 'months'),
		        anchor2,
		        adjust;

		    if (b - anchor < 0) {
		      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

		      adjust = (b - anchor) / (anchor - anchor2);
		    } else {
		      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

		      adjust = (b - anchor) / (anchor2 - anchor);
		    } //check for negative zero, return zero if negative zero


		    return -(wholeMonthDiff + adjust) || 0;
		  }

		  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
		  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

		  function toString() {
		    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
		  }

		  function toISOString(keepOffset) {
		    if (!this.isValid()) {
		      return null;
		    }

		    var utc = keepOffset !== true,
		        m = utc ? this.clone().utc() : this;

		    if (m.year() < 0 || m.year() > 9999) {
		      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
		    }

		    if (isFunction(Date.prototype.toISOString)) {
		      // native implementation is ~50x faster, use it when we can
		      if (utc) {
		        return this.toDate().toISOString();
		      } else {
		        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
		      }
		    }

		    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
		  }
		  /**
		   * Return a human readable representation of a moment that can
		   * also be evaluated to get a new moment which is the same
		   *
		   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
		   */


		  function inspect() {
		    if (!this.isValid()) {
		      return 'moment.invalid(/* ' + this._i + ' */)';
		    }

		    var func = 'moment',
		        zone = '',
		        prefix,
		        year,
		        datetime,
		        suffix;

		    if (!this.isLocal()) {
		      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
		      zone = 'Z';
		    }

		    prefix = '[' + func + '("]';
		    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
		    datetime = '-MM-DD[T]HH:mm:ss.SSS';
		    suffix = zone + '[")]';
		    return this.format(prefix + year + datetime + suffix);
		  }

		  function format(inputString) {
		    if (!inputString) {
		      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
		    }

		    var output = formatMoment(this, inputString);
		    return this.localeData().postformat(output);
		  }

		  function from(time, withoutSuffix) {
		    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
		      return createDuration({
		        to: this,
		        from: time
		      }).locale(this.locale()).humanize(!withoutSuffix);
		    } else {
		      return this.localeData().invalidDate();
		    }
		  }

		  function fromNow(withoutSuffix) {
		    return this.from(createLocal(), withoutSuffix);
		  }

		  function to(time, withoutSuffix) {
		    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
		      return createDuration({
		        from: this,
		        to: time
		      }).locale(this.locale()).humanize(!withoutSuffix);
		    } else {
		      return this.localeData().invalidDate();
		    }
		  }

		  function toNow(withoutSuffix) {
		    return this.to(createLocal(), withoutSuffix);
		  } // If passed a locale key, it will set the locale for this
		  // instance.  Otherwise, it will return the locale configuration
		  // variables for this instance.


		  function locale(key) {
		    var newLocaleData;

		    if (key === undefined) {
		      return this._locale._abbr;
		    } else {
		      newLocaleData = getLocale(key);

		      if (newLocaleData != null) {
		        this._locale = newLocaleData;
		      }

		      return this;
		    }
		  }

		  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
		    if (key === undefined) {
		      return this.localeData();
		    } else {
		      return this.locale(key);
		    }
		  });

		  function localeData() {
		    return this._locale;
		  }

		  var MS_PER_SECOND = 1000,
		      MS_PER_MINUTE = 60 * MS_PER_SECOND,
		      MS_PER_HOUR = 60 * MS_PER_MINUTE,
		      MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

		  function mod$1(dividend, divisor) {
		    return (dividend % divisor + divisor) % divisor;
		  }

		  function localStartOfDate(y, m, d) {
		    // the date constructor remaps years 0-99 to 1900-1999
		    if (y < 100 && y >= 0) {
		      // preserve leap years using a full 400 year cycle, then reset
		      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
		    } else {
		      return new Date(y, m, d).valueOf();
		    }
		  }

		  function utcStartOfDate(y, m, d) {
		    // Date.UTC remaps years 0-99 to 1900-1999
		    if (y < 100 && y >= 0) {
		      // preserve leap years using a full 400 year cycle, then reset
		      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
		    } else {
		      return Date.UTC(y, m, d);
		    }
		  }

		  function startOf(units) {
		    var time, startOfDate;
		    units = normalizeUnits(units);

		    if (units === undefined || units === 'millisecond' || !this.isValid()) {
		      return this;
		    }

		    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

		    switch (units) {
		      case 'year':
		        time = startOfDate(this.year(), 0, 1);
		        break;

		      case 'quarter':
		        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
		        break;

		      case 'month':
		        time = startOfDate(this.year(), this.month(), 1);
		        break;

		      case 'week':
		        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
		        break;

		      case 'isoWeek':
		        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
		        break;

		      case 'day':
		      case 'date':
		        time = startOfDate(this.year(), this.month(), this.date());
		        break;

		      case 'hour':
		        time = this._d.valueOf();
		        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
		        break;

		      case 'minute':
		        time = this._d.valueOf();
		        time -= mod$1(time, MS_PER_MINUTE);
		        break;

		      case 'second':
		        time = this._d.valueOf();
		        time -= mod$1(time, MS_PER_SECOND);
		        break;
		    }

		    this._d.setTime(time);

		    hooks.updateOffset(this, true);
		    return this;
		  }

		  function endOf(units) {
		    var time, startOfDate;
		    units = normalizeUnits(units);

		    if (units === undefined || units === 'millisecond' || !this.isValid()) {
		      return this;
		    }

		    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

		    switch (units) {
		      case 'year':
		        time = startOfDate(this.year() + 1, 0, 1) - 1;
		        break;

		      case 'quarter':
		        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
		        break;

		      case 'month':
		        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
		        break;

		      case 'week':
		        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
		        break;

		      case 'isoWeek':
		        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
		        break;

		      case 'day':
		      case 'date':
		        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
		        break;

		      case 'hour':
		        time = this._d.valueOf();
		        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
		        break;

		      case 'minute':
		        time = this._d.valueOf();
		        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
		        break;

		      case 'second':
		        time = this._d.valueOf();
		        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
		        break;
		    }

		    this._d.setTime(time);

		    hooks.updateOffset(this, true);
		    return this;
		  }

		  function valueOf() {
		    return this._d.valueOf() - (this._offset || 0) * 60000;
		  }

		  function unix() {
		    return Math.floor(this.valueOf() / 1000);
		  }

		  function toDate() {
		    return new Date(this.valueOf());
		  }

		  function toArray() {
		    var m = this;
		    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
		  }

		  function toObject() {
		    var m = this;
		    return {
		      years: m.year(),
		      months: m.month(),
		      date: m.date(),
		      hours: m.hours(),
		      minutes: m.minutes(),
		      seconds: m.seconds(),
		      milliseconds: m.milliseconds()
		    };
		  }

		  function toJSON() {
		    // new Date(NaN).toJSON() === null
		    return this.isValid() ? this.toISOString() : null;
		  }

		  function isValid$2() {
		    return isValid(this);
		  }

		  function parsingFlags() {
		    return extend({}, getParsingFlags(this));
		  }

		  function invalidAt() {
		    return getParsingFlags(this).overflow;
		  }

		  function creationData() {
		    return {
		      input: this._i,
		      format: this._f,
		      locale: this._locale,
		      isUTC: this._isUTC,
		      strict: this._strict
		    };
		  }

		  addFormatToken('N', 0, 0, 'eraAbbr');
		  addFormatToken('NN', 0, 0, 'eraAbbr');
		  addFormatToken('NNN', 0, 0, 'eraAbbr');
		  addFormatToken('NNNN', 0, 0, 'eraName');
		  addFormatToken('NNNNN', 0, 0, 'eraNarrow');
		  addFormatToken('y', ['y', 1], 'yo', 'eraYear');
		  addFormatToken('y', ['yy', 2], 0, 'eraYear');
		  addFormatToken('y', ['yyy', 3], 0, 'eraYear');
		  addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
		  addRegexToken('N', matchEraAbbr);
		  addRegexToken('NN', matchEraAbbr);
		  addRegexToken('NNN', matchEraAbbr);
		  addRegexToken('NNNN', matchEraName);
		  addRegexToken('NNNNN', matchEraNarrow);
		  addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
		    var era = config._locale.erasParse(input, token, config._strict);

		    if (era) {
		      getParsingFlags(config).era = era;
		    } else {
		      getParsingFlags(config).invalidEra = input;
		    }
		  });
		  addRegexToken('y', matchUnsigned);
		  addRegexToken('yy', matchUnsigned);
		  addRegexToken('yyy', matchUnsigned);
		  addRegexToken('yyyy', matchUnsigned);
		  addRegexToken('yo', matchEraYearOrdinal);
		  addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
		  addParseToken(['yo'], function (input, array, config, token) {
		    var match;

		    if (config._locale._eraYearOrdinalRegex) {
		      match = input.match(config._locale._eraYearOrdinalRegex);
		    }

		    if (config._locale.eraYearOrdinalParse) {
		      array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
		    } else {
		      array[YEAR] = parseInt(input, 10);
		    }
		  });

		  function localeEras(m, format) {
		    var i,
		        l,
		        date,
		        eras = this._eras || getLocale('en')._eras;

		    for (i = 0, l = eras.length; i < l; ++i) {
		      switch (typeof eras[i].since) {
		        case 'string':
		          // truncate time
		          date = hooks(eras[i].since).startOf('day');
		          eras[i].since = date.valueOf();
		          break;
		      }

		      switch (typeof eras[i].until) {
		        case 'undefined':
		          eras[i].until = +Infinity;
		          break;

		        case 'string':
		          // truncate time
		          date = hooks(eras[i].until).startOf('day').valueOf();
		          eras[i].until = date.valueOf();
		          break;
		      }
		    }

		    return eras;
		  }

		  function localeErasParse(eraName, format, strict) {
		    var i,
		        l,
		        eras = this.eras(),
		        name,
		        abbr,
		        narrow;
		    eraName = eraName.toUpperCase();

		    for (i = 0, l = eras.length; i < l; ++i) {
		      name = eras[i].name.toUpperCase();
		      abbr = eras[i].abbr.toUpperCase();
		      narrow = eras[i].narrow.toUpperCase();

		      if (strict) {
		        switch (format) {
		          case 'N':
		          case 'NN':
		          case 'NNN':
		            if (abbr === eraName) {
		              return eras[i];
		            }

		            break;

		          case 'NNNN':
		            if (name === eraName) {
		              return eras[i];
		            }

		            break;

		          case 'NNNNN':
		            if (narrow === eraName) {
		              return eras[i];
		            }

		            break;
		        }
		      } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
		        return eras[i];
		      }
		    }
		  }

		  function localeErasConvertYear(era, year) {
		    var dir = era.since <= era.until ? +1 : -1;

		    if (year === undefined) {
		      return hooks(era.since).year();
		    } else {
		      return hooks(era.since).year() + (year - era.offset) * dir;
		    }
		  }

		  function getEraName() {
		    var i,
		        l,
		        val,
		        eras = this.localeData().eras();

		    for (i = 0, l = eras.length; i < l; ++i) {
		      // truncate time
		      val = this.clone().startOf('day').valueOf();

		      if (eras[i].since <= val && val <= eras[i].until) {
		        return eras[i].name;
		      }

		      if (eras[i].until <= val && val <= eras[i].since) {
		        return eras[i].name;
		      }
		    }

		    return '';
		  }

		  function getEraNarrow() {
		    var i,
		        l,
		        val,
		        eras = this.localeData().eras();

		    for (i = 0, l = eras.length; i < l; ++i) {
		      // truncate time
		      val = this.clone().startOf('day').valueOf();

		      if (eras[i].since <= val && val <= eras[i].until) {
		        return eras[i].narrow;
		      }

		      if (eras[i].until <= val && val <= eras[i].since) {
		        return eras[i].narrow;
		      }
		    }

		    return '';
		  }

		  function getEraAbbr() {
		    var i,
		        l,
		        val,
		        eras = this.localeData().eras();

		    for (i = 0, l = eras.length; i < l; ++i) {
		      // truncate time
		      val = this.clone().startOf('day').valueOf();

		      if (eras[i].since <= val && val <= eras[i].until) {
		        return eras[i].abbr;
		      }

		      if (eras[i].until <= val && val <= eras[i].since) {
		        return eras[i].abbr;
		      }
		    }

		    return '';
		  }

		  function getEraYear() {
		    var i,
		        l,
		        dir,
		        val,
		        eras = this.localeData().eras();

		    for (i = 0, l = eras.length; i < l; ++i) {
		      dir = eras[i].since <= eras[i].until ? +1 : -1; // truncate time

		      val = this.clone().startOf('day').valueOf();

		      if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
		        return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
		      }
		    }

		    return this.year();
		  }

		  function erasNameRegex(isStrict) {
		    if (!hasOwnProp(this, '_erasNameRegex')) {
		      computeErasParse.call(this);
		    }

		    return isStrict ? this._erasNameRegex : this._erasRegex;
		  }

		  function erasAbbrRegex(isStrict) {
		    if (!hasOwnProp(this, '_erasAbbrRegex')) {
		      computeErasParse.call(this);
		    }

		    return isStrict ? this._erasAbbrRegex : this._erasRegex;
		  }

		  function erasNarrowRegex(isStrict) {
		    if (!hasOwnProp(this, '_erasNarrowRegex')) {
		      computeErasParse.call(this);
		    }

		    return isStrict ? this._erasNarrowRegex : this._erasRegex;
		  }

		  function matchEraAbbr(isStrict, locale) {
		    return locale.erasAbbrRegex(isStrict);
		  }

		  function matchEraName(isStrict, locale) {
		    return locale.erasNameRegex(isStrict);
		  }

		  function matchEraNarrow(isStrict, locale) {
		    return locale.erasNarrowRegex(isStrict);
		  }

		  function matchEraYearOrdinal(isStrict, locale) {
		    return locale._eraYearOrdinalRegex || matchUnsigned;
		  }

		  function computeErasParse() {
		    var abbrPieces = [],
		        namePieces = [],
		        narrowPieces = [],
		        mixedPieces = [],
		        i,
		        l,
		        eras = this.eras();

		    for (i = 0, l = eras.length; i < l; ++i) {
		      namePieces.push(regexEscape(eras[i].name));
		      abbrPieces.push(regexEscape(eras[i].abbr));
		      narrowPieces.push(regexEscape(eras[i].narrow));
		      mixedPieces.push(regexEscape(eras[i].name));
		      mixedPieces.push(regexEscape(eras[i].abbr));
		      mixedPieces.push(regexEscape(eras[i].narrow));
		    }

		    this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		    this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
		    this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
		    this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
		  } // FORMATTING


		  addFormatToken(0, ['gg', 2], 0, function () {
		    return this.weekYear() % 100;
		  });
		  addFormatToken(0, ['GG', 2], 0, function () {
		    return this.isoWeekYear() % 100;
		  });

		  function addWeekYearFormatToken(token, getter) {
		    addFormatToken(0, [token, token.length], 0, getter);
		  }

		  addWeekYearFormatToken('gggg', 'weekYear');
		  addWeekYearFormatToken('ggggg', 'weekYear');
		  addWeekYearFormatToken('GGGG', 'isoWeekYear');
		  addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

		  addUnitAlias('weekYear', 'gg');
		  addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

		  addUnitPriority('weekYear', 1);
		  addUnitPriority('isoWeekYear', 1); // PARSING

		  addRegexToken('G', matchSigned);
		  addRegexToken('g', matchSigned);
		  addRegexToken('GG', match1to2, match2);
		  addRegexToken('gg', match1to2, match2);
		  addRegexToken('GGGG', match1to4, match4);
		  addRegexToken('gggg', match1to4, match4);
		  addRegexToken('GGGGG', match1to6, match6);
		  addRegexToken('ggggg', match1to6, match6);
		  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
		    week[token.substr(0, 2)] = toInt(input);
		  });
		  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
		    week[token] = hooks.parseTwoDigitYear(input);
		  }); // MOMENTS

		  function getSetWeekYear(input) {
		    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
		  }

		  function getSetISOWeekYear(input) {
		    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
		  }

		  function getISOWeeksInYear() {
		    return weeksInYear(this.year(), 1, 4);
		  }

		  function getISOWeeksInISOWeekYear() {
		    return weeksInYear(this.isoWeekYear(), 1, 4);
		  }

		  function getWeeksInYear() {
		    var weekInfo = this.localeData()._week;

		    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
		  }

		  function getWeeksInWeekYear() {
		    var weekInfo = this.localeData()._week;

		    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
		  }

		  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
		    var weeksTarget;

		    if (input == null) {
		      return weekOfYear(this, dow, doy).year;
		    } else {
		      weeksTarget = weeksInYear(input, dow, doy);

		      if (week > weeksTarget) {
		        week = weeksTarget;
		      }

		      return setWeekAll.call(this, input, week, weekday, dow, doy);
		    }
		  }

		  function setWeekAll(weekYear, week, weekday, dow, doy) {
		    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
		        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
		    this.year(date.getUTCFullYear());
		    this.month(date.getUTCMonth());
		    this.date(date.getUTCDate());
		    return this;
		  } // FORMATTING


		  addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

		  addUnitAlias('quarter', 'Q'); // PRIORITY

		  addUnitPriority('quarter', 7); // PARSING

		  addRegexToken('Q', match1);
		  addParseToken('Q', function (input, array) {
		    array[MONTH] = (toInt(input) - 1) * 3;
		  }); // MOMENTS

		  function getSetQuarter(input) {
		    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
		  } // FORMATTING


		  addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

		  addUnitAlias('date', 'D'); // PRIORITY

		  addUnitPriority('date', 9); // PARSING

		  addRegexToken('D', match1to2);
		  addRegexToken('DD', match1to2, match2);
		  addRegexToken('Do', function (isStrict, locale) {
		    // TODO: Remove "ordinalParse" fallback in next major release.
		    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
		  });
		  addParseToken(['D', 'DD'], DATE);
		  addParseToken('Do', function (input, array) {
		    array[DATE] = toInt(input.match(match1to2)[0]);
		  }); // MOMENTS

		  var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

		  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

		  addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

		  addUnitPriority('dayOfYear', 4); // PARSING

		  addRegexToken('DDD', match1to3);
		  addRegexToken('DDDD', match3);
		  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
		    config._dayOfYear = toInt(input);
		  }); // HELPERS
		  // MOMENTS

		  function getSetDayOfYear(input) {
		    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
		    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
		  } // FORMATTING


		  addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

		  addUnitAlias('minute', 'm'); // PRIORITY

		  addUnitPriority('minute', 14); // PARSING

		  addRegexToken('m', match1to2);
		  addRegexToken('mm', match1to2, match2);
		  addParseToken(['m', 'mm'], MINUTE); // MOMENTS

		  var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

		  addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

		  addUnitAlias('second', 's'); // PRIORITY

		  addUnitPriority('second', 15); // PARSING

		  addRegexToken('s', match1to2);
		  addRegexToken('ss', match1to2, match2);
		  addParseToken(['s', 'ss'], SECOND); // MOMENTS

		  var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

		  addFormatToken('S', 0, 0, function () {
		    return ~~(this.millisecond() / 100);
		  });
		  addFormatToken(0, ['SS', 2], 0, function () {
		    return ~~(this.millisecond() / 10);
		  });
		  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
		  addFormatToken(0, ['SSSS', 4], 0, function () {
		    return this.millisecond() * 10;
		  });
		  addFormatToken(0, ['SSSSS', 5], 0, function () {
		    return this.millisecond() * 100;
		  });
		  addFormatToken(0, ['SSSSSS', 6], 0, function () {
		    return this.millisecond() * 1000;
		  });
		  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
		    return this.millisecond() * 10000;
		  });
		  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
		    return this.millisecond() * 100000;
		  });
		  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
		    return this.millisecond() * 1000000;
		  }); // ALIASES

		  addUnitAlias('millisecond', 'ms'); // PRIORITY

		  addUnitPriority('millisecond', 16); // PARSING

		  addRegexToken('S', match1to3, match1);
		  addRegexToken('SS', match1to3, match2);
		  addRegexToken('SSS', match1to3, match3);
		  var token, getSetMillisecond;

		  for (token = 'SSSS'; token.length <= 9; token += 'S') {
		    addRegexToken(token, matchUnsigned);
		  }

		  function parseMs(input, array) {
		    array[MILLISECOND] = toInt(('0.' + input) * 1000);
		  }

		  for (token = 'S'; token.length <= 9; token += 'S') {
		    addParseToken(token, parseMs);
		  }

		  getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

		  addFormatToken('z', 0, 0, 'zoneAbbr');
		  addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

		  function getZoneAbbr() {
		    return this._isUTC ? 'UTC' : '';
		  }

		  function getZoneName() {
		    return this._isUTC ? 'Coordinated Universal Time' : '';
		  }

		  var proto = Moment.prototype;
		  proto.add = add;
		  proto.calendar = calendar$1;
		  proto.clone = clone;
		  proto.diff = diff;
		  proto.endOf = endOf;
		  proto.format = format;
		  proto.from = from;
		  proto.fromNow = fromNow;
		  proto.to = to;
		  proto.toNow = toNow;
		  proto.get = stringGet;
		  proto.invalidAt = invalidAt;
		  proto.isAfter = isAfter;
		  proto.isBefore = isBefore;
		  proto.isBetween = isBetween;
		  proto.isSame = isSame;
		  proto.isSameOrAfter = isSameOrAfter;
		  proto.isSameOrBefore = isSameOrBefore;
		  proto.isValid = isValid$2;
		  proto.lang = lang;
		  proto.locale = locale;
		  proto.localeData = localeData;
		  proto.max = prototypeMax;
		  proto.min = prototypeMin;
		  proto.parsingFlags = parsingFlags;
		  proto.set = stringSet;
		  proto.startOf = startOf;
		  proto.subtract = subtract;
		  proto.toArray = toArray;
		  proto.toObject = toObject;
		  proto.toDate = toDate;
		  proto.toISOString = toISOString;
		  proto.inspect = inspect;

		  if (typeof Symbol !== 'undefined' && Symbol.for != null) {
		    proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
		      return 'Moment<' + this.format() + '>';
		    };
		  }

		  proto.toJSON = toJSON;
		  proto.toString = toString;
		  proto.unix = unix;
		  proto.valueOf = valueOf;
		  proto.creationData = creationData;
		  proto.eraName = getEraName;
		  proto.eraNarrow = getEraNarrow;
		  proto.eraAbbr = getEraAbbr;
		  proto.eraYear = getEraYear;
		  proto.year = getSetYear;
		  proto.isLeapYear = getIsLeapYear;
		  proto.weekYear = getSetWeekYear;
		  proto.isoWeekYear = getSetISOWeekYear;
		  proto.quarter = proto.quarters = getSetQuarter;
		  proto.month = getSetMonth;
		  proto.daysInMonth = getDaysInMonth;
		  proto.week = proto.weeks = getSetWeek;
		  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
		  proto.weeksInYear = getWeeksInYear;
		  proto.weeksInWeekYear = getWeeksInWeekYear;
		  proto.isoWeeksInYear = getISOWeeksInYear;
		  proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
		  proto.date = getSetDayOfMonth;
		  proto.day = proto.days = getSetDayOfWeek;
		  proto.weekday = getSetLocaleDayOfWeek;
		  proto.isoWeekday = getSetISODayOfWeek;
		  proto.dayOfYear = getSetDayOfYear;
		  proto.hour = proto.hours = getSetHour;
		  proto.minute = proto.minutes = getSetMinute;
		  proto.second = proto.seconds = getSetSecond;
		  proto.millisecond = proto.milliseconds = getSetMillisecond;
		  proto.utcOffset = getSetOffset;
		  proto.utc = setOffsetToUTC;
		  proto.local = setOffsetToLocal;
		  proto.parseZone = setOffsetToParsedOffset;
		  proto.hasAlignedHourOffset = hasAlignedHourOffset;
		  proto.isDST = isDaylightSavingTime;
		  proto.isLocal = isLocal;
		  proto.isUtcOffset = isUtcOffset;
		  proto.isUtc = isUtc;
		  proto.isUTC = isUtc;
		  proto.zoneAbbr = getZoneAbbr;
		  proto.zoneName = getZoneName;
		  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
		  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
		  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
		  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
		  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

		  function createUnix(input) {
		    return createLocal(input * 1000);
		  }

		  function createInZone() {
		    return createLocal.apply(null, arguments).parseZone();
		  }

		  function preParsePostFormat(string) {
		    return string;
		  }

		  var proto$1 = Locale.prototype;
		  proto$1.calendar = calendar;
		  proto$1.longDateFormat = longDateFormat;
		  proto$1.invalidDate = invalidDate;
		  proto$1.ordinal = ordinal;
		  proto$1.preparse = preParsePostFormat;
		  proto$1.postformat = preParsePostFormat;
		  proto$1.relativeTime = relativeTime;
		  proto$1.pastFuture = pastFuture;
		  proto$1.set = set;
		  proto$1.eras = localeEras;
		  proto$1.erasParse = localeErasParse;
		  proto$1.erasConvertYear = localeErasConvertYear;
		  proto$1.erasAbbrRegex = erasAbbrRegex;
		  proto$1.erasNameRegex = erasNameRegex;
		  proto$1.erasNarrowRegex = erasNarrowRegex;
		  proto$1.months = localeMonths;
		  proto$1.monthsShort = localeMonthsShort;
		  proto$1.monthsParse = localeMonthsParse;
		  proto$1.monthsRegex = monthsRegex;
		  proto$1.monthsShortRegex = monthsShortRegex;
		  proto$1.week = localeWeek;
		  proto$1.firstDayOfYear = localeFirstDayOfYear;
		  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
		  proto$1.weekdays = localeWeekdays;
		  proto$1.weekdaysMin = localeWeekdaysMin;
		  proto$1.weekdaysShort = localeWeekdaysShort;
		  proto$1.weekdaysParse = localeWeekdaysParse;
		  proto$1.weekdaysRegex = weekdaysRegex;
		  proto$1.weekdaysShortRegex = weekdaysShortRegex;
		  proto$1.weekdaysMinRegex = weekdaysMinRegex;
		  proto$1.isPM = localeIsPM;
		  proto$1.meridiem = localeMeridiem;

		  function get$1(format, index, field, setter) {
		    var locale = getLocale(),
		        utc = createUTC().set(setter, index);
		    return locale[field](utc, format);
		  }

		  function listMonthsImpl(format, index, field) {
		    if (isNumber(format)) {
		      index = format;
		      format = undefined;
		    }

		    format = format || '';

		    if (index != null) {
		      return get$1(format, index, field, 'month');
		    }

		    var i,
		        out = [];

		    for (i = 0; i < 12; i++) {
		      out[i] = get$1(format, i, field, 'month');
		    }

		    return out;
		  } // ()
		  // (5)
		  // (fmt, 5)
		  // (fmt)
		  // (true)
		  // (true, 5)
		  // (true, fmt, 5)
		  // (true, fmt)


		  function listWeekdaysImpl(localeSorted, format, index, field) {
		    if (typeof localeSorted === 'boolean') {
		      if (isNumber(format)) {
		        index = format;
		        format = undefined;
		      }

		      format = format || '';
		    } else {
		      format = localeSorted;
		      index = format;
		      localeSorted = false;

		      if (isNumber(format)) {
		        index = format;
		        format = undefined;
		      }

		      format = format || '';
		    }

		    var locale = getLocale(),
		        shift = localeSorted ? locale._week.dow : 0,
		        i,
		        out = [];

		    if (index != null) {
		      return get$1(format, (index + shift) % 7, field, 'day');
		    }

		    for (i = 0; i < 7; i++) {
		      out[i] = get$1(format, (i + shift) % 7, field, 'day');
		    }

		    return out;
		  }

		  function listMonths(format, index) {
		    return listMonthsImpl(format, index, 'months');
		  }

		  function listMonthsShort(format, index) {
		    return listMonthsImpl(format, index, 'monthsShort');
		  }

		  function listWeekdays(localeSorted, format, index) {
		    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
		  }

		  function listWeekdaysShort(localeSorted, format, index) {
		    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
		  }

		  function listWeekdaysMin(localeSorted, format, index) {
		    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
		  }

		  getSetGlobalLocale('en', {
		    eras: [{
		      since: '0001-01-01',
		      until: +Infinity,
		      offset: 1,
		      name: 'Anno Domini',
		      narrow: 'AD',
		      abbr: 'AD'
		    }, {
		      since: '0000-12-31',
		      until: -Infinity,
		      offset: 1,
		      name: 'Before Christ',
		      narrow: 'BC',
		      abbr: 'BC'
		    }],
		    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
		    ordinal: function (number) {
		      var b = number % 10,
		          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
		      return number + output;
		    }
		  }); // Side effect imports

		  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
		  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
		  var mathAbs = Math.abs;

		  function abs() {
		    var data = this._data;
		    this._milliseconds = mathAbs(this._milliseconds);
		    this._days = mathAbs(this._days);
		    this._months = mathAbs(this._months);
		    data.milliseconds = mathAbs(data.milliseconds);
		    data.seconds = mathAbs(data.seconds);
		    data.minutes = mathAbs(data.minutes);
		    data.hours = mathAbs(data.hours);
		    data.months = mathAbs(data.months);
		    data.years = mathAbs(data.years);
		    return this;
		  }

		  function addSubtract$1(duration, input, value, direction) {
		    var other = createDuration(input, value);
		    duration._milliseconds += direction * other._milliseconds;
		    duration._days += direction * other._days;
		    duration._months += direction * other._months;
		    return duration._bubble();
		  } // supports only 2.0-style add(1, 's') or add(duration)


		  function add$1(input, value) {
		    return addSubtract$1(this, input, value, 1);
		  } // supports only 2.0-style subtract(1, 's') or subtract(duration)


		  function subtract$1(input, value) {
		    return addSubtract$1(this, input, value, -1);
		  }

		  function absCeil(number) {
		    if (number < 0) {
		      return Math.floor(number);
		    } else {
		      return Math.ceil(number);
		    }
		  }

		  function bubble() {
		    var milliseconds = this._milliseconds,
		        days = this._days,
		        months = this._months,
		        data = this._data,
		        seconds,
		        minutes,
		        hours,
		        years,
		        monthsFromDays; // if we have a mix of positive and negative values, bubble down first
		    // check: https://github.com/moment/moment/issues/2166

		    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
		      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
		      days = 0;
		      months = 0;
		    } // The following code bubbles up values, see the tests for
		    // examples of what that means.


		    data.milliseconds = milliseconds % 1000;
		    seconds = absFloor(milliseconds / 1000);
		    data.seconds = seconds % 60;
		    minutes = absFloor(seconds / 60);
		    data.minutes = minutes % 60;
		    hours = absFloor(minutes / 60);
		    data.hours = hours % 24;
		    days += absFloor(hours / 24); // convert days to months

		    monthsFromDays = absFloor(daysToMonths(days));
		    months += monthsFromDays;
		    days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

		    years = absFloor(months / 12);
		    months %= 12;
		    data.days = days;
		    data.months = months;
		    data.years = years;
		    return this;
		  }

		  function daysToMonths(days) {
		    // 400 years have 146097 days (taking into account leap year rules)
		    // 400 years have 12 months === 4800
		    return days * 4800 / 146097;
		  }

		  function monthsToDays(months) {
		    // the reverse of daysToMonths
		    return months * 146097 / 4800;
		  }

		  function as(units) {
		    if (!this.isValid()) {
		      return NaN;
		    }

		    var days,
		        months,
		        milliseconds = this._milliseconds;
		    units = normalizeUnits(units);

		    if (units === 'month' || units === 'quarter' || units === 'year') {
		      days = this._days + milliseconds / 864e5;
		      months = this._months + daysToMonths(days);

		      switch (units) {
		        case 'month':
		          return months;

		        case 'quarter':
		          return months / 3;

		        case 'year':
		          return months / 12;
		      }
		    } else {
		      // handle milliseconds separately because of floating point math errors (issue #1867)
		      days = this._days + Math.round(monthsToDays(this._months));

		      switch (units) {
		        case 'week':
		          return days / 7 + milliseconds / 6048e5;

		        case 'day':
		          return days + milliseconds / 864e5;

		        case 'hour':
		          return days * 24 + milliseconds / 36e5;

		        case 'minute':
		          return days * 1440 + milliseconds / 6e4;

		        case 'second':
		          return days * 86400 + milliseconds / 1000;
		        // Math.floor prevents floating point math errors here

		        case 'millisecond':
		          return Math.floor(days * 864e5) + milliseconds;

		        default:
		          throw new Error('Unknown unit ' + units);
		      }
		    }
		  } // TODO: Use this.as('ms')?


		  function valueOf$1() {
		    if (!this.isValid()) {
		      return NaN;
		    }

		    return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
		  }

		  function makeAs(alias) {
		    return function () {
		      return this.as(alias);
		    };
		  }

		  var asMilliseconds = makeAs('ms'),
		      asSeconds = makeAs('s'),
		      asMinutes = makeAs('m'),
		      asHours = makeAs('h'),
		      asDays = makeAs('d'),
		      asWeeks = makeAs('w'),
		      asMonths = makeAs('M'),
		      asQuarters = makeAs('Q'),
		      asYears = makeAs('y');

		  function clone$1() {
		    return createDuration(this);
		  }

		  function get$2(units) {
		    units = normalizeUnits(units);
		    return this.isValid() ? this[units + 's']() : NaN;
		  }

		  function makeGetter(name) {
		    return function () {
		      return this.isValid() ? this._data[name] : NaN;
		    };
		  }

		  var milliseconds = makeGetter('milliseconds'),
		      seconds = makeGetter('seconds'),
		      minutes = makeGetter('minutes'),
		      hours = makeGetter('hours'),
		      days = makeGetter('days'),
		      months = makeGetter('months'),
		      years = makeGetter('years');

		  function weeks() {
		    return absFloor(this.days() / 7);
		  }

		  var round = Math.round,
		      thresholds = {
		    ss: 44,
		    // a few seconds to seconds
		    s: 45,
		    // seconds to minute
		    m: 45,
		    // minutes to hour
		    h: 22,
		    // hours to day
		    d: 26,
		    // days to month/week
		    w: null,
		    // weeks to month
		    M: 11 // months to year

		  }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

		  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
		    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
		  }

		  function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
		    var duration = createDuration(posNegDuration).abs(),
		        seconds = round(duration.as('s')),
		        minutes = round(duration.as('m')),
		        hours = round(duration.as('h')),
		        days = round(duration.as('d')),
		        months = round(duration.as('M')),
		        weeks = round(duration.as('w')),
		        years = round(duration.as('y')),
		        a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];

		    if (thresholds.w != null) {
		      a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
		    }

		    a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
		    a[2] = withoutSuffix;
		    a[3] = +posNegDuration > 0;
		    a[4] = locale;
		    return substituteTimeAgo.apply(null, a);
		  } // This function allows you to set the rounding function for relative time strings


		  function getSetRelativeTimeRounding(roundingFunction) {
		    if (roundingFunction === undefined) {
		      return round;
		    }

		    if (typeof roundingFunction === 'function') {
		      round = roundingFunction;
		      return true;
		    }

		    return false;
		  } // This function allows you to set a threshold for relative time strings


		  function getSetRelativeTimeThreshold(threshold, limit) {
		    if (thresholds[threshold] === undefined) {
		      return false;
		    }

		    if (limit === undefined) {
		      return thresholds[threshold];
		    }

		    thresholds[threshold] = limit;

		    if (threshold === 's') {
		      thresholds.ss = limit - 1;
		    }

		    return true;
		  }

		  function humanize(argWithSuffix, argThresholds) {
		    if (!this.isValid()) {
		      return this.localeData().invalidDate();
		    }

		    var withSuffix = false,
		        th = thresholds,
		        locale,
		        output;

		    if (typeof argWithSuffix === 'object') {
		      argThresholds = argWithSuffix;
		      argWithSuffix = false;
		    }

		    if (typeof argWithSuffix === 'boolean') {
		      withSuffix = argWithSuffix;
		    }

		    if (typeof argThresholds === 'object') {
		      th = Object.assign({}, thresholds, argThresholds);

		      if (argThresholds.s != null && argThresholds.ss == null) {
		        th.ss = argThresholds.s - 1;
		      }
		    }

		    locale = this.localeData();
		    output = relativeTime$1(this, !withSuffix, th, locale);

		    if (withSuffix) {
		      output = locale.pastFuture(+this, output);
		    }

		    return locale.postformat(output);
		  }

		  var abs$1 = Math.abs;

		  function sign(x) {
		    return (x > 0) - (x < 0) || +x;
		  }

		  function toISOString$1() {
		    // for ISO strings we do not use the normal bubbling rules:
		    //  * milliseconds bubble up until they become hours
		    //  * days do not bubble at all
		    //  * months bubble up until they become years
		    // This is because there is no context-free conversion between hours and days
		    // (think of clock changes)
		    // and also not between days and months (28-31 days per month)
		    if (!this.isValid()) {
		      return this.localeData().invalidDate();
		    }

		    var seconds = abs$1(this._milliseconds) / 1000,
		        days = abs$1(this._days),
		        months = abs$1(this._months),
		        minutes,
		        hours,
		        years,
		        s,
		        total = this.asSeconds(),
		        totalSign,
		        ymSign,
		        daysSign,
		        hmsSign;

		    if (!total) {
		      // this is the same as C#'s (Noda) and python (isodate)...
		      // but not other JS (goog.date)
		      return 'P0D';
		    } // 3600 seconds -> 60 minutes -> 1 hour


		    minutes = absFloor(seconds / 60);
		    hours = absFloor(minutes / 60);
		    seconds %= 60;
		    minutes %= 60; // 12 months -> 1 year

		    years = absFloor(months / 12);
		    months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

		    s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
		    totalSign = total < 0 ? '-' : '';
		    ymSign = sign(this._months) !== sign(total) ? '-' : '';
		    daysSign = sign(this._days) !== sign(total) ? '-' : '';
		    hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
		    return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
		  }

		  var proto$2 = Duration.prototype;
		  proto$2.isValid = isValid$1;
		  proto$2.abs = abs;
		  proto$2.add = add$1;
		  proto$2.subtract = subtract$1;
		  proto$2.as = as;
		  proto$2.asMilliseconds = asMilliseconds;
		  proto$2.asSeconds = asSeconds;
		  proto$2.asMinutes = asMinutes;
		  proto$2.asHours = asHours;
		  proto$2.asDays = asDays;
		  proto$2.asWeeks = asWeeks;
		  proto$2.asMonths = asMonths;
		  proto$2.asQuarters = asQuarters;
		  proto$2.asYears = asYears;
		  proto$2.valueOf = valueOf$1;
		  proto$2._bubble = bubble;
		  proto$2.clone = clone$1;
		  proto$2.get = get$2;
		  proto$2.milliseconds = milliseconds;
		  proto$2.seconds = seconds;
		  proto$2.minutes = minutes;
		  proto$2.hours = hours;
		  proto$2.days = days;
		  proto$2.weeks = weeks;
		  proto$2.months = months;
		  proto$2.years = years;
		  proto$2.humanize = humanize;
		  proto$2.toISOString = toISOString$1;
		  proto$2.toString = toISOString$1;
		  proto$2.toJSON = toISOString$1;
		  proto$2.locale = locale;
		  proto$2.localeData = localeData;
		  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
		  proto$2.lang = lang; // FORMATTING

		  addFormatToken('X', 0, 0, 'unix');
		  addFormatToken('x', 0, 0, 'valueOf'); // PARSING

		  addRegexToken('x', matchSigned);
		  addRegexToken('X', matchTimestamp);
		  addParseToken('X', function (input, array, config) {
		    config._d = new Date(parseFloat(input) * 1000);
		  });
		  addParseToken('x', function (input, array, config) {
		    config._d = new Date(toInt(input));
		  }); //! moment.js

		  hooks.version = '2.29.4';
		  setHookCallback(createLocal);
		  hooks.fn = proto;
		  hooks.min = min;
		  hooks.max = max;
		  hooks.now = now;
		  hooks.utc = createUTC;
		  hooks.unix = createUnix;
		  hooks.months = listMonths;
		  hooks.isDate = isDate;
		  hooks.locale = getSetGlobalLocale;
		  hooks.invalid = createInvalid;
		  hooks.duration = createDuration;
		  hooks.isMoment = isMoment;
		  hooks.weekdays = listWeekdays;
		  hooks.parseZone = createInZone;
		  hooks.localeData = getLocale;
		  hooks.isDuration = isDuration;
		  hooks.monthsShort = listMonthsShort;
		  hooks.weekdaysMin = listWeekdaysMin;
		  hooks.defineLocale = defineLocale;
		  hooks.updateLocale = updateLocale;
		  hooks.locales = listLocales;
		  hooks.weekdaysShort = listWeekdaysShort;
		  hooks.normalizeUnits = normalizeUnits;
		  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
		  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
		  hooks.calendarFormat = getCalendarFormat;
		  hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

		  hooks.HTML5_FMT = {
		    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
		    // <input type="datetime-local" />
		    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
		    // <input type="datetime-local" step="1" />
		    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
		    // <input type="datetime-local" step="0.001" />
		    DATE: 'YYYY-MM-DD',
		    // <input type="date" />
		    TIME: 'HH:mm',
		    // <input type="time" />
		    TIME_SECONDS: 'HH:mm:ss',
		    // <input type="time" step="1" />
		    TIME_MS: 'HH:mm:ss.SSS',
		    // <input type="time" step="0.001" />
		    WEEK: 'GGGG-[W]WW',
		    // <input type="week" />
		    MONTH: 'YYYY-MM' // <input type="month" />

		  };
		  return hooks;
		});
	} (moment$3));

	var moment$2 = moment$3.exports;

	var React$5 = require('react'),
	    createClass$5 = createReactClass,
	    moment$1 = moment$3.exports;

	var DateTimePickerDays = createClass$5({
	  render: function () {
	    var footer = this.renderFooter(),
	        date = this.props.viewDate,
	        locale = date.localeData(),
	        tableChildren;
	    tableChildren = [React$5.createElement('thead', {
	      key: 'th'
	    }, [React$5.createElement('tr', {
	      key: 'h'
	    }, [React$5.createElement('th', {
	      key: 'p',
	      className: 'rdtPrev',
	      onClick: this.props.subtractTime(1, 'months')
	    }, React$5.createElement('span', {}, '‹')), React$5.createElement('th', {
	      key: 's',
	      className: 'rdtSwitch',
	      onClick: this.props.showView('months'),
	      colSpan: this.props.showWeekNumbers ? 6 : 5,
	      'data-value': this.props.viewDate.month()
	    }, locale.months(date) + ' ' + date.year()), React$5.createElement('th', {
	      key: 'n',
	      className: 'rdtNext',
	      onClick: this.props.addTime(1, 'months')
	    }, React$5.createElement('span', {}, '›'))]), React$5.createElement('tr', {
	      key: 'd'
	    }, this.getDaysOfWeek(locale).map(function (day, index) {
	      return React$5.createElement('th', {
	        key: day + index,
	        className: 'dow'
	      }, day);
	    }))]), React$5.createElement('tbody', {
	      key: 'tb'
	    }, this.renderDays())];
	    if (footer) tableChildren.push(footer);
	    return React$5.createElement('div', {
	      className: 'rdtDays'
	    }, React$5.createElement('table', {}, tableChildren));
	  },

	  /**
	   * Get a list of the days of the week
	   * depending on the current locale
	   * @return {array} A list with the shortname of the days
	   */
	  getDaysOfWeek: function (locale) {
	    var days = locale._weekdaysMin,
	        first = locale.firstDayOfWeek(),
	        dow = [],
	        i = 0;
	    days.forEach(function (day) {
	      dow[(7 + i++ - first) % 7] = day;
	    }); //If weeknumbers are added, add empty cell for days

	    if (this.props.showWeekNumbers) {
	      dow.unshift('');
	    }

	    return dow;
	  },
	  renderDays: function () {
	    var date = this.props.viewDate,
	        selected = this.props.selectedDate && this.props.selectedDate.clone(),
	        prevMonth = date.clone().subtract(1, 'months'),
	        currentYear = date.year(),
	        currentMonth = date.month(),
	        weeks = [],
	        days = [],
	        renderer = this.props.renderDay || this.renderDay,
	        isValid = this.props.isValidDate || this.alwaysValidDate,
	        classes,
	        isDisabled,
	        dayProps,
	        currentDate,
	        showWeekNumbers = this.props.showWeekNumbers; // Go to the last week of the previous month

	    prevMonth.date(prevMonth.daysInMonth()).startOf('week');
	    var lastDay = prevMonth.clone().add(42, 'd');

	    while (prevMonth.isBefore(lastDay)) {
	      classes = 'rdtDay';
	      currentDate = prevMonth.clone();
	      if (prevMonth.year() === currentYear && prevMonth.month() < currentMonth || prevMonth.year() < currentYear) classes += ' rdtOld';else if (prevMonth.year() === currentYear && prevMonth.month() > currentMonth || prevMonth.year() > currentYear) classes += ' rdtNew';
	      if (selected && prevMonth.isSame(selected, 'day')) classes += ' rdtActive';
	      if (prevMonth.isSame(moment$1(), 'day')) classes += ' rdtToday';
	      isDisabled = !isValid(currentDate, selected);
	      if (isDisabled) classes += ' rdtDisabled';
	      dayProps = {
	        key: prevMonth.format('M_D'),
	        'data-value': prevMonth.date(),
	        className: classes
	      };
	      if (!isDisabled) dayProps.onClick = this.updateSelectedDate;
	      days.push(renderer(dayProps, currentDate, selected));

	      if (days.length === 7) {
	        // If weeknumbers are shown, add cell in front of the days
	        if (showWeekNumbers) {
	          days.unshift(React$5.createElement('td', {
	            className: 'weekNumber'
	          }, currentDate.week()));
	        }

	        weeks.push(React$5.createElement('tr', {
	          key: prevMonth.format('M_D')
	        }, days));
	        days = [];
	      }

	      prevMonth.add(1, 'd');
	    }

	    return weeks;
	  },
	  updateSelectedDate: function (event) {
	    this.props.updateSelectedDate(event, true);
	  },
	  renderDay: function (props, currentDate) {
	    return React$5.createElement('td', props, currentDate.date());
	  },
	  renderFooter: function () {
	    if (!this.props.timeFormat) return '';
	    var date = this.props.selectedDate || this.props.viewDate;
	    return React$5.createElement('tfoot', {
	      key: 'tf'
	    }, React$5.createElement('tr', {}, React$5.createElement('td', {
	      onClick: this.props.showView('time'),
	      colSpan: this.props.showWeekNumbers ? 8 : 7,
	      className: 'rdtTimeToggle'
	    }, date.format(this.props.timeFormat))));
	  },
	  alwaysValidDate: function () {
	    return 1;
	  }
	});
	var DaysView$1 = DateTimePickerDays;

	var React$4 = require('react'),
	    createClass$4 = createReactClass;

	var DateTimePickerMonths = createClass$4({
	  render: function () {
	    return React$4.createElement('div', {
	      className: 'rdtMonths'
	    }, [React$4.createElement('table', {
	      key: 'a'
	    }, React$4.createElement('thead', {}, React$4.createElement('tr', {}, [React$4.createElement('th', {
	      key: 'prev',
	      className: 'rdtPrev',
	      onClick: this.props.subtractTime(1, 'years')
	    }, React$4.createElement('span', {}, '‹')), React$4.createElement('th', {
	      key: 'year',
	      className: 'rdtSwitch',
	      onClick: this.props.showView('years'),
	      colSpan: 2,
	      'data-value': this.props.viewDate.year()
	    }, this.props.viewDate.year()), React$4.createElement('th', {
	      key: 'next',
	      className: 'rdtNext',
	      onClick: this.props.addTime(1, 'years')
	    }, React$4.createElement('span', {}, '›'))]))), React$4.createElement('table', {
	      key: 'months'
	    }, React$4.createElement('tbody', {
	      key: 'b'
	    }, this.renderMonths()))]);
	  },
	  renderMonths: function () {
	    var date = this.props.selectedDate,
	        month = this.props.viewDate.month(),
	        year = this.props.viewDate.year(),
	        rows = [],
	        i = 0,
	        months = [],
	        renderer = this.props.renderMonth || this.renderMonth,
	        isValid = this.props.isValidDate || this.alwaysValidDate,
	        classes,
	        props,
	        currentMonth,
	        isDisabled,
	        noOfDaysInMonth,
	        daysInMonth,
	        validDay,
	        // Date is irrelevant because we're only interested in month
	    irrelevantDate = 1;

	    while (i < 12) {
	      classes = 'rdtMonth';
	      currentMonth = this.props.viewDate.clone().set({
	        year: year,
	        month: i,
	        date: irrelevantDate
	      });
	      noOfDaysInMonth = currentMonth.endOf('month').format('D');
	      daysInMonth = Array.from({
	        length: noOfDaysInMonth
	      }, function (e, i) {
	        return i + 1;
	      });
	      validDay = daysInMonth.find(function (d) {
	        var day = currentMonth.clone().set('date', d);
	        return isValid(day);
	      });
	      isDisabled = validDay === undefined;
	      if (isDisabled) classes += ' rdtDisabled';
	      if (date && i === date.month() && year === date.year()) classes += ' rdtActive';
	      props = {
	        key: i,
	        'data-value': i,
	        className: classes
	      };
	      if (!isDisabled) props.onClick = this.props.updateOn === 'months' ? this.updateSelectedMonth : this.props.setDate('month');
	      months.push(renderer(props, i, year, date && date.clone()));

	      if (months.length === 4) {
	        rows.push(React$4.createElement('tr', {
	          key: month + '_' + rows.length
	        }, months));
	        months = [];
	      }

	      i++;
	    }

	    return rows;
	  },
	  updateSelectedMonth: function (event) {
	    this.props.updateSelectedDate(event);
	  },
	  renderMonth: function (props, month) {
	    var localMoment = this.props.viewDate;
	    var monthStr = localMoment.localeData().monthsShort(localMoment.month(month));
	    var strLength = 3; // Because some months are up to 5 characters long, we want to
	    // use a fixed string length for consistency

	    var monthStrFixedLength = monthStr.substring(0, strLength);
	    return React$4.createElement('td', props, capitalize(monthStrFixedLength));
	  },
	  alwaysValidDate: function () {
	    return 1;
	  }
	});

	function capitalize(str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	}

	var MonthsView$1 = DateTimePickerMonths;

	var React$3 = require('react'),
	    createClass$3 = createReactClass;

	var DateTimePickerYears = createClass$3({
	  render: function () {
	    var year = parseInt(this.props.viewDate.year() / 10, 10) * 10;
	    return React$3.createElement('div', {
	      className: 'rdtYears'
	    }, [React$3.createElement('table', {
	      key: 'a'
	    }, React$3.createElement('thead', {}, React$3.createElement('tr', {}, [React$3.createElement('th', {
	      key: 'prev',
	      className: 'rdtPrev',
	      onClick: this.props.subtractTime(10, 'years')
	    }, React$3.createElement('span', {}, '‹')), React$3.createElement('th', {
	      key: 'year',
	      className: 'rdtSwitch',
	      onClick: this.props.showView('years'),
	      colSpan: 2
	    }, year + '-' + (year + 9)), React$3.createElement('th', {
	      key: 'next',
	      className: 'rdtNext',
	      onClick: this.props.addTime(10, 'years')
	    }, React$3.createElement('span', {}, '›'))]))), React$3.createElement('table', {
	      key: 'years'
	    }, React$3.createElement('tbody', {}, this.renderYears(year)))]);
	  },
	  renderYears: function (year) {
	    var years = [],
	        i = -1,
	        rows = [],
	        renderer = this.props.renderYear || this.renderYear,
	        selectedDate = this.props.selectedDate,
	        isValid = this.props.isValidDate || this.alwaysValidDate,
	        classes,
	        props,
	        currentYear,
	        isDisabled,
	        noOfDaysInYear,
	        daysInYear,
	        validDay,
	        // Month and date are irrelevant here because
	    // we're only interested in the year
	    irrelevantMonth = 0,
	        irrelevantDate = 1;
	    year--;

	    while (i < 11) {
	      classes = 'rdtYear';
	      currentYear = this.props.viewDate.clone().set({
	        year: year,
	        month: irrelevantMonth,
	        date: irrelevantDate
	      }); // Not sure what 'rdtOld' is for, commenting out for now as it's not working properly
	      // if ( i === -1 | i === 10 )
	      // classes += ' rdtOld';

	      noOfDaysInYear = currentYear.endOf('year').format('DDD');
	      daysInYear = Array.from({
	        length: noOfDaysInYear
	      }, function (e, i) {
	        return i + 1;
	      });
	      validDay = daysInYear.find(function (d) {
	        var day = currentYear.clone().dayOfYear(d);
	        return isValid(day);
	      });
	      isDisabled = validDay === undefined;
	      if (isDisabled) classes += ' rdtDisabled';
	      if (selectedDate && selectedDate.year() === year) classes += ' rdtActive';
	      props = {
	        key: year,
	        'data-value': year,
	        className: classes
	      };
	      if (!isDisabled) props.onClick = this.props.updateOn === 'years' ? this.updateSelectedYear : this.props.setDate('year');
	      years.push(renderer(props, year, selectedDate && selectedDate.clone()));

	      if (years.length === 4) {
	        rows.push(React$3.createElement('tr', {
	          key: i
	        }, years));
	        years = [];
	      }

	      year++;
	      i++;
	    }

	    return rows;
	  },
	  updateSelectedYear: function (event) {
	    this.props.updateSelectedDate(event);
	  },
	  renderYear: function (props, year) {
	    return React$3.createElement('td', props, year);
	  },
	  alwaysValidDate: function () {
	    return 1;
	  }
	});
	var YearsView$1 = DateTimePickerYears;

	var React$2 = require('react'),
	    createClass$2 = createReactClass,
	    assign$1 = objectAssign$1;

	var DateTimePickerTime = createClass$2({
	  getInitialState: function () {
	    return this.calculateState(this.props);
	  },
	  calculateState: function (props) {
	    var date = props.selectedDate || props.viewDate,
	        format = props.timeFormat,
	        counters = [];

	    if (format.toLowerCase().indexOf('h') !== -1) {
	      counters.push('hours');

	      if (format.indexOf('m') !== -1) {
	        counters.push('minutes');

	        if (format.indexOf('s') !== -1) {
	          counters.push('seconds');
	        }
	      }
	    }

	    var hours = date.format('H');
	    var daypart = false;

	    if (this.state !== null && this.props.timeFormat.toLowerCase().indexOf(' a') !== -1) {
	      if (this.props.timeFormat.indexOf(' A') !== -1) {
	        daypart = hours >= 12 ? 'PM' : 'AM';
	      } else {
	        daypart = hours >= 12 ? 'pm' : 'am';
	      }
	    }

	    return {
	      hours: hours,
	      minutes: date.format('mm'),
	      seconds: date.format('ss'),
	      milliseconds: date.format('SSS'),
	      daypart: daypart,
	      counters: counters
	    };
	  },
	  renderCounter: function (type) {
	    if (type !== 'daypart') {
	      var value = this.state[type];

	      if (type === 'hours' && this.props.timeFormat.toLowerCase().indexOf(' a') !== -1) {
	        value = (value - 1) % 12 + 1;

	        if (value === 0) {
	          value = 12;
	        }
	      }

	      return React$2.createElement('div', {
	        key: type,
	        className: 'rdtCounter'
	      }, [React$2.createElement('span', {
	        key: 'up',
	        className: 'rdtBtn',
	        onMouseDown: this.onStartClicking('increase', type),
	        onContextMenu: this.disableContextMenu
	      }, '▲'), React$2.createElement('div', {
	        key: 'c',
	        className: 'rdtCount'
	      }, value), React$2.createElement('span', {
	        key: 'do',
	        className: 'rdtBtn',
	        onMouseDown: this.onStartClicking('decrease', type),
	        onContextMenu: this.disableContextMenu
	      }, '▼')]);
	    }

	    return '';
	  },
	  renderDayPart: function () {
	    return React$2.createElement('div', {
	      key: 'dayPart',
	      className: 'rdtCounter'
	    }, [React$2.createElement('span', {
	      key: 'up',
	      className: 'rdtBtn',
	      onMouseDown: this.onStartClicking('toggleDayPart', 'hours'),
	      onContextMenu: this.disableContextMenu
	    }, '▲'), React$2.createElement('div', {
	      key: this.state.daypart,
	      className: 'rdtCount'
	    }, this.state.daypart), React$2.createElement('span', {
	      key: 'do',
	      className: 'rdtBtn',
	      onMouseDown: this.onStartClicking('toggleDayPart', 'hours'),
	      onContextMenu: this.disableContextMenu
	    }, '▼')]);
	  },
	  render: function () {
	    var me = this,
	        counters = [];
	    this.state.counters.forEach(function (c) {
	      if (counters.length) counters.push(React$2.createElement('div', {
	        key: 'sep' + counters.length,
	        className: 'rdtCounterSeparator'
	      }, ':'));
	      counters.push(me.renderCounter(c));
	    });

	    if (this.state.daypart !== false) {
	      counters.push(me.renderDayPart());
	    }

	    if (this.state.counters.length === 3 && this.props.timeFormat.indexOf('S') !== -1) {
	      counters.push(React$2.createElement('div', {
	        className: 'rdtCounterSeparator',
	        key: 'sep5'
	      }, ':'));
	      counters.push(React$2.createElement('div', {
	        className: 'rdtCounter rdtMilli',
	        key: 'm'
	      }, React$2.createElement('input', {
	        value: this.state.milliseconds,
	        type: 'text',
	        onChange: this.updateMilli
	      })));
	    }

	    return React$2.createElement('div', {
	      className: 'rdtTime'
	    }, React$2.createElement('table', {}, [this.renderHeader(), React$2.createElement('tbody', {
	      key: 'b'
	    }, React$2.createElement('tr', {}, React$2.createElement('td', {}, React$2.createElement('div', {
	      className: 'rdtCounters'
	    }, counters))))]));
	  },
	  componentWillMount: function () {
	    var me = this;
	    me.timeConstraints = {
	      hours: {
	        min: 0,
	        max: 23,
	        step: 1
	      },
	      minutes: {
	        min: 0,
	        max: 59,
	        step: 1
	      },
	      seconds: {
	        min: 0,
	        max: 59,
	        step: 1
	      },
	      milliseconds: {
	        min: 0,
	        max: 999,
	        step: 1
	      }
	    };
	    ['hours', 'minutes', 'seconds', 'milliseconds'].forEach(function (type) {
	      assign$1(me.timeConstraints[type], me.props.timeConstraints[type]);
	    });
	    this.setState(this.calculateState(this.props));
	  },
	  componentWillReceiveProps: function (nextProps) {
	    this.setState(this.calculateState(nextProps));
	  },
	  updateMilli: function (e) {
	    var milli = parseInt(e.target.value, 10);

	    if (milli === e.target.value && milli >= 0 && milli < 1000) {
	      this.props.setTime('milliseconds', milli);
	      this.setState({
	        milliseconds: milli
	      });
	    }
	  },
	  renderHeader: function () {
	    if (!this.props.dateFormat) return null;
	    var date = this.props.selectedDate || this.props.viewDate;
	    return React$2.createElement('thead', {
	      key: 'h'
	    }, React$2.createElement('tr', {}, React$2.createElement('th', {
	      className: 'rdtSwitch',
	      colSpan: 4,
	      onClick: this.props.showView('days')
	    }, date.format(this.props.dateFormat))));
	  },
	  onStartClicking: function (action, type) {
	    var me = this;
	    return function () {
	      var update = {};
	      update[type] = me[action](type);
	      me.setState(update);
	      me.timer = setTimeout(function () {
	        me.increaseTimer = setInterval(function () {
	          update[type] = me[action](type);
	          me.setState(update);
	        }, 70);
	      }, 500);

	      me.mouseUpListener = function () {
	        clearTimeout(me.timer);
	        clearInterval(me.increaseTimer);
	        me.props.setTime(type, me.state[type]);
	        document.body.removeEventListener('mouseup', me.mouseUpListener);
	        document.body.removeEventListener('touchend', me.mouseUpListener);
	      };

	      document.body.addEventListener('mouseup', me.mouseUpListener);
	      document.body.addEventListener('touchend', me.mouseUpListener);
	    };
	  },
	  disableContextMenu: function (event) {
	    event.preventDefault();
	    return false;
	  },
	  padValues: {
	    hours: 1,
	    minutes: 2,
	    seconds: 2,
	    milliseconds: 3
	  },
	  toggleDayPart: function (type) {
	    // type is always 'hours'
	    var value = parseInt(this.state[type], 10) + 12;
	    if (value > this.timeConstraints[type].max) value = this.timeConstraints[type].min + (value - (this.timeConstraints[type].max + 1));
	    return this.pad(type, value);
	  },
	  increase: function (type) {
	    var value = parseInt(this.state[type], 10) + this.timeConstraints[type].step;
	    if (value > this.timeConstraints[type].max) value = this.timeConstraints[type].min + (value - (this.timeConstraints[type].max + 1));
	    return this.pad(type, value);
	  },
	  decrease: function (type) {
	    var value = parseInt(this.state[type], 10) - this.timeConstraints[type].step;
	    if (value < this.timeConstraints[type].min) value = this.timeConstraints[type].max + 1 - (this.timeConstraints[type].min - value);
	    return this.pad(type, value);
	  },
	  pad: function (type, value) {
	    var str = value + '';

	    while (str.length < this.padValues[type]) str = '0' + str;

	    return str;
	  }
	});
	var TimeView$1 = DateTimePickerTime;

	var React$1 = require('react'),
	    createClass$1 = createReactClass,
	    DaysView = DaysView$1,
	    MonthsView = MonthsView$1,
	    YearsView = YearsView$1,
	    TimeView = TimeView$1;

	var CalendarContainer$1 = createClass$1({
	  viewComponents: {
	    days: DaysView,
	    months: MonthsView,
	    years: YearsView,
	    time: TimeView
	  },
	  render: function () {
	    return React$1.createElement(this.viewComponents[this.props.view], this.props.viewProps);
	  }
	});
	var CalendarContainer_1 = CalendarContainer$1;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;

	  _setPrototypeOf(subClass, superClass);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}
	/**
	* Check whether some DOM node is our Component's node.
	*/


	function isNodeFound(current, componentNode, ignoreClass) {
	  if (current === componentNode) {
	    return true;
	  } // SVG <use/> elements do not technically reside in the rendered DOM, so
	  // they do not have classList directly, but they offer a link to their
	  // corresponding element, which can have classList. This extra check is for
	  // that case.
	  // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement
	  // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17


	  if (current.correspondingElement) {
	    return current.correspondingElement.classList.contains(ignoreClass);
	  }

	  return current.classList.contains(ignoreClass);
	}
	/**
	 * Try to find our node in a hierarchy of nodes, returning the document
	 * node as highest node if our node is not found in the path up.
	 */


	function findHighest(current, componentNode, ignoreClass) {
	  if (current === componentNode) {
	    return true;
	  } // If source=local then this event came from 'somewhere'
	  // inside and should be ignored. We could handle this with
	  // a layered approach, too, but that requires going back to
	  // thinking in terms of Dom node nesting, running counter
	  // to React's 'you shouldn't care about the DOM' philosophy.
	  // Also cover shadowRoot node by checking current.host


	  while (current.parentNode || current.host) {
	    // Only check normal node without shadowRoot
	    if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {
	      return true;
	    }

	    current = current.parentNode || current.host;
	  }

	  return current;
	}
	/**
	 * Check if the browser scrollbar was clicked
	 */


	function clickedScrollbar(evt) {
	  return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
	} // ideally will get replaced with external dep
	// when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in


	var testPassiveEventSupport = function testPassiveEventSupport() {
	  if (typeof window === 'undefined' || typeof window.addEventListener !== 'function') {
	    return;
	  }

	  var passive = false;
	  var options = Object.defineProperty({}, 'passive', {
	    get: function get() {
	      passive = true;
	    }
	  });

	  var noop = function noop() {};

	  window.addEventListener('testPassiveEventSupport', noop, options);
	  window.removeEventListener('testPassiveEventSupport', noop, options);
	  return passive;
	};

	function autoInc(seed) {
	  if (seed === void 0) {
	    seed = 0;
	  }

	  return function () {
	    return ++seed;
	  };
	}

	var uid = autoInc();
	var passiveEventSupport;
	var handlersMap = {};
	var enabledInstances = {};
	var touchEvents = ['touchstart', 'touchmove'];
	var IGNORE_CLASS_NAME = 'ignore-react-onclickoutside';
	/**
	 * Options for addEventHandler and removeEventHandler
	 */

	function getEventHandlerOptions(instance, eventName) {
	  var handlerOptions = null;
	  var isTouchEvent = touchEvents.indexOf(eventName) !== -1;

	  if (isTouchEvent && passiveEventSupport) {
	    handlerOptions = {
	      passive: !instance.props.preventDefault
	    };
	  }

	  return handlerOptions;
	}
	/**
	 * This function generates the HOC function that you'll use
	 * in order to impart onOutsideClick listening to an
	 * arbitrary component. It gets called at the end of the
	 * bootstrapping code to yield an instance of the
	 * onClickOutsideHOC function defined inside setupHOC().
	 */


	function onClickOutsideHOC(WrappedComponent, config) {
	  var _class, _temp;

	  var componentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	  return _temp = _class = /*#__PURE__*/function (_Component) {
	    _inheritsLoose(onClickOutside, _Component);

	    function onClickOutside(props) {
	      var _this;

	      _this = _Component.call(this, props) || this;

	      _this.__outsideClickHandler = function (event) {
	        if (typeof _this.__clickOutsideHandlerProp === 'function') {
	          _this.__clickOutsideHandlerProp(event);

	          return;
	        }

	        var instance = _this.getInstance();

	        if (typeof instance.props.handleClickOutside === 'function') {
	          instance.props.handleClickOutside(event);
	          return;
	        }

	        if (typeof instance.handleClickOutside === 'function') {
	          instance.handleClickOutside(event);
	          return;
	        }

	        throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
	      };

	      _this.__getComponentNode = function () {
	        var instance = _this.getInstance();

	        if (config && typeof config.setClickOutsideRef === 'function') {
	          return config.setClickOutsideRef()(instance);
	        }

	        if (typeof instance.setClickOutsideRef === 'function') {
	          return instance.setClickOutsideRef();
	        }

	        return reactDom.findDOMNode(instance);
	      };

	      _this.enableOnClickOutside = function () {
	        if (typeof document === 'undefined' || enabledInstances[_this._uid]) {
	          return;
	        }

	        if (typeof passiveEventSupport === 'undefined') {
	          passiveEventSupport = testPassiveEventSupport();
	        }

	        enabledInstances[_this._uid] = true;
	        var events = _this.props.eventTypes;

	        if (!events.forEach) {
	          events = [events];
	        }

	        handlersMap[_this._uid] = function (event) {
	          if (_this.componentNode === null) return;

	          if (_this.props.preventDefault) {
	            event.preventDefault();
	          }

	          if (_this.props.stopPropagation) {
	            event.stopPropagation();
	          }

	          if (_this.props.excludeScrollbar && clickedScrollbar(event)) return;
	          var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;

	          if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
	            return;
	          }

	          _this.__outsideClickHandler(event);
	        };

	        events.forEach(function (eventName) {
	          document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized(_this), eventName));
	        });
	      };

	      _this.disableOnClickOutside = function () {
	        delete enabledInstances[_this._uid];
	        var fn = handlersMap[_this._uid];

	        if (fn && typeof document !== 'undefined') {
	          var events = _this.props.eventTypes;

	          if (!events.forEach) {
	            events = [events];
	          }

	          events.forEach(function (eventName) {
	            return document.removeEventListener(eventName, fn, getEventHandlerOptions(_assertThisInitialized(_this), eventName));
	          });
	          delete handlersMap[_this._uid];
	        }
	      };

	      _this.getRef = function (ref) {
	        return _this.instanceRef = ref;
	      };

	      _this._uid = uid();
	      return _this;
	    }
	    /**
	     * Access the WrappedComponent's instance.
	     */


	    var _proto = onClickOutside.prototype;

	    _proto.getInstance = function getInstance() {
	      if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {
	        return this;
	      }

	      var ref = this.instanceRef;
	      return ref.getInstance ? ref.getInstance() : ref;
	    };
	    /**
	     * Add click listeners to the current document,
	     * linked to this component's state.
	     */


	    _proto.componentDidMount = function componentDidMount() {
	      // If we are in an environment without a DOM such
	      // as shallow rendering or snapshots then we exit
	      // early to prevent any unhandled errors being thrown.
	      if (typeof document === 'undefined' || !document.createElement) {
	        return;
	      }

	      var instance = this.getInstance();

	      if (config && typeof config.handleClickOutside === 'function') {
	        this.__clickOutsideHandlerProp = config.handleClickOutside(instance);

	        if (typeof this.__clickOutsideHandlerProp !== 'function') {
	          throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
	        }
	      }

	      this.componentNode = this.__getComponentNode(); // return early so we dont initiate onClickOutside

	      if (this.props.disableOnClickOutside) return;
	      this.enableOnClickOutside();
	    };

	    _proto.componentDidUpdate = function componentDidUpdate() {
	      this.componentNode = this.__getComponentNode();
	    }
	    /**
	     * Remove all document's event listeners for this component
	     */
	    ;

	    _proto.componentWillUnmount = function componentWillUnmount() {
	      this.disableOnClickOutside();
	    }
	    /**
	     * Can be called to explicitly enable event listening
	     * for clicks and touches outside of this element.
	     */
	    ;
	    /**
	     * Pass-through render
	     */


	    _proto.render = function render() {
	      // eslint-disable-next-line no-unused-vars
	      var _this$props = this.props;
	      _this$props.excludeScrollbar;

	      var props = _objectWithoutPropertiesLoose(_this$props, ["excludeScrollbar"]);

	      if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {
	        props.ref = this.getRef;
	      } else {
	        props.wrappedRef = this.getRef;
	      }

	      props.disableOnClickOutside = this.disableOnClickOutside;
	      props.enableOnClickOutside = this.enableOnClickOutside;
	      return react.createElement(WrappedComponent, props);
	    };

	    return onClickOutside;
	  }(react.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
	    eventTypes: ['mousedown', 'touchstart'],
	    excludeScrollbar: config && config.excludeScrollbar || false,
	    outsideClickIgnoreClass: IGNORE_CLASS_NAME,
	    preventDefault: false,
	    stopPropagation: false
	  }, _class.getClass = function () {
	    return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
	  }, _temp;
	}

	var reactOnclickoutside_es = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': onClickOutsideHOC,
		IGNORE_CLASS_NAME: IGNORE_CLASS_NAME
	});

	var assign = objectAssign$1,
	    PropTypes = propTypes.exports,
	    createClass = createReactClass,
	    moment = moment$3.exports,
	    React = require('react'),
	    CalendarContainer = CalendarContainer_1,
	    onClickOutside = reactOnclickoutside_es.default;

	var viewModes = Object.freeze({
	  YEARS: 'years',
	  MONTHS: 'months',
	  DAYS: 'days',
	  TIME: 'time'
	});
	var TYPES = PropTypes;
	var Datetime = createClass({
	  displayName: 'DateTime',
	  propTypes: {
	    // value: TYPES.object | TYPES.string,
	    // defaultValue: TYPES.object | TYPES.string,
	    // viewDate: TYPES.object | TYPES.string,
	    onFocus: TYPES.func,
	    onBlur: TYPES.func,
	    onChange: TYPES.func,
	    onViewModeChange: TYPES.func,
	    onNavigateBack: TYPES.func,
	    onNavigateForward: TYPES.func,
	    locale: TYPES.string,
	    utc: TYPES.bool,
	    displayTimeZone: TYPES.string,
	    input: TYPES.bool,
	    // dateFormat: TYPES.string | TYPES.bool,
	    // timeFormat: TYPES.string | TYPES.bool,
	    inputProps: TYPES.object,
	    timeConstraints: TYPES.object,
	    viewMode: TYPES.oneOf([viewModes.YEARS, viewModes.MONTHS, viewModes.DAYS, viewModes.TIME]),
	    isValidDate: TYPES.func,
	    open: TYPES.bool,
	    strictParsing: TYPES.bool,
	    closeOnSelect: TYPES.bool,
	    closeOnTab: TYPES.bool,
	    showWeekNumbers: TYPES.bool
	  },
	  getInitialState: function () {
	    this.checkTZ(this.props);
	    var state = this.getStateFromProps(this.props);
	    if (state.open === undefined) state.open = !this.props.input;
	    state.currentView = this.props.dateFormat ? this.props.viewMode || state.updateOn || viewModes.DAYS : viewModes.TIME;
	    return state;
	  },
	  parseDate: function (date, formats) {
	    var parsedDate;
	    if (date && typeof date === 'string') parsedDate = this.localMoment(date, formats.datetime);else if (date) parsedDate = this.localMoment(date);
	    if (parsedDate && !parsedDate.isValid()) parsedDate = null;
	    return parsedDate;
	  },
	  getStateFromProps: function (props) {
	    var formats = this.getFormats(props),
	        date = props.value || props.defaultValue,
	        selectedDate,
	        viewDate,
	        updateOn,
	        inputValue;
	    selectedDate = this.parseDate(date, formats);
	    viewDate = this.parseDate(props.viewDate, formats);
	    viewDate = selectedDate ? selectedDate.clone().startOf('month') : viewDate ? viewDate.clone().startOf('month') : this.localMoment().startOf('month');
	    updateOn = this.getUpdateOn(formats);
	    if (selectedDate) inputValue = selectedDate.format(formats.datetime);else if (date.isValid && !date.isValid()) inputValue = '';else inputValue = date || '';
	    return {
	      updateOn: updateOn,
	      inputFormat: formats.datetime,
	      viewDate: viewDate,
	      selectedDate: selectedDate,
	      inputValue: inputValue,
	      open: props.open
	    };
	  },
	  getUpdateOn: function (formats) {
	    if (formats.date.match(/[lLD]/)) {
	      return viewModes.DAYS;
	    } else if (formats.date.indexOf('M') !== -1) {
	      return viewModes.MONTHS;
	    } else if (formats.date.indexOf('Y') !== -1) {
	      return viewModes.YEARS;
	    }

	    return viewModes.DAYS;
	  },
	  getFormats: function (props) {
	    var formats = {
	      date: props.dateFormat || '',
	      time: props.timeFormat || ''
	    },
	        locale = this.localMoment(props.date, null, props).localeData();

	    if (formats.date === true) {
	      formats.date = locale.longDateFormat('L');
	    } else if (this.getUpdateOn(formats) !== viewModes.DAYS) {
	      formats.time = '';
	    }

	    if (formats.time === true) {
	      formats.time = locale.longDateFormat('LT');
	    }

	    formats.datetime = formats.date && formats.time ? formats.date + ' ' + formats.time : formats.date || formats.time;
	    return formats;
	  },
	  componentWillReceiveProps: function (nextProps) {
	    var formats = this.getFormats(nextProps),
	        updatedState = {};

	    if (nextProps.value !== this.props.value || formats.datetime !== this.getFormats(this.props).datetime) {
	      updatedState = this.getStateFromProps(nextProps);
	    }

	    if (updatedState.open === undefined) {
	      if (this.props.open === false) {
	        updatedState.open = false;
	      } else {
	        updatedState.open = this.state.open;
	      }
	    }

	    if (nextProps.viewMode !== this.props.viewMode) {
	      updatedState.currentView = nextProps.viewMode;
	    }

	    if (nextProps.locale !== this.props.locale) {
	      if (this.state.viewDate) {
	        var updatedViewDate = this.state.viewDate.clone().locale(nextProps.locale);
	        updatedState.viewDate = updatedViewDate;
	      }

	      if (this.state.selectedDate) {
	        var updatedSelectedDate = this.state.selectedDate.clone().locale(nextProps.locale);
	        updatedState.selectedDate = updatedSelectedDate;
	        updatedState.inputValue = updatedSelectedDate.format(formats.datetime);
	      }
	    }

	    if (nextProps.utc !== this.props.utc || nextProps.displayTimeZone !== this.props.displayTimeZone) {
	      if (nextProps.utc) {
	        if (this.state.viewDate) updatedState.viewDate = this.state.viewDate.clone().utc();

	        if (this.state.selectedDate) {
	          updatedState.selectedDate = this.state.selectedDate.clone().utc();
	          updatedState.inputValue = updatedState.selectedDate.format(formats.datetime);
	        }
	      } else if (nextProps.displayTimeZone) {
	        if (this.state.viewDate) updatedState.viewDate = this.state.viewDate.clone().tz(nextProps.displayTimeZone);

	        if (this.state.selectedDate) {
	          updatedState.selectedDate = this.state.selectedDate.clone().tz(nextProps.displayTimeZone);
	          updatedState.inputValue = updatedState.selectedDate.tz(nextProps.displayTimeZone).format(formats.datetime);
	        }
	      } else {
	        if (this.state.viewDate) updatedState.viewDate = this.state.viewDate.clone().local();

	        if (this.state.selectedDate) {
	          updatedState.selectedDate = this.state.selectedDate.clone().local();
	          updatedState.inputValue = updatedState.selectedDate.format(formats.datetime);
	        }
	      }
	    }

	    if (nextProps.viewDate !== this.props.viewDate) {
	      updatedState.viewDate = moment(nextProps.viewDate);
	    }

	    this.checkTZ(nextProps);
	    this.setState(updatedState);
	  },
	  onInputChange: function (e) {
	    var value = e.target === null ? e : e.target.value,
	        localMoment = this.localMoment(value, this.state.inputFormat),
	        update = {
	      inputValue: value
	    };

	    if (localMoment.isValid() && !this.props.value) {
	      update.selectedDate = localMoment;
	      update.viewDate = localMoment.clone().startOf('month');
	    } else {
	      update.selectedDate = null;
	    }

	    return this.setState(update, function () {
	      return this.props.onChange(localMoment.isValid() ? localMoment : this.state.inputValue);
	    });
	  },
	  onInputKey: function (e) {
	    if (e.which === 9 && this.props.closeOnTab) {
	      this.closeCalendar();
	    }
	  },
	  showView: function (view) {
	    var me = this;
	    return function () {
	      me.state.currentView !== view && me.props.onViewModeChange(view);
	      me.setState({
	        currentView: view
	      });
	    };
	  },
	  setDate: function (type) {
	    var me = this,
	        nextViews = {
	      month: viewModes.DAYS,
	      year: viewModes.MONTHS
	    };
	    return function (e) {
	      me.setState({
	        viewDate: me.state.viewDate.clone()[type](parseInt(e.target.getAttribute('data-value'), 10)).startOf(type),
	        currentView: nextViews[type]
	      });
	      me.props.onViewModeChange(nextViews[type]);
	    };
	  },
	  subtractTime: function (amount, type, toSelected) {
	    var me = this;
	    return function () {
	      me.props.onNavigateBack(amount, type);
	      me.updateTime('subtract', amount, type, toSelected);
	    };
	  },
	  addTime: function (amount, type, toSelected) {
	    var me = this;
	    return function () {
	      me.props.onNavigateForward(amount, type);
	      me.updateTime('add', amount, type, toSelected);
	    };
	  },
	  updateTime: function (op, amount, type, toSelected) {
	    var update = {},
	        date = toSelected ? 'selectedDate' : 'viewDate';
	    update[date] = this.state[date].clone()[op](amount, type);
	    this.setState(update);
	  },
	  allowedSetTime: ['hours', 'minutes', 'seconds', 'milliseconds'],
	  setTime: function (type, value) {
	    var index = this.allowedSetTime.indexOf(type) + 1,
	        state = this.state,
	        date = (state.selectedDate || state.viewDate).clone(),
	        nextType; // It is needed to set all the time properties
	    // to not to reset the time

	    date[type](value);

	    for (; index < this.allowedSetTime.length; index++) {
	      nextType = this.allowedSetTime[index];
	      date[nextType](date[nextType]());
	    }

	    if (!this.props.value) {
	      this.setState({
	        selectedDate: date,
	        inputValue: date.format(state.inputFormat)
	      });
	    }

	    this.props.onChange(date);
	  },
	  updateSelectedDate: function (e, close) {
	    var target = e.currentTarget,
	        modifier = 0,
	        viewDate = this.state.viewDate,
	        currentDate = this.state.selectedDate || viewDate,
	        date;

	    if (target.className.indexOf('rdtDay') !== -1) {
	      if (target.className.indexOf('rdtNew') !== -1) modifier = 1;else if (target.className.indexOf('rdtOld') !== -1) modifier = -1;
	      date = viewDate.clone().month(viewDate.month() + modifier).date(parseInt(target.getAttribute('data-value'), 10));
	    } else if (target.className.indexOf('rdtMonth') !== -1) {
	      date = viewDate.clone().month(parseInt(target.getAttribute('data-value'), 10)).date(currentDate.date());
	    } else if (target.className.indexOf('rdtYear') !== -1) {
	      date = viewDate.clone().month(currentDate.month()).date(currentDate.date()).year(parseInt(target.getAttribute('data-value'), 10));
	    }

	    date.hours(currentDate.hours()).minutes(currentDate.minutes()).seconds(currentDate.seconds()).milliseconds(currentDate.milliseconds());

	    if (!this.props.value) {
	      var open = !(this.props.closeOnSelect && close);

	      if (!open) {
	        this.props.onBlur(date);
	      }

	      this.props.open = open;
	      this.setState({
	        selectedDate: date,
	        viewDate: date.clone().startOf('month'),
	        inputValue: date.format(this.state.inputFormat),
	        open: open
	      });
	    } else {
	      if (this.props.closeOnSelect && close) {
	        this.closeCalendar();
	      }
	    }

	    this.props.onChange(date);
	  },
	  openCalendar: function (e) {
	    if (!this.state.open) {
	      this.props.open = true;
	      this.setState({
	        open: true
	      }, function () {
	        this.props.onFocus(e);
	      });
	    }
	  },
	  closeCalendar: function () {
	    this.props.open = false;
	    this.setState({
	      open: false
	    }, function () {
	      this.props.onBlur(this.state.selectedDate || this.state.inputValue);
	    });
	  },
	  handleClickOutside: function () {
	    if (this.props.input && this.state.open && (this.props.open === undefined || this.props.open) && !this.props.disableCloseOnClickOutside) {
	      this.props.open = false;
	      this.setState({
	        open: false
	      }, function () {
	        this.props.onBlur(this.state.selectedDate || this.state.inputValue);
	      });
	    }
	  },
	  localMoment: function (date, format, props) {
	    props = props || this.props;
	    var m = null;

	    if (props.utc) {
	      m = moment.utc(date, format, props.strictParsing);
	    } else if (props.displayTimeZone) {
	      m = moment.tz(date, format, props.displayTimeZone);
	    } else {
	      m = moment(date, format, props.strictParsing);
	    }

	    if (props.locale) m.locale(props.locale);
	    return m;
	  },
	  checkTZ: function (props) {
	    var con = console;

	    if (props.displayTimeZone && !this.tzWarning && !moment.tz) {
	      this.tzWarning = true;
	      con && con.error('react-datetime: displayTimeZone prop with value "' + props.displayTimeZone + '" is used but moment.js timezone is not loaded.');
	    }
	  },
	  componentProps: {
	    fromProps: ['value', 'isValidDate', 'renderDay', 'renderMonth', 'renderYear', 'timeConstraints', 'showWeekNumbers'],
	    fromState: ['viewDate', 'selectedDate', 'updateOn'],
	    fromThis: ['setDate', 'setTime', 'showView', 'addTime', 'subtractTime', 'updateSelectedDate', 'localMoment', 'handleClickOutside']
	  },
	  getComponentProps: function () {
	    var me = this,
	        formats = this.getFormats(this.props),
	        props = {
	      dateFormat: formats.date,
	      timeFormat: formats.time
	    };
	    this.componentProps.fromProps.forEach(function (name) {
	      props[name] = me.props[name];
	    });
	    this.componentProps.fromState.forEach(function (name) {
	      props[name] = me.state[name];
	    });
	    this.componentProps.fromThis.forEach(function (name) {
	      props[name] = me[name];
	    });
	    return props;
	  },
	  overrideEvent: function (handler, action) {
	    if (!this.overridenEvents) {
	      this.overridenEvents = {};
	    }

	    if (!this.overridenEvents[handler]) {
	      var me = this;

	      this.overridenEvents[handler] = function (e) {
	        var result;

	        if (me.props.inputProps && me.props.inputProps[handler]) {
	          result = me.props.inputProps[handler](e);
	        }

	        if (result !== false) {
	          action(e);
	        }
	      };
	    }

	    return this.overridenEvents[handler];
	  },
	  render: function () {
	    // TODO: Make a function or clean up this code,
	    // logic right now is really hard to follow
	    var className = 'rdt' + (this.props.className ? Array.isArray(this.props.className) ? ' ' + this.props.className.join(' ') : ' ' + this.props.className : ''),
	        children = [];

	    if (this.props.input) {
	      var finalInputProps = assign({
	        type: 'text',
	        className: 'form-control',
	        value: this.state.inputValue
	      }, this.props.inputProps, {
	        onClick: this.overrideEvent('onClick', this.openCalendar),
	        onFocus: this.overrideEvent('onFocus', this.openCalendar),
	        onChange: this.overrideEvent('onChange', this.onInputChange),
	        onKeyDown: this.overrideEvent('onKeyDown', this.onInputKey)
	      });

	      if (this.props.renderInput) {
	        children = [React.createElement('div', {
	          key: 'i'
	        }, this.props.renderInput(finalInputProps, this.openCalendar, this.closeCalendar))];
	      } else {
	        children = [React.createElement('input', assign({
	          key: 'i'
	        }, finalInputProps))];
	      }
	    } else {
	      className += ' rdtStatic';
	    }

	    if (this.props.open || this.props.open === undefined && this.state.open) className += ' rdtOpen';
	    return React.createElement(ClickableWrapper, {
	      className: className,
	      onClickOut: this.handleClickOutside
	    }, children.concat(React.createElement('div', {
	      key: 'dt',
	      className: 'rdtPicker'
	    }, React.createElement(CalendarContainer, {
	      view: this.state.currentView,
	      viewProps: this.getComponentProps()
	    }))));
	  }
	});
	var ClickableWrapper = onClickOutside(createClass({
	  render: function () {
	    return React.createElement('div', {
	      className: this.props.className
	    }, this.props.children);
	  },
	  handleClickOutside: function (e) {
	    this.props.onClickOut(e);
	  }
	}));
	Datetime.defaultProps = {
	  className: '',
	  defaultValue: '',
	  inputProps: {},
	  input: true,
	  onFocus: function () {},
	  onBlur: function () {},
	  onChange: function () {},
	  onViewModeChange: function () {},
	  onNavigateBack: function () {},
	  onNavigateForward: function () {},
	  timeFormat: true,
	  timeConstraints: {},
	  dateFormat: true,
	  strictParsing: true,
	  closeOnSelect: false,
	  closeOnTab: true,
	  utc: false,
	  showWeekNumbers: false
	}; // Make moment accessible through the Datetime class

	Datetime.moment = moment;
	var DateTime = Datetime;

	(function (module, exports) {
		!function (e, a) {
		  "function" == typeof commonjsRequire ? a(moment$3.exports) : a(e.moment);
		}(commonjsGlobal, function (e) {

		  e.defineLocale("af", {
		    months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
		    monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
		    weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
		    weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
		    weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
		    meridiemParse: /vm|nm/i,
		    isPM: function (e) {
		      return /^nm$/i.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? _ ? "vm" : "VM" : _ ? "nm" : "NM";
		    },
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Vandag om] LT",
		      nextDay: "[M\xf4re om] LT",
		      nextWeek: "dddd [om] LT",
		      lastDay: "[Gister om] LT",
		      lastWeek: "[Laas] dddd [om] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "oor %s",
		      past: "%s gelede",
		      s: "'n paar sekondes",
		      ss: "%d sekondes",
		      m: "'n minuut",
		      mm: "%d minute",
		      h: "'n uur",
		      hh: "%d ure",
		      d: "'n dag",
		      dd: "%d dae",
		      M: "'n maand",
		      MM: "%d maande",
		      y: "'n jaar",
		      yy: "%d jaar"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
		    ordinal: function (e) {
		      return e + (1 === e || 8 === e || 20 <= e ? "ste" : "de");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });

		  function E(e) {
		    return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : 3 <= e % 100 && e % 100 <= 10 ? 3 : 11 <= e % 100 ? 4 : 5;
		  }

		  function a(n) {
		    return function (e, a, _, s) {
		      var d = E(e),
		          t = J[n][E(e)];
		      return (t = 2 === d ? t[a ? 0 : 1] : t).replace(/%d/i, e);
		    };
		  }

		  function F(e) {
		    return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : 3 <= e % 100 && e % 100 <= 10 ? 3 : 11 <= e % 100 ? 4 : 5;
		  }

		  function _(n) {
		    return function (e, a, _, s) {
		      var d = F(e),
		          t = N[n][F(e)];
		      return (t = 2 === d ? t[a ? 0 : 1] : t).replace(/%d/i, e);
		    };
		  }

		  function z(e) {
		    return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : 3 <= e % 100 && e % 100 <= 10 ? 3 : 11 <= e % 100 ? 4 : 5;
		  }

		  function s(n) {
		    return function (e, a, _, s) {
		      var d = z(e),
		          t = B[n][z(e)];
		      return (t = 2 === d ? t[a ? 0 : 1] : t).replace(/%d/i, e);
		    };
		  }

		  var J = {
		    s: ["\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629", "\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u062b\u0627\u0646\u064a\u062a\u0627\u0646", "\u062b\u0627\u0646\u064a\u062a\u064a\u0646"], "%d \u062b\u0648\u0627\u0646", "%d \u062b\u0627\u0646\u064a\u0629", "%d \u062b\u0627\u0646\u064a\u0629"],
		    m: ["\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629", "\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u062f\u0642\u064a\u0642\u062a\u0627\u0646", "\u062f\u0642\u064a\u0642\u062a\u064a\u0646"], "%d \u062f\u0642\u0627\u0626\u0642", "%d \u062f\u0642\u064a\u0642\u0629", "%d \u062f\u0642\u064a\u0642\u0629"],
		    h: ["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629", "\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u0633\u0627\u0639\u062a\u0627\u0646", "\u0633\u0627\u0639\u062a\u064a\u0646"], "%d \u0633\u0627\u0639\u0627\u062a", "%d \u0633\u0627\u0639\u0629", "%d \u0633\u0627\u0639\u0629"],
		    d: ["\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645", "\u064a\u0648\u0645 \u0648\u0627\u062d\u062f", ["\u064a\u0648\u0645\u0627\u0646", "\u064a\u0648\u0645\u064a\u0646"], "%d \u0623\u064a\u0627\u0645", "%d \u064a\u0648\u0645\u064b\u0627", "%d \u064a\u0648\u0645"],
		    M: ["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631", "\u0634\u0647\u0631 \u0648\u0627\u062d\u062f", ["\u0634\u0647\u0631\u0627\u0646", "\u0634\u0647\u0631\u064a\u0646"], "%d \u0623\u0634\u0647\u0631", "%d \u0634\u0647\u0631\u0627", "%d \u0634\u0647\u0631"],
		    y: ["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645", "\u0639\u0627\u0645 \u0648\u0627\u062d\u062f", ["\u0639\u0627\u0645\u0627\u0646", "\u0639\u0627\u0645\u064a\u0646"], "%d \u0623\u0639\u0648\u0627\u0645", "%d \u0639\u0627\u0645\u064b\u0627", "%d \u0639\u0627\u0645"]
		  },
		      d = ["\u062c\u0627\u0646\u0641\u064a", "\u0641\u064a\u0641\u0631\u064a", "\u0645\u0627\u0631\u0633", "\u0623\u0641\u0631\u064a\u0644", "\u0645\u0627\u064a", "\u062c\u0648\u0627\u0646", "\u062c\u0648\u064a\u0644\u064a\u0629", "\u0623\u0648\u062a", "\u0633\u0628\u062a\u0645\u0628\u0631", "\u0623\u0643\u062a\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062f\u064a\u0633\u0645\u0628\u0631"],
		      I = (e.defineLocale("ar-dz", {
		    months: d,
		    monthsShort: d,
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "D/\u200fM/\u200fYYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0635|\u0645/,
		    isPM: function (e) {
		      return "\u0645" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0635" : "\u0645";
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0628\u0639\u062f %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: a("s"),
		      ss: a("s"),
		      m: a("m"),
		      mm: a("m"),
		      h: a("h"),
		      hh: a("h"),
		      d: a("d"),
		      dd: a("d"),
		      M: a("M"),
		      MM: a("M"),
		      y: a("y"),
		      yy: a("y")
		    },
		    postformat: function (e) {
		      return e.replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 0,
		      doy: 4
		    }
		  }), e.defineLocale("ar-kw", {
		    months: "\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),
		    monthsShort: "\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062a\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0627\u062d\u062f_\u0627\u062a\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0641\u064a %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: "\u062b\u0648\u0627\u0646",
		      ss: "%d \u062b\u0627\u0646\u064a\u0629",
		      m: "\u062f\u0642\u064a\u0642\u0629",
		      mm: "%d \u062f\u0642\u0627\u0626\u0642",
		      h: "\u0633\u0627\u0639\u0629",
		      hh: "%d \u0633\u0627\u0639\u0627\u062a",
		      d: "\u064a\u0648\u0645",
		      dd: "%d \u0623\u064a\u0627\u0645",
		      M: "\u0634\u0647\u0631",
		      MM: "%d \u0623\u0634\u0647\u0631",
		      y: "\u0633\u0646\u0629",
		      yy: "%d \u0633\u0646\u0648\u0627\u062a"
		    },
		    week: {
		      dow: 0,
		      doy: 12
		    }
		  }), {
		    1: "1",
		    2: "2",
		    3: "3",
		    4: "4",
		    5: "5",
		    6: "6",
		    7: "7",
		    8: "8",
		    9: "9",
		    0: "0"
		  }),
		      N = {
		    s: ["\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629", "\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u062b\u0627\u0646\u064a\u062a\u0627\u0646", "\u062b\u0627\u0646\u064a\u062a\u064a\u0646"], "%d \u062b\u0648\u0627\u0646", "%d \u062b\u0627\u0646\u064a\u0629", "%d \u062b\u0627\u0646\u064a\u0629"],
		    m: ["\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629", "\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u062f\u0642\u064a\u0642\u062a\u0627\u0646", "\u062f\u0642\u064a\u0642\u062a\u064a\u0646"], "%d \u062f\u0642\u0627\u0626\u0642", "%d \u062f\u0642\u064a\u0642\u0629", "%d \u062f\u0642\u064a\u0642\u0629"],
		    h: ["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629", "\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u0633\u0627\u0639\u062a\u0627\u0646", "\u0633\u0627\u0639\u062a\u064a\u0646"], "%d \u0633\u0627\u0639\u0627\u062a", "%d \u0633\u0627\u0639\u0629", "%d \u0633\u0627\u0639\u0629"],
		    d: ["\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645", "\u064a\u0648\u0645 \u0648\u0627\u062d\u062f", ["\u064a\u0648\u0645\u0627\u0646", "\u064a\u0648\u0645\u064a\u0646"], "%d \u0623\u064a\u0627\u0645", "%d \u064a\u0648\u0645\u064b\u0627", "%d \u064a\u0648\u0645"],
		    M: ["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631", "\u0634\u0647\u0631 \u0648\u0627\u062d\u062f", ["\u0634\u0647\u0631\u0627\u0646", "\u0634\u0647\u0631\u064a\u0646"], "%d \u0623\u0634\u0647\u0631", "%d \u0634\u0647\u0631\u0627", "%d \u0634\u0647\u0631"],
		    y: ["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645", "\u0639\u0627\u0645 \u0648\u0627\u062d\u062f", ["\u0639\u0627\u0645\u0627\u0646", "\u0639\u0627\u0645\u064a\u0646"], "%d \u0623\u0639\u0648\u0627\u0645", "%d \u0639\u0627\u0645\u064b\u0627", "%d \u0639\u0627\u0645"]
		  },
		      d = ["\u064a\u0646\u0627\u064a\u0631", "\u0641\u0628\u0631\u0627\u064a\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064a\u0644", "\u0645\u0627\u064a\u0648", "\u064a\u0648\u0646\u064a\u0648", "\u064a\u0648\u0644\u064a\u0648", "\u0623\u063a\u0633\u0637\u0633", "\u0633\u0628\u062a\u0645\u0628\u0631", "\u0623\u0643\u062a\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062f\u064a\u0633\u0645\u0628\u0631"],
		      R = (e.defineLocale("ar-ly", {
		    months: d,
		    monthsShort: d,
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "D/\u200fM/\u200fYYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0635|\u0645/,
		    isPM: function (e) {
		      return "\u0645" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0635" : "\u0645";
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0628\u0639\u062f %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: _("s"),
		      ss: _("s"),
		      m: _("m"),
		      mm: _("m"),
		      h: _("h"),
		      hh: _("h"),
		      d: _("d"),
		      dd: _("d"),
		      M: _("M"),
		      MM: _("M"),
		      y: _("y"),
		      yy: _("y")
		    },
		    preparse: function (e) {
		      return e.replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return I[e];
		      }).replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 6,
		      doy: 12
		    }
		  }), e.defineLocale("ar-ma", {
		    months: "\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),
		    monthsShort: "\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0627\u062d\u062f_\u0627\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0641\u064a %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: "\u062b\u0648\u0627\u0646",
		      ss: "%d \u062b\u0627\u0646\u064a\u0629",
		      m: "\u062f\u0642\u064a\u0642\u0629",
		      mm: "%d \u062f\u0642\u0627\u0626\u0642",
		      h: "\u0633\u0627\u0639\u0629",
		      hh: "%d \u0633\u0627\u0639\u0627\u062a",
		      d: "\u064a\u0648\u0645",
		      dd: "%d \u0623\u064a\u0627\u0645",
		      M: "\u0634\u0647\u0631",
		      MM: "%d \u0623\u0634\u0647\u0631",
		      y: "\u0633\u0646\u0629",
		      yy: "%d \u0633\u0646\u0648\u0627\u062a"
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), {
		    1: "\u0661",
		    2: "\u0662",
		    3: "\u0663",
		    4: "\u0664",
		    5: "\u0665",
		    6: "\u0666",
		    7: "\u0667",
		    8: "\u0668",
		    9: "\u0669",
		    0: "\u0660"
		  }),
		      C = {
		    "\u0661": "1",
		    "\u0662": "2",
		    "\u0663": "3",
		    "\u0664": "4",
		    "\u0665": "5",
		    "\u0666": "6",
		    "\u0667": "7",
		    "\u0668": "8",
		    "\u0669": "9",
		    "\u0660": "0"
		  },
		      K = (e.defineLocale("ar-sa", {
		    months: "\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a\u0648_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648_\u0623\u063a\u0633\u0637\u0633_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),
		    monthsShort: "\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a\u0648_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648_\u0623\u063a\u0633\u0637\u0633_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0635|\u0645/,
		    isPM: function (e) {
		      return "\u0645" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0635" : "\u0645";
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0641\u064a %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: "\u062b\u0648\u0627\u0646",
		      ss: "%d \u062b\u0627\u0646\u064a\u0629",
		      m: "\u062f\u0642\u064a\u0642\u0629",
		      mm: "%d \u062f\u0642\u0627\u0626\u0642",
		      h: "\u0633\u0627\u0639\u0629",
		      hh: "%d \u0633\u0627\u0639\u0627\u062a",
		      d: "\u064a\u0648\u0645",
		      dd: "%d \u0623\u064a\u0627\u0645",
		      M: "\u0634\u0647\u0631",
		      MM: "%d \u0623\u0634\u0647\u0631",
		      y: "\u0633\u0646\u0629",
		      yy: "%d \u0633\u0646\u0648\u0627\u062a"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
		        return C[e];
		      }).replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return R[e];
		      }).replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("ar-tn", {
		    months: "\u062c\u0627\u0646\u0641\u064a_\u0641\u064a\u0641\u0631\u064a_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064a\u0644_\u0645\u0627\u064a_\u062c\u0648\u0627\u0646_\u062c\u0648\u064a\u0644\u064a\u0629_\u0623\u0648\u062a_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),
		    monthsShort: "\u062c\u0627\u0646\u0641\u064a_\u0641\u064a\u0641\u0631\u064a_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064a\u0644_\u0645\u0627\u064a_\u062c\u0648\u0627\u0646_\u062c\u0648\u064a\u0644\u064a\u0629_\u0623\u0648\u062a_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0641\u064a %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: "\u062b\u0648\u0627\u0646",
		      ss: "%d \u062b\u0627\u0646\u064a\u0629",
		      m: "\u062f\u0642\u064a\u0642\u0629",
		      mm: "%d \u062f\u0642\u0627\u0626\u0642",
		      h: "\u0633\u0627\u0639\u0629",
		      hh: "%d \u0633\u0627\u0639\u0627\u062a",
		      d: "\u064a\u0648\u0645",
		      dd: "%d \u0623\u064a\u0627\u0645",
		      M: "\u0634\u0647\u0631",
		      MM: "%d \u0623\u0634\u0647\u0631",
		      y: "\u0633\u0646\u0629",
		      yy: "%d \u0633\u0646\u0648\u0627\u062a"
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), {
		    1: "\u0661",
		    2: "\u0662",
		    3: "\u0663",
		    4: "\u0664",
		    5: "\u0665",
		    6: "\u0666",
		    7: "\u0667",
		    8: "\u0668",
		    9: "\u0669",
		    0: "\u0660"
		  }),
		      G = {
		    "\u0661": "1",
		    "\u0662": "2",
		    "\u0663": "3",
		    "\u0664": "4",
		    "\u0665": "5",
		    "\u0666": "6",
		    "\u0667": "7",
		    "\u0668": "8",
		    "\u0669": "9",
		    "\u0660": "0"
		  },
		      B = {
		    s: ["\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629", "\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u062b\u0627\u0646\u064a\u062a\u0627\u0646", "\u062b\u0627\u0646\u064a\u062a\u064a\u0646"], "%d \u062b\u0648\u0627\u0646", "%d \u062b\u0627\u0646\u064a\u0629", "%d \u062b\u0627\u0646\u064a\u0629"],
		    m: ["\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629", "\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u062f\u0642\u064a\u0642\u062a\u0627\u0646", "\u062f\u0642\u064a\u0642\u062a\u064a\u0646"], "%d \u062f\u0642\u0627\u0626\u0642", "%d \u062f\u0642\u064a\u0642\u0629", "%d \u062f\u0642\u064a\u0642\u0629"],
		    h: ["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629", "\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629", ["\u0633\u0627\u0639\u062a\u0627\u0646", "\u0633\u0627\u0639\u062a\u064a\u0646"], "%d \u0633\u0627\u0639\u0627\u062a", "%d \u0633\u0627\u0639\u0629", "%d \u0633\u0627\u0639\u0629"],
		    d: ["\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645", "\u064a\u0648\u0645 \u0648\u0627\u062d\u062f", ["\u064a\u0648\u0645\u0627\u0646", "\u064a\u0648\u0645\u064a\u0646"], "%d \u0623\u064a\u0627\u0645", "%d \u064a\u0648\u0645\u064b\u0627", "%d \u064a\u0648\u0645"],
		    M: ["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631", "\u0634\u0647\u0631 \u0648\u0627\u062d\u062f", ["\u0634\u0647\u0631\u0627\u0646", "\u0634\u0647\u0631\u064a\u0646"], "%d \u0623\u0634\u0647\u0631", "%d \u0634\u0647\u0631\u0627", "%d \u0634\u0647\u0631"],
		    y: ["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645", "\u0639\u0627\u0645 \u0648\u0627\u062d\u062f", ["\u0639\u0627\u0645\u0627\u0646", "\u0639\u0627\u0645\u064a\u0646"], "%d \u0623\u0639\u0648\u0627\u0645", "%d \u0639\u0627\u0645\u064b\u0627", "%d \u0639\u0627\u0645"]
		  },
		      d = ["\u064a\u0646\u0627\u064a\u0631", "\u0641\u0628\u0631\u0627\u064a\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064a\u0644", "\u0645\u0627\u064a\u0648", "\u064a\u0648\u0646\u064a\u0648", "\u064a\u0648\u0644\u064a\u0648", "\u0623\u063a\u0633\u0637\u0633", "\u0633\u0628\u062a\u0645\u0628\u0631", "\u0623\u0643\u062a\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062f\u064a\u0633\u0645\u0628\u0631"],
		      q = (e.defineLocale("ar", {
		    months: d,
		    monthsShort: d,
		    weekdays: "\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),
		    weekdaysShort: "\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),
		    weekdaysMin: "\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "D/\u200fM/\u200fYYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0635|\u0645/,
		    isPM: function (e) {
		      return "\u0645" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0635" : "\u0645";
		    },
		    calendar: {
		      sameDay: "[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextDay: "[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      nextWeek: "dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastDay: "[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      lastWeek: "dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0628\u0639\u062f %s",
		      past: "\u0645\u0646\u0630 %s",
		      s: s("s"),
		      ss: s("s"),
		      m: s("m"),
		      mm: s("m"),
		      h: s("h"),
		      hh: s("h"),
		      d: s("d"),
		      dd: s("d"),
		      M: s("M"),
		      MM: s("M"),
		      y: s("y"),
		      yy: s("y")
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
		        return G[e];
		      }).replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return K[e];
		      }).replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 6,
		      doy: 12
		    }
		  }), {
		    1: "-inci",
		    5: "-inci",
		    8: "-inci",
		    70: "-inci",
		    80: "-inci",
		    2: "-nci",
		    7: "-nci",
		    20: "-nci",
		    50: "-nci",
		    3: "-\xfcnc\xfc",
		    4: "-\xfcnc\xfc",
		    100: "-\xfcnc\xfc",
		    6: "-nc\u0131",
		    9: "-uncu",
		    10: "-uncu",
		    30: "-uncu",
		    60: "-\u0131nc\u0131",
		    90: "-\u0131nc\u0131"
		  });

		  function t(e, a, _) {
		    return "m" === _ ? a ? "\u0445\u0432\u0456\u043b\u0456\u043d\u0430" : "\u0445\u0432\u0456\u043b\u0456\u043d\u0443" : "h" === _ ? a ? "\u0433\u0430\u0434\u0437\u0456\u043d\u0430" : "\u0433\u0430\u0434\u0437\u0456\u043d\u0443" : e + " " + (e = +e, a = (a = {
		      ss: a ? "\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434" : "\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434",
		      mm: a ? "\u0445\u0432\u0456\u043b\u0456\u043d\u0430_\u0445\u0432\u0456\u043b\u0456\u043d\u044b_\u0445\u0432\u0456\u043b\u0456\u043d" : "\u0445\u0432\u0456\u043b\u0456\u043d\u0443_\u0445\u0432\u0456\u043b\u0456\u043d\u044b_\u0445\u0432\u0456\u043b\u0456\u043d",
		      hh: a ? "\u0433\u0430\u0434\u0437\u0456\u043d\u0430_\u0433\u0430\u0434\u0437\u0456\u043d\u044b_\u0433\u0430\u0434\u0437\u0456\u043d" : "\u0433\u0430\u0434\u0437\u0456\u043d\u0443_\u0433\u0430\u0434\u0437\u0456\u043d\u044b_\u0433\u0430\u0434\u0437\u0456\u043d",
		      dd: "\u0434\u0437\u0435\u043d\u044c_\u0434\u043d\u0456_\u0434\u0437\u0451\u043d",
		      MM: "\u043c\u0435\u0441\u044f\u0446_\u043c\u0435\u0441\u044f\u0446\u044b_\u043c\u0435\u0441\u044f\u0446\u0430\u045e",
		      yy: "\u0433\u043e\u0434_\u0433\u0430\u0434\u044b_\u0433\u0430\u0434\u043e\u045e"
		    }[_]).split("_"), e % 10 == 1 && e % 100 != 11 ? a[0] : 2 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? a[1] : a[2]);
		  }

		  e.defineLocale("az", {
		    months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
		    monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
		    weekdays: "Bazar_Bazar ert\u0259si_\xc7\u0259r\u015f\u0259nb\u0259 ax\u015fam\u0131_\xc7\u0259r\u015f\u0259nb\u0259_C\xfcm\u0259 ax\u015fam\u0131_C\xfcm\u0259_\u015e\u0259nb\u0259".split("_"),
		    weekdaysShort: "Baz_BzE_\xc7Ax_\xc7\u0259r_CAx_C\xfcm_\u015e\u0259n".split("_"),
		    weekdaysMin: "Bz_BE_\xc7A_\xc7\u0259_CA_C\xfc_\u015e\u0259".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[bug\xfcn saat] LT",
		      nextDay: "[sabah saat] LT",
		      nextWeek: "[g\u0259l\u0259n h\u0259ft\u0259] dddd [saat] LT",
		      lastDay: "[d\xfcn\u0259n] LT",
		      lastWeek: "[ke\xe7\u0259n h\u0259ft\u0259] dddd [saat] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s sonra",
		      past: "%s \u0259vv\u0259l",
		      s: "bir ne\xe7\u0259 saniy\u0259",
		      ss: "%d saniy\u0259",
		      m: "bir d\u0259qiq\u0259",
		      mm: "%d d\u0259qiq\u0259",
		      h: "bir saat",
		      hh: "%d saat",
		      d: "bir g\xfcn",
		      dd: "%d g\xfcn",
		      M: "bir ay",
		      MM: "%d ay",
		      y: "bir il",
		      yy: "%d il"
		    },
		    meridiemParse: /gec\u0259|s\u0259h\u0259r|g\xfcnd\xfcz|ax\u015fam/,
		    isPM: function (e) {
		      return /^(g\xfcnd\xfcz|ax\u015fam)$/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "gec\u0259" : e < 12 ? "s\u0259h\u0259r" : e < 17 ? "g\xfcnd\xfcz" : "ax\u015fam";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0131nc\u0131|inci|nci|\xfcnc\xfc|nc\u0131|uncu)/,
		    ordinal: function (e) {
		      if (0 === e) return e + "-\u0131nc\u0131";
		      var a = e % 10;
		      return e + (q[a] || q[e % 100 - a] || q[100 <= e ? 100 : null]);
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("be", {
		    months: {
		      format: "\u0441\u0442\u0443\u0434\u0437\u0435\u043d\u044f_\u043b\u044e\u0442\u0430\u0433\u0430_\u0441\u0430\u043a\u0430\u0432\u0456\u043a\u0430_\u043a\u0440\u0430\u0441\u0430\u0432\u0456\u043a\u0430_\u0442\u0440\u0430\u045e\u043d\u044f_\u0447\u044d\u0440\u0432\u0435\u043d\u044f_\u043b\u0456\u043f\u0435\u043d\u044f_\u0436\u043d\u0456\u045e\u043d\u044f_\u0432\u0435\u0440\u0430\u0441\u043d\u044f_\u043a\u0430\u0441\u0442\u0440\u044b\u0447\u043d\u0456\u043a\u0430_\u043b\u0456\u0441\u0442\u0430\u043f\u0430\u0434\u0430_\u0441\u043d\u0435\u0436\u043d\u044f".split("_"),
		      standalone: "\u0441\u0442\u0443\u0434\u0437\u0435\u043d\u044c_\u043b\u044e\u0442\u044b_\u0441\u0430\u043a\u0430\u0432\u0456\u043a_\u043a\u0440\u0430\u0441\u0430\u0432\u0456\u043a_\u0442\u0440\u0430\u0432\u0435\u043d\u044c_\u0447\u044d\u0440\u0432\u0435\u043d\u044c_\u043b\u0456\u043f\u0435\u043d\u044c_\u0436\u043d\u0456\u0432\u0435\u043d\u044c_\u0432\u0435\u0440\u0430\u0441\u0435\u043d\u044c_\u043a\u0430\u0441\u0442\u0440\u044b\u0447\u043d\u0456\u043a_\u043b\u0456\u0441\u0442\u0430\u043f\u0430\u0434_\u0441\u043d\u0435\u0436\u0430\u043d\u044c".split("_")
		    },
		    monthsShort: "\u0441\u0442\u0443\u0434_\u043b\u044e\u0442_\u0441\u0430\u043a_\u043a\u0440\u0430\u0441_\u0442\u0440\u0430\u0432_\u0447\u044d\u0440\u0432_\u043b\u0456\u043f_\u0436\u043d\u0456\u0432_\u0432\u0435\u0440_\u043a\u0430\u0441\u0442_\u043b\u0456\u0441\u0442_\u0441\u043d\u0435\u0436".split("_"),
		    weekdays: {
		      format: "\u043d\u044f\u0434\u0437\u0435\u043b\u044e_\u043f\u0430\u043d\u044f\u0434\u0437\u0435\u043b\u0430\u043a_\u0430\u045e\u0442\u043e\u0440\u0430\u043a_\u0441\u0435\u0440\u0430\u0434\u0443_\u0447\u0430\u0446\u0432\u0435\u0440_\u043f\u044f\u0442\u043d\u0456\u0446\u0443_\u0441\u0443\u0431\u043e\u0442\u0443".split("_"),
		      standalone: "\u043d\u044f\u0434\u0437\u0435\u043b\u044f_\u043f\u0430\u043d\u044f\u0434\u0437\u0435\u043b\u0430\u043a_\u0430\u045e\u0442\u043e\u0440\u0430\u043a_\u0441\u0435\u0440\u0430\u0434\u0430_\u0447\u0430\u0446\u0432\u0435\u0440_\u043f\u044f\u0442\u043d\u0456\u0446\u0430_\u0441\u0443\u0431\u043e\u0442\u0430".split("_"),
		      isFormat: /\[ ?[\u0423\u0443\u045e] ?(?:\u043c\u0456\u043d\u0443\u043b\u0443\u044e|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0443\u044e)? ?\] ?dddd/
		    },
		    weekdaysShort: "\u043d\u0434_\u043f\u043d_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043f\u0442_\u0441\u0431".split("_"),
		    weekdaysMin: "\u043d\u0434_\u043f\u043d_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043f\u0442_\u0441\u0431".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY \u0433.",
		      LLL: "D MMMM YYYY \u0433., HH:mm",
		      LLLL: "dddd, D MMMM YYYY \u0433., HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0421\u0451\u043d\u043d\u044f \u045e] LT",
		      nextDay: "[\u0417\u0430\u045e\u0442\u0440\u0430 \u045e] LT",
		      lastDay: "[\u0423\u0447\u043e\u0440\u0430 \u045e] LT",
		      nextWeek: function () {
		        return "[\u0423] dddd [\u045e] LT";
		      },
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		          case 3:
		          case 5:
		          case 6:
		            return "[\u0423 \u043c\u0456\u043d\u0443\u043b\u0443\u044e] dddd [\u045e] LT";

		          case 1:
		          case 2:
		          case 4:
		            return "[\u0423 \u043c\u0456\u043d\u0443\u043b\u044b] dddd [\u045e] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u043f\u0440\u0430\u0437 %s",
		      past: "%s \u0442\u0430\u043c\u0443",
		      s: "\u043d\u0435\u043a\u0430\u043b\u044c\u043a\u0456 \u0441\u0435\u043a\u0443\u043d\u0434",
		      m: t,
		      mm: t,
		      h: t,
		      hh: t,
		      d: "\u0434\u0437\u0435\u043d\u044c",
		      dd: t,
		      M: "\u043c\u0435\u0441\u044f\u0446",
		      MM: t,
		      y: "\u0433\u043e\u0434",
		      yy: t
		    },
		    meridiemParse: /\u043d\u043e\u0447\u044b|\u0440\u0430\u043d\u0456\u0446\u044b|\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430/,
		    isPM: function (e) {
		      return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430)$/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u043d\u043e\u0447\u044b" : e < 12 ? "\u0440\u0430\u043d\u0456\u0446\u044b" : e < 17 ? "\u0434\u043d\u044f" : "\u0432\u0435\u0447\u0430\u0440\u0430";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0456|\u044b|\u0433\u0430)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "M":
		        case "d":
		        case "DDD":
		        case "w":
		        case "W":
		          return e % 10 != 2 && e % 10 != 3 || e % 100 == 12 || e % 100 == 13 ? e + "-\u044b" : e + "-\u0456";

		        case "D":
		          return e + "-\u0433\u0430";

		        default:
		          return e;
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("bg", {
		    months: "\u044f\u043d\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0439_\u044e\u043d\u0438_\u044e\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438_\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438_\u043d\u043e\u0435\u043c\u0432\u0440\u0438_\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438".split("_"),
		    monthsShort: "\u044f\u043d\u0443_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u044e\u043d\u0438_\u044e\u043b\u0438_\u0430\u0432\u0433_\u0441\u0435\u043f_\u043e\u043a\u0442_\u043d\u043e\u0435_\u0434\u0435\u043a".split("_"),
		    weekdays: "\u043d\u0435\u0434\u0435\u043b\u044f_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u044f\u0434\u0430_\u0447\u0435\u0442\u0432\u044a\u0440\u0442\u044a\u043a_\u043f\u0435\u0442\u044a\u043a_\u0441\u044a\u0431\u043e\u0442\u0430".split("_"),
		    weekdaysShort: "\u043d\u0435\u0434_\u043f\u043e\u043d_\u0432\u0442\u043e_\u0441\u0440\u044f_\u0447\u0435\u0442_\u043f\u0435\u0442_\u0441\u044a\u0431".split("_"),
		    weekdaysMin: "\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "D.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY H:mm",
		      LLLL: "dddd, D MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[\u0414\u043d\u0435\u0441 \u0432] LT",
		      nextDay: "[\u0423\u0442\u0440\u0435 \u0432] LT",
		      nextWeek: "dddd [\u0432] LT",
		      lastDay: "[\u0412\u0447\u0435\u0440\u0430 \u0432] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		          case 3:
		          case 6:
		            return "[\u041c\u0438\u043d\u0430\u043b\u0430\u0442\u0430] dddd [\u0432] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[\u041c\u0438\u043d\u0430\u043b\u0438\u044f] dddd [\u0432] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0441\u043b\u0435\u0434 %s",
		      past: "\u043f\u0440\u0435\u0434\u0438 %s",
		      s: "\u043d\u044f\u043a\u043e\u043b\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\u0438",
		      ss: "%d \u0441\u0435\u043a\u0443\u043d\u0434\u0438",
		      m: "\u043c\u0438\u043d\u0443\u0442\u0430",
		      mm: "%d \u043c\u0438\u043d\u0443\u0442\u0438",
		      h: "\u0447\u0430\u0441",
		      hh: "%d \u0447\u0430\u0441\u0430",
		      d: "\u0434\u0435\u043d",
		      dd: "%d \u0434\u0435\u043d\u0430",
		      w: "\u0441\u0435\u0434\u043c\u0438\u0446\u0430",
		      ww: "%d \u0441\u0435\u0434\u043c\u0438\u0446\u0438",
		      M: "\u043c\u0435\u0441\u0435\u0446",
		      MM: "%d \u043c\u0435\u0441\u0435\u0446\u0430",
		      y: "\u0433\u043e\u0434\u0438\u043d\u0430",
		      yy: "%d \u0433\u043e\u0434\u0438\u043d\u0438"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/,
		    ordinal: function (e) {
		      var a = e % 10,
		          _ = e % 100;

		      return 0 === e ? e + "-\u0435\u0432" : 0 == _ ? e + "-\u0435\u043d" : 10 < _ && _ < 20 ? e + "-\u0442\u0438" : 1 == a ? e + "-\u0432\u0438" : 2 == a ? e + "-\u0440\u0438" : 7 == a || 8 == a ? e + "-\u043c\u0438" : e + "-\u0442\u0438";
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("bm", {
		    months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_M\u025bkalo_Zuw\u025bnkalo_Zuluyekalo_Utikalo_S\u025btanburukalo_\u0254kut\u0254burukalo_Nowanburukalo_Desanburukalo".split("_"),
		    monthsShort: "Zan_Few_Mar_Awi_M\u025b_Zuw_Zul_Uti_S\u025bt_\u0254ku_Now_Des".split("_"),
		    weekdays: "Kari_Nt\u025bn\u025bn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),
		    weekdaysShort: "Kar_Nt\u025b_Tar_Ara_Ala_Jum_Sib".split("_"),
		    weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "MMMM [tile] D [san] YYYY",
		      LLL: "MMMM [tile] D [san] YYYY [l\u025br\u025b] HH:mm",
		      LLLL: "dddd MMMM [tile] D [san] YYYY [l\u025br\u025b] HH:mm"
		    },
		    calendar: {
		      sameDay: "[Bi l\u025br\u025b] LT",
		      nextDay: "[Sini l\u025br\u025b] LT",
		      nextWeek: "dddd [don l\u025br\u025b] LT",
		      lastDay: "[Kunu l\u025br\u025b] LT",
		      lastWeek: "dddd [t\u025bm\u025bnen l\u025br\u025b] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s k\u0254n\u0254",
		      past: "a b\u025b %s b\u0254",
		      s: "sanga dama dama",
		      ss: "sekondi %d",
		      m: "miniti kelen",
		      mm: "miniti %d",
		      h: "l\u025br\u025b kelen",
		      hh: "l\u025br\u025b %d",
		      d: "tile kelen",
		      dd: "tile %d",
		      M: "kalo kelen",
		      MM: "kalo %d",
		      y: "san kelen",
		      yy: "san %d"
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var U = {
		    1: "\u09e7",
		    2: "\u09e8",
		    3: "\u09e9",
		    4: "\u09ea",
		    5: "\u09eb",
		    6: "\u09ec",
		    7: "\u09ed",
		    8: "\u09ee",
		    9: "\u09ef",
		    0: "\u09e6"
		  },
		      $ = {
		    "\u09e7": "1",
		    "\u09e8": "2",
		    "\u09e9": "3",
		    "\u09ea": "4",
		    "\u09eb": "5",
		    "\u09ec": "6",
		    "\u09ed": "7",
		    "\u09ee": "8",
		    "\u09ef": "9",
		    "\u09e6": "0"
		  },
		      Q = (e.defineLocale("bn-bd", {
		    months: "\u099c\u09be\u09a8\u09c1\u09df\u09be\u09b0\u09bf_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09df\u09be\u09b0\u09bf_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0_\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0_\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0_\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0".split("_"),
		    monthsShort: "\u099c\u09be\u09a8\u09c1_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f_\u0985\u0995\u09cd\u099f\u09cb_\u09a8\u09ad\u09c7_\u09a1\u09bf\u09b8\u09c7".split("_"),
		    weekdays: "\u09b0\u09ac\u09bf\u09ac\u09be\u09b0_\u09b8\u09cb\u09ae\u09ac\u09be\u09b0_\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0_\u09ac\u09c1\u09a7\u09ac\u09be\u09b0_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09b0_\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0_\u09b6\u09a8\u09bf\u09ac\u09be\u09b0".split("_"),
		    weekdaysShort: "\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),
		    weekdaysMin: "\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),
		    longDateFormat: {
		      LT: "A h:mm \u09b8\u09ae\u09df",
		      LTS: "A h:mm:ss \u09b8\u09ae\u09df",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm \u09b8\u09ae\u09df",
		      LLLL: "dddd, D MMMM YYYY, A h:mm \u09b8\u09ae\u09df"
		    },
		    calendar: {
		      sameDay: "[\u0986\u099c] LT",
		      nextDay: "[\u0986\u0997\u09be\u09ae\u09c0\u0995\u09be\u09b2] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0997\u09a4\u0995\u09be\u09b2] LT",
		      lastWeek: "[\u0997\u09a4] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u09aa\u09b0\u09c7",
		      past: "%s \u0986\u0997\u09c7",
		      s: "\u0995\u09df\u09c7\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",
		      ss: "%d \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",
		      m: "\u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f",
		      mm: "%d \u09ae\u09bf\u09a8\u09bf\u099f",
		      h: "\u098f\u0995 \u0998\u09a8\u09cd\u099f\u09be",
		      hh: "%d \u0998\u09a8\u09cd\u099f\u09be",
		      d: "\u098f\u0995 \u09a6\u09bf\u09a8",
		      dd: "%d \u09a6\u09bf\u09a8",
		      M: "\u098f\u0995 \u09ae\u09be\u09b8",
		      MM: "%d \u09ae\u09be\u09b8",
		      y: "\u098f\u0995 \u09ac\u099b\u09b0",
		      yy: "%d \u09ac\u099b\u09b0"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g, function (e) {
		        return $[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return U[e];
		      });
		    },
		    meridiemParse: /\u09b0\u09be\u09a4|\u09ad\u09cb\u09b0|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be|\u09b0\u09be\u09a4/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u09b0\u09be\u09a4" === a ? e < 4 ? e : e + 12 : "\u09ad\u09cb\u09b0" === a || "\u09b8\u0995\u09be\u09b2" === a ? e : "\u09a6\u09c1\u09aa\u09c1\u09b0" === a ? 3 <= e ? e : e + 12 : "\u09ac\u09bf\u0995\u09be\u09b2" === a || "\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u09b0\u09be\u09a4" : e < 6 ? "\u09ad\u09cb\u09b0" : e < 12 ? "\u09b8\u0995\u09be\u09b2" : e < 15 ? "\u09a6\u09c1\u09aa\u09c1\u09b0" : e < 18 ? "\u09ac\u09bf\u0995\u09be\u09b2" : e < 20 ? "\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be" : "\u09b0\u09be\u09a4";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), {
		    1: "\u09e7",
		    2: "\u09e8",
		    3: "\u09e9",
		    4: "\u09ea",
		    5: "\u09eb",
		    6: "\u09ec",
		    7: "\u09ed",
		    8: "\u09ee",
		    9: "\u09ef",
		    0: "\u09e6"
		  }),
		      V = {
		    "\u09e7": "1",
		    "\u09e8": "2",
		    "\u09e9": "3",
		    "\u09ea": "4",
		    "\u09eb": "5",
		    "\u09ec": "6",
		    "\u09ed": "7",
		    "\u09ee": "8",
		    "\u09ef": "9",
		    "\u09e6": "0"
		  },
		      Z = (e.defineLocale("bn", {
		    months: "\u099c\u09be\u09a8\u09c1\u09df\u09be\u09b0\u09bf_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09df\u09be\u09b0\u09bf_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0_\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0_\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0_\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0".split("_"),
		    monthsShort: "\u099c\u09be\u09a8\u09c1_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f_\u0985\u0995\u09cd\u099f\u09cb_\u09a8\u09ad\u09c7_\u09a1\u09bf\u09b8\u09c7".split("_"),
		    weekdays: "\u09b0\u09ac\u09bf\u09ac\u09be\u09b0_\u09b8\u09cb\u09ae\u09ac\u09be\u09b0_\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0_\u09ac\u09c1\u09a7\u09ac\u09be\u09b0_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09b0_\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0_\u09b6\u09a8\u09bf\u09ac\u09be\u09b0".split("_"),
		    weekdaysShort: "\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),
		    weekdaysMin: "\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),
		    longDateFormat: {
		      LT: "A h:mm \u09b8\u09ae\u09df",
		      LTS: "A h:mm:ss \u09b8\u09ae\u09df",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm \u09b8\u09ae\u09df",
		      LLLL: "dddd, D MMMM YYYY, A h:mm \u09b8\u09ae\u09df"
		    },
		    calendar: {
		      sameDay: "[\u0986\u099c] LT",
		      nextDay: "[\u0986\u0997\u09be\u09ae\u09c0\u0995\u09be\u09b2] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0997\u09a4\u0995\u09be\u09b2] LT",
		      lastWeek: "[\u0997\u09a4] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u09aa\u09b0\u09c7",
		      past: "%s \u0986\u0997\u09c7",
		      s: "\u0995\u09df\u09c7\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",
		      ss: "%d \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",
		      m: "\u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f",
		      mm: "%d \u09ae\u09bf\u09a8\u09bf\u099f",
		      h: "\u098f\u0995 \u0998\u09a8\u09cd\u099f\u09be",
		      hh: "%d \u0998\u09a8\u09cd\u099f\u09be",
		      d: "\u098f\u0995 \u09a6\u09bf\u09a8",
		      dd: "%d \u09a6\u09bf\u09a8",
		      M: "\u098f\u0995 \u09ae\u09be\u09b8",
		      MM: "%d \u09ae\u09be\u09b8",
		      y: "\u098f\u0995 \u09ac\u099b\u09b0",
		      yy: "%d \u09ac\u099b\u09b0"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g, function (e) {
		        return V[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Q[e];
		      });
		    },
		    meridiemParse: /\u09b0\u09be\u09a4|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b0\u09be\u09a4/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u09b0\u09be\u09a4" === a && 4 <= e || "\u09a6\u09c1\u09aa\u09c1\u09b0" === a && e < 5 || "\u09ac\u09bf\u0995\u09be\u09b2" === a ? e + 12 : e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u09b0\u09be\u09a4" : e < 10 ? "\u09b8\u0995\u09be\u09b2" : e < 17 ? "\u09a6\u09c1\u09aa\u09c1\u09b0" : e < 20 ? "\u09ac\u09bf\u0995\u09be\u09b2" : "\u09b0\u09be\u09a4";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), {
		    1: "\u0f21",
		    2: "\u0f22",
		    3: "\u0f23",
		    4: "\u0f24",
		    5: "\u0f25",
		    6: "\u0f26",
		    7: "\u0f27",
		    8: "\u0f28",
		    9: "\u0f29",
		    0: "\u0f20"
		  }),
		      X = {
		    "\u0f21": "1",
		    "\u0f22": "2",
		    "\u0f23": "3",
		    "\u0f24": "4",
		    "\u0f25": "5",
		    "\u0f26": "6",
		    "\u0f27": "7",
		    "\u0f28": "8",
		    "\u0f29": "9",
		    "\u0f20": "0"
		  };

		  function ee(e, a, _) {
		    return e + " " + (_ = {
		      mm: "munutenn",
		      MM: "miz",
		      dd: "devezh"
		    }[_], 2 !== (e = e) ? _ : void 0 !== (e = {
		      m: "v",
		      b: "v",
		      d: "z"
		    })[(_ = _).charAt(0)] ? e[_.charAt(0)] + _.substring(1) : _);
		  }

		  e.defineLocale("bo", {
		    months: "\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0f44\u0f0b\u0f54\u0f7c_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f49\u0f72\u0f66\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f66\u0f74\u0f58\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f5e\u0f72\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f63\u0f94\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0fb2\u0f74\u0f42\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f62\u0f92\u0fb1\u0f51\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0f42\u0f74\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f45\u0f72\u0f42\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f49\u0f72\u0f66\u0f0b\u0f54".split("_"),
		    monthsShort: "\u0f5f\u0fb3\u0f0b1_\u0f5f\u0fb3\u0f0b2_\u0f5f\u0fb3\u0f0b3_\u0f5f\u0fb3\u0f0b4_\u0f5f\u0fb3\u0f0b5_\u0f5f\u0fb3\u0f0b6_\u0f5f\u0fb3\u0f0b7_\u0f5f\u0fb3\u0f0b8_\u0f5f\u0fb3\u0f0b9_\u0f5f\u0fb3\u0f0b10_\u0f5f\u0fb3\u0f0b11_\u0f5f\u0fb3\u0f0b12".split("_"),
		    monthsShortRegex: /^(\u0f5f\u0fb3\u0f0b\d{1,2})/,
		    monthsParseExact: !0,
		    weekdays: "\u0f42\u0f5f\u0f60\u0f0b\u0f49\u0f72\u0f0b\u0f58\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f5f\u0fb3\u0f0b\u0f56\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f63\u0fb7\u0f42\u0f0b\u0f54\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f55\u0f74\u0f62\u0f0b\u0f56\u0f74_\u0f42\u0f5f\u0f60\u0f0b\u0f54\u0f0b\u0f66\u0f44\u0f66\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f66\u0fa4\u0f7a\u0f53\u0f0b\u0f54\u0f0b".split("_"),
		    weekdaysShort: "\u0f49\u0f72\u0f0b\u0f58\u0f0b_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b_\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b_\u0f63\u0fb7\u0f42\u0f0b\u0f54\u0f0b_\u0f55\u0f74\u0f62\u0f0b\u0f56\u0f74_\u0f54\u0f0b\u0f66\u0f44\u0f66\u0f0b_\u0f66\u0fa4\u0f7a\u0f53\u0f0b\u0f54\u0f0b".split("_"),
		    weekdaysMin: "\u0f49\u0f72_\u0f5f\u0fb3_\u0f58\u0f72\u0f42_\u0f63\u0fb7\u0f42_\u0f55\u0f74\u0f62_\u0f66\u0f44\u0f66_\u0f66\u0fa4\u0f7a\u0f53".split("_"),
		    longDateFormat: {
		      LT: "A h:mm",
		      LTS: "A h:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm",
		      LLLL: "dddd, D MMMM YYYY, A h:mm"
		    },
		    calendar: {
		      sameDay: "[\u0f51\u0f72\u0f0b\u0f62\u0f72\u0f44] LT",
		      nextDay: "[\u0f66\u0f44\u0f0b\u0f49\u0f72\u0f53] LT",
		      nextWeek: "[\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f62\u0f97\u0f7a\u0f66\u0f0b\u0f58], LT",
		      lastDay: "[\u0f41\u0f0b\u0f66\u0f44] LT",
		      lastWeek: "[\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f58\u0f50\u0f60\u0f0b\u0f58] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0f63\u0f0b",
		      past: "%s \u0f66\u0f94\u0f53\u0f0b\u0f63",
		      s: "\u0f63\u0f58\u0f0b\u0f66\u0f44",
		      ss: "%d \u0f66\u0f90\u0f62\u0f0b\u0f46\u0f0d",
		      m: "\u0f66\u0f90\u0f62\u0f0b\u0f58\u0f0b\u0f42\u0f45\u0f72\u0f42",
		      mm: "%d \u0f66\u0f90\u0f62\u0f0b\u0f58",
		      h: "\u0f46\u0f74\u0f0b\u0f5a\u0f7c\u0f51\u0f0b\u0f42\u0f45\u0f72\u0f42",
		      hh: "%d \u0f46\u0f74\u0f0b\u0f5a\u0f7c\u0f51",
		      d: "\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f45\u0f72\u0f42",
		      dd: "%d \u0f49\u0f72\u0f53\u0f0b",
		      M: "\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f45\u0f72\u0f42",
		      MM: "%d \u0f5f\u0fb3\u0f0b\u0f56",
		      y: "\u0f63\u0f7c\u0f0b\u0f42\u0f45\u0f72\u0f42",
		      yy: "%d \u0f63\u0f7c"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f20]/g, function (e) {
		        return X[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Z[e];
		      });
		    },
		    meridiemParse: /\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c|\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66|\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44|\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42|\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c" === a && 4 <= e || "\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44" === a && e < 5 || "\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42" === a ? e + 12 : e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c" : e < 10 ? "\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66" : e < 17 ? "\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44" : e < 20 ? "\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42" : "\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  });
		  var d = [/^gen/i, /^c[\u02bc\']hwe/i, /^meu/i, /^ebr/i, /^mae/i, /^(mez|eve)/i, /^gou/i, /^eos/i, /^gwe/i, /^her/i, /^du/i, /^ker/i],
		      n = /^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
		      r = [/^Su/i, /^Lu/i, /^Me([^r]|$)/i, /^Mer/i, /^Ya/i, /^Gw/i, /^Sa/i];

		  function i(e, a, _) {
		    var s = e + " ";

		    switch (_) {
		      case "ss":
		        return s += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";

		      case "m":
		        return a ? "jedna minuta" : "jedne minute";

		      case "mm":
		        return s += 1 !== e && (2 === e || 3 === e || 4 === e) ? "minute" : "minuta";

		      case "h":
		        return a ? "jedan sat" : "jednog sata";

		      case "hh":
		        return s += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";

		      case "dd":
		        return s += 1 === e ? "dan" : "dana";

		      case "MM":
		        return s += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";

		      case "yy":
		        return s += 1 !== e && (2 === e || 3 === e || 4 === e) ? "godine" : "godina";
		    }
		  }

		  e.defineLocale("br", {
		    months: "Genver_C\u02bchwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
		    monthsShort: "Gen_C\u02bchwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
		    weekdays: "Sul_Lun_Meurzh_Merc\u02bcher_Yaou_Gwener_Sadorn".split("_"),
		    weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
		    weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
		    weekdaysParse: r,
		    fullWeekdaysParse: [/^sul/i, /^lun/i, /^meurzh/i, /^merc[\u02bc\']her/i, /^yaou/i, /^gwener/i, /^sadorn/i],
		    shortWeekdaysParse: [/^Sul/i, /^Lun/i, /^Meu/i, /^Mer/i, /^Yao/i, /^Gwe/i, /^Sad/i],
		    minWeekdaysParse: r,
		    monthsRegex: n,
		    monthsShortRegex: n,
		    monthsStrictRegex: /^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
		    monthsShortStrictRegex: /^(gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
		    monthsParse: d,
		    longMonthsParse: d,
		    shortMonthsParse: d,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [a viz] MMMM YYYY",
		      LLL: "D [a viz] MMMM YYYY HH:mm",
		      LLLL: "dddd, D [a viz] MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Hiziv da] LT",
		      nextDay: "[Warc\u02bchoazh da] LT",
		      nextWeek: "dddd [da] LT",
		      lastDay: "[Dec\u02bch da] LT",
		      lastWeek: "dddd [paset da] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "a-benn %s",
		      past: "%s \u02bczo",
		      s: "un nebeud segondenno\xf9",
		      ss: "%d eilenn",
		      m: "ur vunutenn",
		      mm: ee,
		      h: "un eur",
		      hh: "%d eur",
		      d: "un devezh",
		      dd: ee,
		      M: "ur miz",
		      MM: ee,
		      y: "ur bloaz",
		      yy: function (e) {
		        switch (function e(a) {
		          if (9 < a) return e(a % 10);
		          return a;
		        }(e)) {
		          case 1:
		          case 3:
		          case 4:
		          case 5:
		          case 9:
		            return e + " bloaz";

		          default:
		            return e + " vloaz";
		        }
		      }
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(a\xf1|vet)/,
		    ordinal: function (e) {
		      return e + (1 === e ? "a\xf1" : "vet");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    },
		    meridiemParse: /a.m.|g.m./,
		    isPM: function (e) {
		      return "g.m." === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "a.m." : "g.m.";
		    }
		  }), e.defineLocale("bs", {
		    months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),
		    monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota".split("_"),
		    weekdaysShort: "ned._pon._uto._sri._\u010det._pet._sub.".split("_"),
		    weekdaysMin: "ne_po_ut_sr_\u010de_pe_su".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm",
		      LLLL: "dddd, D. MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[danas u] LT",
		      nextDay: "[sutra u] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[u] [nedjelju] [u] LT";

		          case 3:
		            return "[u] [srijedu] [u] LT";

		          case 6:
		            return "[u] [subotu] [u] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[u] dddd [u] LT";
		        }
		      },
		      lastDay: "[ju\u010der u] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		          case 3:
		            return "[pro\u0161lu] dddd [u] LT";

		          case 6:
		            return "[pro\u0161le] [subote] [u] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[pro\u0161li] dddd [u] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "prije %s",
		      s: "par sekundi",
		      ss: i,
		      m: i,
		      mm: i,
		      h: i,
		      hh: i,
		      d: "dan",
		      dd: i,
		      M: "mjesec",
		      MM: i,
		      y: "godinu",
		      yy: i
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("ca", {
		    months: {
		      standalone: "gener_febrer_mar\xe7_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
		      format: "de gener_de febrer_de mar\xe7_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),
		      isFormat: /D[oD]?(\s)+MMMM/
		    },
		    monthsShort: "gen._febr._mar\xe7_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
		    weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
		    weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM [de] YYYY",
		      ll: "D MMM YYYY",
		      LLL: "D MMMM [de] YYYY [a les] H:mm",
		      lll: "D MMM YYYY, H:mm",
		      LLLL: "dddd D MMMM [de] YYYY [a les] H:mm",
		      llll: "ddd D MMM YYYY, H:mm"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
		      },
		      nextDay: function () {
		        return "[dem\xe0 a " + (1 !== this.hours() ? "les" : "la") + "] LT";
		      },
		      nextWeek: function () {
		        return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
		      },
		      lastDay: function () {
		        return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
		      },
		      lastWeek: function () {
		        return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "d'aqu\xed %s",
		      past: "fa %s",
		      s: "uns segons",
		      ss: "%d segons",
		      m: "un minut",
		      mm: "%d minuts",
		      h: "una hora",
		      hh: "%d hores",
		      d: "un dia",
		      dd: "%d dies",
		      M: "un mes",
		      MM: "%d mesos",
		      y: "un any",
		      yy: "%d anys"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/,
		    ordinal: function (e, a) {
		      return e + ("w" !== a && "W" !== a ? 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "\xe8" : "a");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var r = {
		    format: "leden_\xfanor_b\u0159ezen_duben_kv\u011bten_\u010derven_\u010dervenec_srpen_z\xe1\u0159\xed_\u0159\xedjen_listopad_prosinec".split("_"),
		    standalone: "ledna_\xfanora_b\u0159ezna_dubna_kv\u011btna_\u010dervna_\u010dervence_srpna_z\xe1\u0159\xed_\u0159\xedjna_listopadu_prosince".split("_")
		  },
		      n = "led_\xfano_b\u0159e_dub_kv\u011b_\u010dvn_\u010dvc_srp_z\xe1\u0159_\u0159\xedj_lis_pro".split("_"),
		      d = [/^led/i, /^\xfano/i, /^b\u0159e/i, /^dub/i, /^kv\u011b/i, /^(\u010dvn|\u010derven$|\u010dervna)/i, /^(\u010dvc|\u010dervenec|\u010dervence)/i, /^srp/i, /^z\xe1\u0159/i, /^\u0159\xedj/i, /^lis/i, /^pro/i],
		      m = /^(leden|\xfanor|b\u0159ezen|duben|kv\u011bten|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|z\xe1\u0159\xed|\u0159\xedjen|listopad|prosinec|led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i;

		  function o(e) {
		    return 1 < e && e < 5 && 1 != ~~(e / 10);
		  }

		  function u(e, a, _, s) {
		    var d = e + " ";

		    switch (_) {
		      case "s":
		        return a || s ? "p\xe1r sekund" : "p\xe1r sekundami";

		      case "ss":
		        return a || s ? d + (o(e) ? "sekundy" : "sekund") : d + "sekundami";

		      case "m":
		        return a ? "minuta" : s ? "minutu" : "minutou";

		      case "mm":
		        return a || s ? d + (o(e) ? "minuty" : "minut") : d + "minutami";

		      case "h":
		        return a ? "hodina" : s ? "hodinu" : "hodinou";

		      case "hh":
		        return a || s ? d + (o(e) ? "hodiny" : "hodin") : d + "hodinami";

		      case "d":
		        return a || s ? "den" : "dnem";

		      case "dd":
		        return a || s ? d + (o(e) ? "dny" : "dn\xed") : d + "dny";

		      case "M":
		        return a || s ? "m\u011bs\xedc" : "m\u011bs\xedcem";

		      case "MM":
		        return a || s ? d + (o(e) ? "m\u011bs\xedce" : "m\u011bs\xedc\u016f") : d + "m\u011bs\xedci";

		      case "y":
		        return a || s ? "rok" : "rokem";

		      case "yy":
		        return a || s ? d + (o(e) ? "roky" : "let") : d + "lety";
		    }
		  }

		  function l(e, a, _, s) {
		    e = {
		      m: ["eine Minute", "einer Minute"],
		      h: ["eine Stunde", "einer Stunde"],
		      d: ["ein Tag", "einem Tag"],
		      dd: [e + " Tage", e + " Tagen"],
		      w: ["eine Woche", "einer Woche"],
		      M: ["ein Monat", "einem Monat"],
		      MM: [e + " Monate", e + " Monaten"],
		      y: ["ein Jahr", "einem Jahr"],
		      yy: [e + " Jahre", e + " Jahren"]
		    };
		    return a ? e[_][0] : e[_][1];
		  }

		  function M(e, a, _, s) {
		    e = {
		      m: ["eine Minute", "einer Minute"],
		      h: ["eine Stunde", "einer Stunde"],
		      d: ["ein Tag", "einem Tag"],
		      dd: [e + " Tage", e + " Tagen"],
		      w: ["eine Woche", "einer Woche"],
		      M: ["ein Monat", "einem Monat"],
		      MM: [e + " Monate", e + " Monaten"],
		      y: ["ein Jahr", "einem Jahr"],
		      yy: [e + " Jahre", e + " Jahren"]
		    };
		    return a ? e[_][0] : e[_][1];
		  }

		  function L(e, a, _, s) {
		    e = {
		      m: ["eine Minute", "einer Minute"],
		      h: ["eine Stunde", "einer Stunde"],
		      d: ["ein Tag", "einem Tag"],
		      dd: [e + " Tage", e + " Tagen"],
		      w: ["eine Woche", "einer Woche"],
		      M: ["ein Monat", "einem Monat"],
		      MM: [e + " Monate", e + " Monaten"],
		      y: ["ein Jahr", "einem Jahr"],
		      yy: [e + " Jahre", e + " Jahren"]
		    };
		    return a ? e[_][0] : e[_][1];
		  }

		  e.defineLocale("cs", {
		    months: r,
		    monthsShort: n,
		    monthsRegex: m,
		    monthsShortRegex: m,
		    monthsStrictRegex: /^(leden|ledna|\xfanora|\xfanor|b\u0159ezen|b\u0159ezna|duben|dubna|kv\u011bten|kv\u011btna|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|srpna|z\xe1\u0159\xed|\u0159\xedjen|\u0159\xedjna|listopadu|listopad|prosinec|prosince)/i,
		    monthsShortStrictRegex: /^(led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i,
		    monthsParse: d,
		    longMonthsParse: d,
		    shortMonthsParse: d,
		    weekdays: "ned\u011ble_pond\u011bl\xed_\xfater\xfd_st\u0159eda_\u010dtvrtek_p\xe1tek_sobota".split("_"),
		    weekdaysShort: "ne_po_\xfat_st_\u010dt_p\xe1_so".split("_"),
		    weekdaysMin: "ne_po_\xfat_st_\u010dt_p\xe1_so".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm",
		      LLLL: "dddd D. MMMM YYYY H:mm",
		      l: "D. M. YYYY"
		    },
		    calendar: {
		      sameDay: "[dnes v] LT",
		      nextDay: "[z\xedtra v] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[v ned\u011bli v] LT";

		          case 1:
		          case 2:
		            return "[v] dddd [v] LT";

		          case 3:
		            return "[ve st\u0159edu v] LT";

		          case 4:
		            return "[ve \u010dtvrtek v] LT";

		          case 5:
		            return "[v p\xe1tek v] LT";

		          case 6:
		            return "[v sobotu v] LT";
		        }
		      },
		      lastDay: "[v\u010dera v] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[minulou ned\u011bli v] LT";

		          case 1:
		          case 2:
		            return "[minul\xe9] dddd [v] LT";

		          case 3:
		            return "[minulou st\u0159edu v] LT";

		          case 4:
		          case 5:
		            return "[minul\xfd] dddd [v] LT";

		          case 6:
		            return "[minulou sobotu v] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "p\u0159ed %s",
		      s: u,
		      ss: u,
		      m: u,
		      mm: u,
		      h: u,
		      hh: u,
		      d: u,
		      dd: u,
		      M: u,
		      MM: u,
		      y: u,
		      yy: u
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("cv", {
		    months: "\u043a\u04d1\u0440\u043b\u0430\u0447_\u043d\u0430\u0440\u04d1\u0441_\u043f\u0443\u0448_\u0430\u043a\u0430_\u043c\u0430\u0439_\u04ab\u04d7\u0440\u0442\u043c\u0435_\u0443\u0442\u04d1_\u04ab\u0443\u0440\u043b\u0430_\u0430\u0432\u04d1\u043d_\u044e\u043f\u0430_\u0447\u04f3\u043a_\u0440\u0430\u0448\u0442\u0430\u0432".split("_"),
		    monthsShort: "\u043a\u04d1\u0440_\u043d\u0430\u0440_\u043f\u0443\u0448_\u0430\u043a\u0430_\u043c\u0430\u0439_\u04ab\u04d7\u0440_\u0443\u0442\u04d1_\u04ab\u0443\u0440_\u0430\u0432\u043d_\u044e\u043f\u0430_\u0447\u04f3\u043a_\u0440\u0430\u0448".split("_"),
		    weekdays: "\u0432\u044b\u0440\u0441\u0430\u0440\u043d\u0438\u043a\u0443\u043d_\u0442\u0443\u043d\u0442\u0438\u043a\u0443\u043d_\u044b\u0442\u043b\u0430\u0440\u0438\u043a\u0443\u043d_\u044e\u043d\u043a\u0443\u043d_\u043a\u04d7\u04ab\u043d\u0435\u0440\u043d\u0438\u043a\u0443\u043d_\u044d\u0440\u043d\u0435\u043a\u0443\u043d_\u0448\u04d1\u043c\u0430\u0442\u043a\u0443\u043d".split("_"),
		    weekdaysShort: "\u0432\u044b\u0440_\u0442\u0443\u043d_\u044b\u0442\u043b_\u044e\u043d_\u043a\u04d7\u04ab_\u044d\u0440\u043d_\u0448\u04d1\u043c".split("_"),
		    weekdaysMin: "\u0432\u0440_\u0442\u043d_\u044b\u0442_\u044e\u043d_\u043a\u04ab_\u044d\u0440_\u0448\u043c".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD-MM-YYYY",
		      LL: "YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7]",
		      LLL: "YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7], HH:mm",
		      LLLL: "dddd, YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7], HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u041f\u0430\u044f\u043d] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",
		      nextDay: "[\u042b\u0440\u0430\u043d] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",
		      lastDay: "[\u04d6\u043d\u0435\u0440] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",
		      nextWeek: "[\u04aa\u0438\u0442\u0435\u0441] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",
		      lastWeek: "[\u0418\u0440\u0442\u043d\u04d7] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: function (e) {
		        return e + (/\u0441\u0435\u0445\u0435\u0442$/i.exec(e) ? "\u0440\u0435\u043d" : /\u04ab\u0443\u043b$/i.exec(e) ? "\u0442\u0430\u043d" : "\u0440\u0430\u043d");
		      },
		      past: "%s \u043a\u0430\u044f\u043b\u043b\u0430",
		      s: "\u043f\u04d7\u0440-\u0438\u043a \u04ab\u0435\u043a\u043a\u0443\u043d\u0442",
		      ss: "%d \u04ab\u0435\u043a\u043a\u0443\u043d\u0442",
		      m: "\u043f\u04d7\u0440 \u043c\u0438\u043d\u0443\u0442",
		      mm: "%d \u043c\u0438\u043d\u0443\u0442",
		      h: "\u043f\u04d7\u0440 \u0441\u0435\u0445\u0435\u0442",
		      hh: "%d \u0441\u0435\u0445\u0435\u0442",
		      d: "\u043f\u04d7\u0440 \u043a\u0443\u043d",
		      dd: "%d \u043a\u0443\u043d",
		      M: "\u043f\u04d7\u0440 \u0443\u0439\u04d1\u0445",
		      MM: "%d \u0443\u0439\u04d1\u0445",
		      y: "\u043f\u04d7\u0440 \u04ab\u0443\u043b",
		      yy: "%d \u04ab\u0443\u043b"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-\u043c\u04d7\u0448/,
		    ordinal: "%d-\u043c\u04d7\u0448",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("cy", {
		    months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
		    monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
		    weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
		    weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
		    weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Heddiw am] LT",
		      nextDay: "[Yfory am] LT",
		      nextWeek: "dddd [am] LT",
		      lastDay: "[Ddoe am] LT",
		      lastWeek: "dddd [diwethaf am] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "mewn %s",
		      past: "%s yn \xf4l",
		      s: "ychydig eiliadau",
		      ss: "%d eiliad",
		      m: "munud",
		      mm: "%d munud",
		      h: "awr",
		      hh: "%d awr",
		      d: "diwrnod",
		      dd: "%d diwrnod",
		      M: "mis",
		      MM: "%d mis",
		      y: "blwyddyn",
		      yy: "%d flynedd"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
		    ordinal: function (e) {
		      var a = "";
		      return 20 < e ? a = 40 === e || 50 === e || 60 === e || 80 === e || 100 === e ? "fed" : "ain" : 0 < e && (a = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"][e]), e + a;
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("da", {
		    months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
		    monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
		    weekdays: "s\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag".split("_"),
		    weekdaysShort: "s\xf8n_man_tir_ons_tor_fre_l\xf8r".split("_"),
		    weekdaysMin: "s\xf8_ma_ti_on_to_fr_l\xf8".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY HH:mm",
		      LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm"
		    },
		    calendar: {
		      sameDay: "[i dag kl.] LT",
		      nextDay: "[i morgen kl.] LT",
		      nextWeek: "p\xe5 dddd [kl.] LT",
		      lastDay: "[i g\xe5r kl.] LT",
		      lastWeek: "[i] dddd[s kl.] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "om %s",
		      past: "%s siden",
		      s: "f\xe5 sekunder",
		      ss: "%d sekunder",
		      m: "et minut",
		      mm: "%d minutter",
		      h: "en time",
		      hh: "%d timer",
		      d: "en dag",
		      dd: "%d dage",
		      M: "en m\xe5ned",
		      MM: "%d m\xe5neder",
		      y: "et \xe5r",
		      yy: "%d \xe5r"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("de-at", {
		    months: "J\xe4nner_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
		    monthsShort: "J\xe4n._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
		    weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
		    weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY HH:mm",
		      LLLL: "dddd, D. MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[heute um] LT [Uhr]",
		      sameElse: "L",
		      nextDay: "[morgen um] LT [Uhr]",
		      nextWeek: "dddd [um] LT [Uhr]",
		      lastDay: "[gestern um] LT [Uhr]",
		      lastWeek: "[letzten] dddd [um] LT [Uhr]"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "vor %s",
		      s: "ein paar Sekunden",
		      ss: "%d Sekunden",
		      m: l,
		      mm: "%d Minuten",
		      h: l,
		      hh: "%d Stunden",
		      d: l,
		      dd: l,
		      w: l,
		      ww: "%d Wochen",
		      M: l,
		      MM: l,
		      y: l,
		      yy: l
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("de-ch", {
		    months: "Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
		    monthsShort: "Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
		    weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
		    weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY HH:mm",
		      LLLL: "dddd, D. MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[heute um] LT [Uhr]",
		      sameElse: "L",
		      nextDay: "[morgen um] LT [Uhr]",
		      nextWeek: "dddd [um] LT [Uhr]",
		      lastDay: "[gestern um] LT [Uhr]",
		      lastWeek: "[letzten] dddd [um] LT [Uhr]"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "vor %s",
		      s: "ein paar Sekunden",
		      ss: "%d Sekunden",
		      m: M,
		      mm: "%d Minuten",
		      h: M,
		      hh: "%d Stunden",
		      d: M,
		      dd: M,
		      w: M,
		      ww: "%d Wochen",
		      M: M,
		      MM: M,
		      y: M,
		      yy: M
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("de", {
		    months: "Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
		    monthsShort: "Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
		    weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
		    weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY HH:mm",
		      LLLL: "dddd, D. MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[heute um] LT [Uhr]",
		      sameElse: "L",
		      nextDay: "[morgen um] LT [Uhr]",
		      nextWeek: "dddd [um] LT [Uhr]",
		      lastDay: "[gestern um] LT [Uhr]",
		      lastWeek: "[letzten] dddd [um] LT [Uhr]"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "vor %s",
		      s: "ein paar Sekunden",
		      ss: "%d Sekunden",
		      m: L,
		      mm: "%d Minuten",
		      h: L,
		      hh: "%d Stunden",
		      d: L,
		      dd: L,
		      w: L,
		      ww: "%d Wochen",
		      M: L,
		      MM: L,
		      y: L,
		      yy: L
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  r = ["\u0796\u07ac\u0782\u07aa\u0787\u07a6\u0783\u07a9", "\u078a\u07ac\u0784\u07b0\u0783\u07aa\u0787\u07a6\u0783\u07a9", "\u0789\u07a7\u0783\u07a8\u0797\u07aa", "\u0787\u07ad\u0795\u07b0\u0783\u07a9\u078d\u07aa", "\u0789\u07ad", "\u0796\u07ab\u0782\u07b0", "\u0796\u07aa\u078d\u07a6\u0787\u07a8", "\u0787\u07af\u078e\u07a6\u0790\u07b0\u0793\u07aa", "\u0790\u07ac\u0795\u07b0\u0793\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa", "\u0787\u07ae\u0786\u07b0\u0793\u07af\u0784\u07a6\u0783\u07aa", "\u0782\u07ae\u0788\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa", "\u0791\u07a8\u0790\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa"], n = ["\u0787\u07a7\u078b\u07a8\u0787\u07b0\u078c\u07a6", "\u0780\u07af\u0789\u07a6", "\u0787\u07a6\u0782\u07b0\u078e\u07a7\u0783\u07a6", "\u0784\u07aa\u078b\u07a6", "\u0784\u07aa\u0783\u07a7\u0790\u07b0\u078a\u07a6\u078c\u07a8", "\u0780\u07aa\u0786\u07aa\u0783\u07aa", "\u0780\u07ae\u0782\u07a8\u0780\u07a8\u0783\u07aa"];
		  e.defineLocale("dv", {
		    months: r,
		    monthsShort: r,
		    weekdays: n,
		    weekdaysShort: n,
		    weekdaysMin: "\u0787\u07a7\u078b\u07a8_\u0780\u07af\u0789\u07a6_\u0787\u07a6\u0782\u07b0_\u0784\u07aa\u078b\u07a6_\u0784\u07aa\u0783\u07a7_\u0780\u07aa\u0786\u07aa_\u0780\u07ae\u0782\u07a8".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "D/M/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0789\u0786|\u0789\u078a/,
		    isPM: function (e) {
		      return "\u0789\u078a" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0789\u0786" : "\u0789\u078a";
		    },
		    calendar: {
		      sameDay: "[\u0789\u07a8\u0787\u07a6\u078b\u07aa] LT",
		      nextDay: "[\u0789\u07a7\u078b\u07a6\u0789\u07a7] LT",
		      nextWeek: "dddd LT",
		      lastDay: "[\u0787\u07a8\u0787\u07b0\u0794\u07ac] LT",
		      lastWeek: "[\u078a\u07a7\u0787\u07a8\u078c\u07aa\u0788\u07a8] dddd LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u078c\u07ac\u0783\u07ad\u078e\u07a6\u0787\u07a8 %s",
		      past: "\u0786\u07aa\u0783\u07a8\u0782\u07b0 %s",
		      s: "\u0790\u07a8\u0786\u07aa\u0782\u07b0\u078c\u07aa\u0786\u07ae\u0785\u07ac\u0787\u07b0",
		      ss: "d% \u0790\u07a8\u0786\u07aa\u0782\u07b0\u078c\u07aa",
		      m: "\u0789\u07a8\u0782\u07a8\u0793\u07ac\u0787\u07b0",
		      mm: "\u0789\u07a8\u0782\u07a8\u0793\u07aa %d",
		      h: "\u078e\u07a6\u0791\u07a8\u0787\u07a8\u0783\u07ac\u0787\u07b0",
		      hh: "\u078e\u07a6\u0791\u07a8\u0787\u07a8\u0783\u07aa %d",
		      d: "\u078b\u07aa\u0788\u07a6\u0780\u07ac\u0787\u07b0",
		      dd: "\u078b\u07aa\u0788\u07a6\u0790\u07b0 %d",
		      M: "\u0789\u07a6\u0780\u07ac\u0787\u07b0",
		      MM: "\u0789\u07a6\u0790\u07b0 %d",
		      y: "\u0787\u07a6\u0780\u07a6\u0783\u07ac\u0787\u07b0",
		      yy: "\u0787\u07a6\u0780\u07a6\u0783\u07aa %d"
		    },
		    preparse: function (e) {
		      return e.replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 7,
		      doy: 12
		    }
		  }), e.defineLocale("el", {
		    monthsNominativeEl: "\u0399\u03b1\u03bd\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2_\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2_\u039c\u03ac\u03c1\u03c4\u03b9\u03bf\u03c2_\u0391\u03c0\u03c1\u03af\u03bb\u03b9\u03bf\u03c2_\u039c\u03ac\u03b9\u03bf\u03c2_\u0399\u03bf\u03cd\u03bd\u03b9\u03bf\u03c2_\u0399\u03bf\u03cd\u03bb\u03b9\u03bf\u03c2_\u0391\u03cd\u03b3\u03bf\u03c5\u03c3\u03c4\u03bf\u03c2_\u03a3\u03b5\u03c0\u03c4\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2_\u039f\u03ba\u03c4\u03ce\u03b2\u03c1\u03b9\u03bf\u03c2_\u039d\u03bf\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2_\u0394\u03b5\u03ba\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2".split("_"),
		    monthsGenitiveEl: "\u0399\u03b1\u03bd\u03bf\u03c5\u03b1\u03c1\u03af\u03bf\u03c5_\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03b1\u03c1\u03af\u03bf\u03c5_\u039c\u03b1\u03c1\u03c4\u03af\u03bf\u03c5_\u0391\u03c0\u03c1\u03b9\u03bb\u03af\u03bf\u03c5_\u039c\u03b1\u0390\u03bf\u03c5_\u0399\u03bf\u03c5\u03bd\u03af\u03bf\u03c5_\u0399\u03bf\u03c5\u03bb\u03af\u03bf\u03c5_\u0391\u03c5\u03b3\u03bf\u03cd\u03c3\u03c4\u03bf\u03c5_\u03a3\u03b5\u03c0\u03c4\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5_\u039f\u03ba\u03c4\u03c9\u03b2\u03c1\u03af\u03bf\u03c5_\u039d\u03bf\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5_\u0394\u03b5\u03ba\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5".split("_"),
		    months: function (e, a) {
		      return e ? ("string" == typeof a && /D/.test(a.substring(0, a.indexOf("MMMM"))) ? this._monthsGenitiveEl : this._monthsNominativeEl)[e.month()] : this._monthsNominativeEl;
		    },
		    monthsShort: "\u0399\u03b1\u03bd_\u03a6\u03b5\u03b2_\u039c\u03b1\u03c1_\u0391\u03c0\u03c1_\u039c\u03b1\u03ca_\u0399\u03bf\u03c5\u03bd_\u0399\u03bf\u03c5\u03bb_\u0391\u03c5\u03b3_\u03a3\u03b5\u03c0_\u039f\u03ba\u03c4_\u039d\u03bf\u03b5_\u0394\u03b5\u03ba".split("_"),
		    weekdays: "\u039a\u03c5\u03c1\u03b9\u03b1\u03ba\u03ae_\u0394\u03b5\u03c5\u03c4\u03ad\u03c1\u03b1_\u03a4\u03c1\u03af\u03c4\u03b7_\u03a4\u03b5\u03c4\u03ac\u03c1\u03c4\u03b7_\u03a0\u03ad\u03bc\u03c0\u03c4\u03b7_\u03a0\u03b1\u03c1\u03b1\u03c3\u03ba\u03b5\u03c5\u03ae_\u03a3\u03ac\u03b2\u03b2\u03b1\u03c4\u03bf".split("_"),
		    weekdaysShort: "\u039a\u03c5\u03c1_\u0394\u03b5\u03c5_\u03a4\u03c1\u03b9_\u03a4\u03b5\u03c4_\u03a0\u03b5\u03bc_\u03a0\u03b1\u03c1_\u03a3\u03b1\u03b2".split("_"),
		    weekdaysMin: "\u039a\u03c5_\u0394\u03b5_\u03a4\u03c1_\u03a4\u03b5_\u03a0\u03b5_\u03a0\u03b1_\u03a3\u03b1".split("_"),
		    meridiem: function (e, a, _) {
		      return 11 < e ? _ ? "\u03bc\u03bc" : "\u039c\u039c" : _ ? "\u03c0\u03bc" : "\u03a0\u039c";
		    },
		    isPM: function (e) {
		      return "\u03bc" === (e + "").toLowerCase()[0];
		    },
		    meridiemParse: /[\u03a0\u039c]\.?\u039c?\.?/i,
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY h:mm A",
		      LLLL: "dddd, D MMMM YYYY h:mm A"
		    },
		    calendarEl: {
		      sameDay: "[\u03a3\u03ae\u03bc\u03b5\u03c1\u03b1 {}] LT",
		      nextDay: "[\u0391\u03cd\u03c1\u03b9\u03bf {}] LT",
		      nextWeek: "dddd [{}] LT",
		      lastDay: "[\u03a7\u03b8\u03b5\u03c2 {}] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 6:
		            return "[\u03c4\u03bf \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf] dddd [{}] LT";

		          default:
		            return "[\u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03b7] dddd [{}] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    calendar: function (e, a) {
		      var _,
		          e = this._calendarEl[e],
		          s = a && a.hours();

		      return _ = e, (e = "undefined" != typeof Function && _ instanceof Function || "[object Function]" === Object.prototype.toString.call(_) ? e.apply(a) : e).replace("{}", s % 12 == 1 ? "\u03c3\u03c4\u03b7" : "\u03c3\u03c4\u03b9\u03c2");
		    },
		    relativeTime: {
		      future: "\u03c3\u03b5 %s",
		      past: "%s \u03c0\u03c1\u03b9\u03bd",
		      s: "\u03bb\u03af\u03b3\u03b1 \u03b4\u03b5\u03c5\u03c4\u03b5\u03c1\u03cc\u03bb\u03b5\u03c0\u03c4\u03b1",
		      ss: "%d \u03b4\u03b5\u03c5\u03c4\u03b5\u03c1\u03cc\u03bb\u03b5\u03c0\u03c4\u03b1",
		      m: "\u03ad\u03bd\u03b1 \u03bb\u03b5\u03c0\u03c4\u03cc",
		      mm: "%d \u03bb\u03b5\u03c0\u03c4\u03ac",
		      h: "\u03bc\u03af\u03b1 \u03ce\u03c1\u03b1",
		      hh: "%d \u03ce\u03c1\u03b5\u03c2",
		      d: "\u03bc\u03af\u03b1 \u03bc\u03ad\u03c1\u03b1",
		      dd: "%d \u03bc\u03ad\u03c1\u03b5\u03c2",
		      M: "\u03ad\u03bd\u03b1\u03c2 \u03bc\u03ae\u03bd\u03b1\u03c2",
		      MM: "%d \u03bc\u03ae\u03bd\u03b5\u03c2",
		      y: "\u03ad\u03bd\u03b1\u03c2 \u03c7\u03c1\u03cc\u03bd\u03bf\u03c2",
		      yy: "%d \u03c7\u03c1\u03cc\u03bd\u03b9\u03b1"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\u03b7/,
		    ordinal: "%d\u03b7",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("en-au", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY h:mm A",
		      LLLL: "dddd, D MMMM YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 0,
		      doy: 4
		    }
		  }), e.defineLocale("en-ca", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "YYYY-MM-DD",
		      LL: "MMMM D, YYYY",
		      LLL: "MMMM D, YYYY h:mm A",
		      LLLL: "dddd, MMMM D, YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    }
		  }), e.defineLocale("en-gb", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("en-ie", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("en-il", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    }
		  }), e.defineLocale("en-in", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY h:mm A",
		      LLLL: "dddd, D MMMM YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("en-nz", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY h:mm A",
		      LLLL: "dddd, D MMMM YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("en-sg", {
		    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
		    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		    weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
		    weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Today at] LT",
		      nextDay: "[Tomorrow at] LT",
		      nextWeek: "dddd [at] LT",
		      lastDay: "[Yesterday at] LT",
		      lastWeek: "[Last] dddd [at] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "in %s",
		      past: "%s ago",
		      s: "a few seconds",
		      ss: "%d seconds",
		      m: "a minute",
		      mm: "%d minutes",
		      h: "an hour",
		      hh: "%d hours",
		      d: "a day",
		      dd: "%d days",
		      M: "a month",
		      MM: "%d months",
		      y: "a year",
		      yy: "%d years"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("eo", {
		    months: "januaro_februaro_marto_aprilo_majo_junio_julio_a\u016dgusto_septembro_oktobro_novembro_decembro".split("_"),
		    monthsShort: "jan_feb_mart_apr_maj_jun_jul_a\u016dg_sept_okt_nov_dec".split("_"),
		    weekdays: "diman\u0109o_lundo_mardo_merkredo_\u0135a\u016ddo_vendredo_sabato".split("_"),
		    weekdaysShort: "dim_lun_mard_merk_\u0135a\u016d_ven_sab".split("_"),
		    weekdaysMin: "di_lu_ma_me_\u0135a_ve_sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "[la] D[-an de] MMMM, YYYY",
		      LLL: "[la] D[-an de] MMMM, YYYY HH:mm",
		      LLLL: "dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",
		      llll: "ddd, [la] D[-an de] MMM, YYYY HH:mm"
		    },
		    meridiemParse: /[ap]\.t\.m/i,
		    isPM: function (e) {
		      return "p" === e.charAt(0).toLowerCase();
		    },
		    meridiem: function (e, a, _) {
		      return 11 < e ? _ ? "p.t.m." : "P.T.M." : _ ? "a.t.m." : "A.T.M.";
		    },
		    calendar: {
		      sameDay: "[Hodia\u016d je] LT",
		      nextDay: "[Morga\u016d je] LT",
		      nextWeek: "dddd[n je] LT",
		      lastDay: "[Hiera\u016d je] LT",
		      lastWeek: "[pasintan] dddd[n je] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "post %s",
		      past: "anta\u016d %s",
		      s: "kelkaj sekundoj",
		      ss: "%d sekundoj",
		      m: "unu minuto",
		      mm: "%d minutoj",
		      h: "unu horo",
		      hh: "%d horoj",
		      d: "unu tago",
		      dd: "%d tagoj",
		      M: "unu monato",
		      MM: "%d monatoj",
		      y: "unu jaro",
		      yy: "%d jaroj"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}a/,
		    ordinal: "%da",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  });

		  var ae = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
		      _e = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
		      m = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
		      d = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		      se = (e.defineLocale("es-do", {
		    months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? _e : ae)[e.month()] : ae;
		    },
		    monthsRegex: d,
		    monthsShortRegex: d,
		    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
		    monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		    monthsParse: m,
		    longMonthsParse: m,
		    shortMonthsParse: m,
		    weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),
		    weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),
		    weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY h:mm A",
		      LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextDay: function () {
		        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextWeek: function () {
		        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastDay: function () {
		        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastWeek: function () {
		        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "en %s",
		      past: "hace %s",
		      s: "unos segundos",
		      ss: "%d segundos",
		      m: "un minuto",
		      mm: "%d minutos",
		      h: "una hora",
		      hh: "%d horas",
		      d: "un d\xeda",
		      dd: "%d d\xedas",
		      w: "una semana",
		      ww: "%d semanas",
		      M: "un mes",
		      MM: "%d meses",
		      y: "un a\xf1o",
		      yy: "%d a\xf1os"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),
		      de = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
		      r = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
		      n = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		      te = (e.defineLocale("es-mx", {
		    months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? de : se)[e.month()] : se;
		    },
		    monthsRegex: n,
		    monthsShortRegex: n,
		    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
		    monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		    monthsParse: r,
		    longMonthsParse: r,
		    shortMonthsParse: r,
		    weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),
		    weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),
		    weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY H:mm",
		      LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextDay: function () {
		        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextWeek: function () {
		        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastDay: function () {
		        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastWeek: function () {
		        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "en %s",
		      past: "hace %s",
		      s: "unos segundos",
		      ss: "%d segundos",
		      m: "un minuto",
		      mm: "%d minutos",
		      h: "una hora",
		      hh: "%d horas",
		      d: "un d\xeda",
		      dd: "%d d\xedas",
		      w: "una semana",
		      ww: "%d semanas",
		      M: "un mes",
		      MM: "%d meses",
		      y: "un a\xf1o",
		      yy: "%d a\xf1os"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 0,
		      doy: 4
		    },
		    invalidDate: "Fecha inv\xe1lida"
		  }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),
		      ne = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
		      d = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
		      m = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		      re = (e.defineLocale("es-us", {
		    months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? ne : te)[e.month()] : te;
		    },
		    monthsRegex: m,
		    monthsShortRegex: m,
		    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
		    monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		    monthsParse: d,
		    longMonthsParse: d,
		    shortMonthsParse: d,
		    weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),
		    weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),
		    weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "MM/DD/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY h:mm A",
		      LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextDay: function () {
		        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextWeek: function () {
		        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastDay: function () {
		        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastWeek: function () {
		        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "en %s",
		      past: "hace %s",
		      s: "unos segundos",
		      ss: "%d segundos",
		      m: "un minuto",
		      mm: "%d minutos",
		      h: "una hora",
		      hh: "%d horas",
		      d: "un d\xeda",
		      dd: "%d d\xedas",
		      w: "una semana",
		      ww: "%d semanas",
		      M: "un mes",
		      MM: "%d meses",
		      y: "un a\xf1o",
		      yy: "%d a\xf1os"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),
		      ie = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
		      n = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
		      r = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

		  function Y(e, a, _, s) {
		    e = {
		      s: ["m\xf5ne sekundi", "m\xf5ni sekund", "paar sekundit"],
		      ss: [e + "sekundi", e + "sekundit"],
		      m: ["\xfche minuti", "\xfcks minut"],
		      mm: [e + " minuti", e + " minutit"],
		      h: ["\xfche tunni", "tund aega", "\xfcks tund"],
		      hh: [e + " tunni", e + " tundi"],
		      d: ["\xfche p\xe4eva", "\xfcks p\xe4ev"],
		      M: ["kuu aja", "kuu aega", "\xfcks kuu"],
		      MM: [e + " kuu", e + " kuud"],
		      y: ["\xfche aasta", "aasta", "\xfcks aasta"],
		      yy: [e + " aasta", e + " aastat"]
		    };
		    return a ? e[_][2] || e[_][1] : s ? e[_][0] : e[_][1];
		  }

		  e.defineLocale("es", {
		    months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? ie : re)[e.month()] : re;
		    },
		    monthsRegex: r,
		    monthsShortRegex: r,
		    monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
		    monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
		    monthsParse: n,
		    longMonthsParse: n,
		    shortMonthsParse: n,
		    weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),
		    weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),
		    weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY H:mm",
		      LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextDay: function () {
		        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      nextWeek: function () {
		        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastDay: function () {
		        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      lastWeek: function () {
		        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "en %s",
		      past: "hace %s",
		      s: "unos segundos",
		      ss: "%d segundos",
		      m: "un minuto",
		      mm: "%d minutos",
		      h: "una hora",
		      hh: "%d horas",
		      d: "un d\xeda",
		      dd: "%d d\xedas",
		      w: "una semana",
		      ww: "%d semanas",
		      M: "un mes",
		      MM: "%d meses",
		      y: "un a\xf1o",
		      yy: "%d a\xf1os"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    },
		    invalidDate: "Fecha inv\xe1lida"
		  }), e.defineLocale("et", {
		    months: "jaanuar_veebruar_m\xe4rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
		    monthsShort: "jaan_veebr_m\xe4rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
		    weekdays: "p\xfchap\xe4ev_esmasp\xe4ev_teisip\xe4ev_kolmap\xe4ev_neljap\xe4ev_reede_laup\xe4ev".split("_"),
		    weekdaysShort: "P_E_T_K_N_R_L".split("_"),
		    weekdaysMin: "P_E_T_K_N_R_L".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm",
		      LLLL: "dddd, D. MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[T\xe4na,] LT",
		      nextDay: "[Homme,] LT",
		      nextWeek: "[J\xe4rgmine] dddd LT",
		      lastDay: "[Eile,] LT",
		      lastWeek: "[Eelmine] dddd LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s p\xe4rast",
		      past: "%s tagasi",
		      s: Y,
		      ss: Y,
		      m: Y,
		      mm: Y,
		      h: Y,
		      hh: Y,
		      d: Y,
		      dd: "%d p\xe4eva",
		      M: Y,
		      MM: Y,
		      y: Y,
		      yy: Y
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("eu", {
		    months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
		    monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
		    weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
		    weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "YYYY[ko] MMMM[ren] D[a]",
		      LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
		      LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
		      l: "YYYY-M-D",
		      ll: "YYYY[ko] MMM D[a]",
		      lll: "YYYY[ko] MMM D[a] HH:mm",
		      llll: "ddd, YYYY[ko] MMM D[a] HH:mm"
		    },
		    calendar: {
		      sameDay: "[gaur] LT[etan]",
		      nextDay: "[bihar] LT[etan]",
		      nextWeek: "dddd LT[etan]",
		      lastDay: "[atzo] LT[etan]",
		      lastWeek: "[aurreko] dddd LT[etan]",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s barru",
		      past: "duela %s",
		      s: "segundo batzuk",
		      ss: "%d segundo",
		      m: "minutu bat",
		      mm: "%d minutu",
		      h: "ordu bat",
		      hh: "%d ordu",
		      d: "egun bat",
		      dd: "%d egun",
		      M: "hilabete bat",
		      MM: "%d hilabete",
		      y: "urte bat",
		      yy: "%d urte"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  });
		  var me = {
		    1: "\u06f1",
		    2: "\u06f2",
		    3: "\u06f3",
		    4: "\u06f4",
		    5: "\u06f5",
		    6: "\u06f6",
		    7: "\u06f7",
		    8: "\u06f8",
		    9: "\u06f9",
		    0: "\u06f0"
		  },
		      oe = {
		    "\u06f1": "1",
		    "\u06f2": "2",
		    "\u06f3": "3",
		    "\u06f4": "4",
		    "\u06f5": "5",
		    "\u06f6": "6",
		    "\u06f7": "7",
		    "\u06f8": "8",
		    "\u06f9": "9",
		    "\u06f0": "0"
		  },
		      ue = (e.defineLocale("fa", {
		    months: "\u0698\u0627\u0646\u0648\u06cc\u0647_\u0641\u0648\u0631\u06cc\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06cc\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06cc\u0647_\u0627\u0648\u062a_\u0633\u067e\u062a\u0627\u0645\u0628\u0631_\u0627\u06a9\u062a\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062f\u0633\u0627\u0645\u0628\u0631".split("_"),
		    monthsShort: "\u0698\u0627\u0646\u0648\u06cc\u0647_\u0641\u0648\u0631\u06cc\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06cc\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06cc\u0647_\u0627\u0648\u062a_\u0633\u067e\u062a\u0627\u0645\u0628\u0631_\u0627\u06a9\u062a\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062f\u0633\u0627\u0645\u0628\u0631".split("_"),
		    weekdays: "\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647_\u062f\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200c\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647_\u062c\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_"),
		    weekdaysShort: "\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647_\u062f\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200c\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647_\u062c\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_"),
		    weekdaysMin: "\u06cc_\u062f_\u0633_\u0686_\u067e_\u062c_\u0634".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631|\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/,
		    isPM: function (e) {
		      return /\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631" : "\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631";
		    },
		    calendar: {
		      sameDay: "[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062a] LT",
		      nextDay: "[\u0641\u0631\u062f\u0627 \u0633\u0627\u0639\u062a] LT",
		      nextWeek: "dddd [\u0633\u0627\u0639\u062a] LT",
		      lastDay: "[\u062f\u06cc\u0631\u0648\u0632 \u0633\u0627\u0639\u062a] LT",
		      lastWeek: "dddd [\u067e\u06cc\u0634] [\u0633\u0627\u0639\u062a] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u062f\u0631 %s",
		      past: "%s \u067e\u06cc\u0634",
		      s: "\u0686\u0646\u062f \u062b\u0627\u0646\u06cc\u0647",
		      ss: "%d \u062b\u0627\u0646\u06cc\u0647",
		      m: "\u06cc\u06a9 \u062f\u0642\u06cc\u0642\u0647",
		      mm: "%d \u062f\u0642\u06cc\u0642\u0647",
		      h: "\u06cc\u06a9 \u0633\u0627\u0639\u062a",
		      hh: "%d \u0633\u0627\u0639\u062a",
		      d: "\u06cc\u06a9 \u0631\u0648\u0632",
		      dd: "%d \u0631\u0648\u0632",
		      M: "\u06cc\u06a9 \u0645\u0627\u0647",
		      MM: "%d \u0645\u0627\u0647",
		      y: "\u06cc\u06a9 \u0633\u0627\u0644",
		      yy: "%d \u0633\u0627\u0644"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u06f0-\u06f9]/g, function (e) {
		        return oe[e];
		      }).replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return me[e];
		      }).replace(/,/g, "\u060c");
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\u0645/,
		    ordinal: "%d\u0645",
		    week: {
		      dow: 6,
		      doy: 12
		    }
		  }), "nolla yksi kaksi kolme nelj\xe4 viisi kuusi seitsem\xe4n kahdeksan yhdeks\xe4n".split(" ")),
		      le = ["nolla", "yhden", "kahden", "kolmen", "nelj\xe4n", "viiden", "kuuden", ue[7], ue[8], ue[9]];

		  function h(e, a, _, s) {
		    var d = "";

		    switch (_) {
		      case "s":
		        return s ? "muutaman sekunnin" : "muutama sekunti";

		      case "ss":
		        d = s ? "sekunnin" : "sekuntia";
		        break;

		      case "m":
		        return s ? "minuutin" : "minuutti";

		      case "mm":
		        d = s ? "minuutin" : "minuuttia";
		        break;

		      case "h":
		        return s ? "tunnin" : "tunti";

		      case "hh":
		        d = s ? "tunnin" : "tuntia";
		        break;

		      case "d":
		        return s ? "p\xe4iv\xe4n" : "p\xe4iv\xe4";

		      case "dd":
		        d = s ? "p\xe4iv\xe4n" : "p\xe4iv\xe4\xe4";
		        break;

		      case "M":
		        return s ? "kuukauden" : "kuukausi";

		      case "MM":
		        d = s ? "kuukauden" : "kuukautta";
		        break;

		      case "y":
		        return s ? "vuoden" : "vuosi";

		      case "yy":
		        d = s ? "vuoden" : "vuotta";
		        break;
		    }

		    return _ = s, d = ((e = e) < 10 ? (_ ? le : ue)[e] : e) + " " + d;
		  }

		  e.defineLocale("fi", {
		    months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes\xe4kuu_hein\xe4kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
		    monthsShort: "tammi_helmi_maalis_huhti_touko_kes\xe4_hein\xe4_elo_syys_loka_marras_joulu".split("_"),
		    weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
		    weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
		    weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
		    longDateFormat: {
		      LT: "HH.mm",
		      LTS: "HH.mm.ss",
		      L: "DD.MM.YYYY",
		      LL: "Do MMMM[ta] YYYY",
		      LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
		      LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
		      l: "D.M.YYYY",
		      ll: "Do MMM YYYY",
		      lll: "Do MMM YYYY, [klo] HH.mm",
		      llll: "ddd, Do MMM YYYY, [klo] HH.mm"
		    },
		    calendar: {
		      sameDay: "[t\xe4n\xe4\xe4n] [klo] LT",
		      nextDay: "[huomenna] [klo] LT",
		      nextWeek: "dddd [klo] LT",
		      lastDay: "[eilen] [klo] LT",
		      lastWeek: "[viime] dddd[na] [klo] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s p\xe4\xe4st\xe4",
		      past: "%s sitten",
		      s: h,
		      ss: h,
		      m: h,
		      mm: h,
		      h: h,
		      hh: h,
		      d: h,
		      dd: h,
		      M: h,
		      MM: h,
		      y: h,
		      yy: h
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("fil", {
		    months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
		    monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
		    weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
		    weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
		    weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "MM/D/YYYY",
		      LL: "MMMM D, YYYY",
		      LLL: "MMMM D, YYYY HH:mm",
		      LLLL: "dddd, MMMM DD, YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "LT [ngayong araw]",
		      nextDay: "[Bukas ng] LT",
		      nextWeek: "LT [sa susunod na] dddd",
		      lastDay: "LT [kahapon]",
		      lastWeek: "LT [noong nakaraang] dddd",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "sa loob ng %s",
		      past: "%s ang nakalipas",
		      s: "ilang segundo",
		      ss: "%d segundo",
		      m: "isang minuto",
		      mm: "%d minuto",
		      h: "isang oras",
		      hh: "%d oras",
		      d: "isang araw",
		      dd: "%d araw",
		      M: "isang buwan",
		      MM: "%d buwan",
		      y: "isang taon",
		      yy: "%d taon"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}/,
		    ordinal: function (e) {
		      return e;
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("fo", {
		    months: "januar_februar_mars_apr\xedl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
		    monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
		    weekdays: "sunnudagur_m\xe1nadagur_t\xfdsdagur_mikudagur_h\xf3sdagur_fr\xedggjadagur_leygardagur".split("_"),
		    weekdaysShort: "sun_m\xe1n_t\xfds_mik_h\xf3s_fr\xed_ley".split("_"),
		    weekdaysMin: "su_m\xe1_t\xfd_mi_h\xf3_fr_le".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D. MMMM, YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\xcd dag kl.] LT",
		      nextDay: "[\xcd morgin kl.] LT",
		      nextWeek: "dddd [kl.] LT",
		      lastDay: "[\xcd gj\xe1r kl.] LT",
		      lastWeek: "[s\xed\xf0stu] dddd [kl] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "um %s",
		      past: "%s s\xed\xf0ani",
		      s: "f\xe1 sekund",
		      ss: "%d sekundir",
		      m: "ein minuttur",
		      mm: "%d minuttir",
		      h: "ein t\xedmi",
		      hh: "%d t\xedmar",
		      d: "ein dagur",
		      dd: "%d dagar",
		      M: "ein m\xe1na\xf0ur",
		      MM: "%d m\xe1na\xf0ir",
		      y: "eitt \xe1r",
		      yy: "%d \xe1r"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("fr-ca", {
		    months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),
		    monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
		    weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
		    weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Aujourd\u2019hui \xe0] LT",
		      nextDay: "[Demain \xe0] LT",
		      nextWeek: "dddd [\xe0] LT",
		      lastDay: "[Hier \xe0] LT",
		      lastWeek: "dddd [dernier \xe0] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dans %s",
		      past: "il y a %s",
		      s: "quelques secondes",
		      ss: "%d secondes",
		      m: "une minute",
		      mm: "%d minutes",
		      h: "une heure",
		      hh: "%d heures",
		      d: "un jour",
		      dd: "%d jours",
		      M: "un mois",
		      MM: "%d mois",
		      y: "un an",
		      yy: "%d ans"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        default:
		        case "M":
		        case "Q":
		        case "D":
		        case "DDD":
		        case "d":
		          return e + (1 === e ? "er" : "e");

		        case "w":
		        case "W":
		          return e + (1 === e ? "re" : "e");
		      }
		    }
		  }), e.defineLocale("fr-ch", {
		    months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),
		    monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
		    weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
		    weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Aujourd\u2019hui \xe0] LT",
		      nextDay: "[Demain \xe0] LT",
		      nextWeek: "dddd [\xe0] LT",
		      lastDay: "[Hier \xe0] LT",
		      lastWeek: "dddd [dernier \xe0] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dans %s",
		      past: "il y a %s",
		      s: "quelques secondes",
		      ss: "%d secondes",
		      m: "une minute",
		      mm: "%d minutes",
		      h: "une heure",
		      hh: "%d heures",
		      d: "un jour",
		      dd: "%d jours",
		      M: "un mois",
		      MM: "%d mois",
		      y: "un an",
		      yy: "%d ans"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        default:
		        case "M":
		        case "Q":
		        case "D":
		        case "DDD":
		        case "d":
		          return e + (1 === e ? "er" : "e");

		        case "w":
		        case "W":
		          return e + (1 === e ? "re" : "e");
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var m = /(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?|janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i,
		      d = [/^janv/i, /^f\xe9vr/i, /^mars/i, /^avr/i, /^mai/i, /^juin/i, /^juil/i, /^ao\xfbt/i, /^sept/i, /^oct/i, /^nov/i, /^d\xe9c/i],
		      Me = (e.defineLocale("fr", {
		    months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),
		    monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),
		    monthsRegex: m,
		    monthsShortRegex: m,
		    monthsStrictRegex: /^(janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i,
		    monthsShortStrictRegex: /(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?)/i,
		    monthsParse: d,
		    longMonthsParse: d,
		    shortMonthsParse: d,
		    weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
		    weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
		    weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Aujourd\u2019hui \xe0] LT",
		      nextDay: "[Demain \xe0] LT",
		      nextWeek: "dddd [\xe0] LT",
		      lastDay: "[Hier \xe0] LT",
		      lastWeek: "dddd [dernier \xe0] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dans %s",
		      past: "il y a %s",
		      s: "quelques secondes",
		      ss: "%d secondes",
		      m: "une minute",
		      mm: "%d minutes",
		      h: "une heure",
		      hh: "%d heures",
		      d: "un jour",
		      dd: "%d jours",
		      w: "une semaine",
		      ww: "%d semaines",
		      M: "un mois",
		      MM: "%d mois",
		      y: "un an",
		      yy: "%d ans"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "D":
		          return e + (1 === e ? "er" : "");

		        default:
		        case "M":
		        case "Q":
		        case "DDD":
		        case "d":
		          return e + (1 === e ? "er" : "e");

		        case "w":
		        case "W":
		          return e + (1 === e ? "re" : "e");
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_")),
		      Le = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");
		  e.defineLocale("fy", {
		    months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? Le : Me)[e.month()] : Me;
		    },
		    monthsParseExact: !0,
		    weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),
		    weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
		    weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD-MM-YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[hjoed om] LT",
		      nextDay: "[moarn om] LT",
		      nextWeek: "dddd [om] LT",
		      lastDay: "[juster om] LT",
		      lastWeek: "[\xf4fr\xfbne] dddd [om] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "oer %s",
		      past: "%s lyn",
		      s: "in pear sekonden",
		      ss: "%d sekonden",
		      m: "ien min\xfat",
		      mm: "%d minuten",
		      h: "ien oere",
		      hh: "%d oeren",
		      d: "ien dei",
		      dd: "%d dagen",
		      M: "ien moanne",
		      MM: "%d moannen",
		      y: "ien jier",
		      yy: "%d jierren"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
		    ordinal: function (e) {
		      return e + (1 === e || 8 === e || 20 <= e ? "ste" : "de");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("ga", {
		    months: ["Ean\xe1ir", "Feabhra", "M\xe1rta", "Aibre\xe1n", "Bealtaine", "Meitheamh", "I\xfail", "L\xfanasa", "Me\xe1n F\xf3mhair", "Deireadh F\xf3mhair", "Samhain", "Nollaig"],
		    monthsShort: ["Ean", "Feabh", "M\xe1rt", "Aib", "Beal", "Meith", "I\xfail", "L\xfan", "M.F.", "D.F.", "Samh", "Noll"],
		    monthsParseExact: !0,
		    weekdays: ["D\xe9 Domhnaigh", "D\xe9 Luain", "D\xe9 M\xe1irt", "D\xe9 C\xe9adaoin", "D\xe9ardaoin", "D\xe9 hAoine", "D\xe9 Sathairn"],
		    weekdaysShort: ["Domh", "Luan", "M\xe1irt", "C\xe9ad", "D\xe9ar", "Aoine", "Sath"],
		    weekdaysMin: ["Do", "Lu", "M\xe1", "C\xe9", "D\xe9", "A", "Sa"],
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Inniu ag] LT",
		      nextDay: "[Am\xe1rach ag] LT",
		      nextWeek: "dddd [ag] LT",
		      lastDay: "[Inn\xe9 ag] LT",
		      lastWeek: "dddd [seo caite] [ag] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "i %s",
		      past: "%s \xf3 shin",
		      s: "c\xfapla soicind",
		      ss: "%d soicind",
		      m: "n\xf3im\xe9ad",
		      mm: "%d n\xf3im\xe9ad",
		      h: "uair an chloig",
		      hh: "%d uair an chloig",
		      d: "l\xe1",
		      dd: "%d l\xe1",
		      M: "m\xed",
		      MM: "%d m\xedonna",
		      y: "bliain",
		      yy: "%d bliain"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
		    ordinal: function (e) {
		      return e + (1 === e ? "d" : e % 10 == 2 ? "na" : "mh");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });

		  function y(e, a, _, s) {
		    e = {
		      s: ["\u0925\u094b\u0921\u092f\u093e \u0938\u0945\u0915\u0902\u0921\u093e\u0902\u0928\u0940", "\u0925\u094b\u0921\u0947 \u0938\u0945\u0915\u0902\u0921"],
		      ss: [e + " \u0938\u0945\u0915\u0902\u0921\u093e\u0902\u0928\u0940", e + " \u0938\u0945\u0915\u0902\u0921"],
		      m: ["\u090f\u0915\u093e \u092e\u093f\u0923\u091f\u093e\u0928", "\u090f\u0915 \u092e\u093f\u0928\u0942\u091f"],
		      mm: [e + " \u092e\u093f\u0923\u091f\u093e\u0902\u0928\u0940", e + " \u092e\u093f\u0923\u091f\u093e\u0902"],
		      h: ["\u090f\u0915\u093e \u0935\u0930\u093e\u0928", "\u090f\u0915 \u0935\u0930"],
		      hh: [e + " \u0935\u0930\u093e\u0902\u0928\u0940", e + " \u0935\u0930\u093e\u0902"],
		      d: ["\u090f\u0915\u093e \u0926\u093f\u0938\u093e\u0928", "\u090f\u0915 \u0926\u0940\u0938"],
		      dd: [e + " \u0926\u093f\u0938\u093e\u0902\u0928\u0940", e + " \u0926\u0940\u0938"],
		      M: ["\u090f\u0915\u093e \u092e\u094d\u0939\u092f\u0928\u094d\u092f\u093e\u0928", "\u090f\u0915 \u092e\u094d\u0939\u092f\u0928\u094b"],
		      MM: [e + " \u092e\u094d\u0939\u092f\u0928\u094d\u092f\u093e\u0928\u0940", e + " \u092e\u094d\u0939\u092f\u0928\u0947"],
		      y: ["\u090f\u0915\u093e \u0935\u0930\u094d\u0938\u093e\u0928", "\u090f\u0915 \u0935\u0930\u094d\u0938"],
		      yy: [e + " \u0935\u0930\u094d\u0938\u093e\u0902\u0928\u0940", e + " \u0935\u0930\u094d\u0938\u093e\u0902"]
		    };
		    return s ? e[_][0] : e[_][1];
		  }

		  function c(e, a, _, s) {
		    e = {
		      s: ["thoddea sekondamni", "thodde sekond"],
		      ss: [e + " sekondamni", e + " sekond"],
		      m: ["eka mintan", "ek minut"],
		      mm: [e + " mintamni", e + " mintam"],
		      h: ["eka voran", "ek vor"],
		      hh: [e + " voramni", e + " voram"],
		      d: ["eka disan", "ek dis"],
		      dd: [e + " disamni", e + " dis"],
		      M: ["eka mhoinean", "ek mhoino"],
		      MM: [e + " mhoineamni", e + " mhoine"],
		      y: ["eka vorsan", "ek voros"],
		      yy: [e + " vorsamni", e + " vorsam"]
		    };
		    return s ? e[_][0] : e[_][1];
		  }

		  e.defineLocale("gd", {
		    months: ["Am Faoilleach", "An Gearran", "Am M\xe0rt", "An Giblean", "An C\xe8itean", "An t-\xd2gmhios", "An t-Iuchar", "An L\xf9nastal", "An t-Sultain", "An D\xe0mhair", "An t-Samhain", "An D\xf9bhlachd"],
		    monthsShort: ["Faoi", "Gear", "M\xe0rt", "Gibl", "C\xe8it", "\xd2gmh", "Iuch", "L\xf9n", "Sult", "D\xe0mh", "Samh", "D\xf9bh"],
		    monthsParseExact: !0,
		    weekdays: ["Did\xf2mhnaich", "Diluain", "Dim\xe0irt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
		    weekdaysShort: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
		    weekdaysMin: ["D\xf2", "Lu", "M\xe0", "Ci", "Ar", "Ha", "Sa"],
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[An-diugh aig] LT",
		      nextDay: "[A-m\xe0ireach aig] LT",
		      nextWeek: "dddd [aig] LT",
		      lastDay: "[An-d\xe8 aig] LT",
		      lastWeek: "dddd [seo chaidh] [aig] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "ann an %s",
		      past: "bho chionn %s",
		      s: "beagan diogan",
		      ss: "%d diogan",
		      m: "mionaid",
		      mm: "%d mionaidean",
		      h: "uair",
		      hh: "%d uairean",
		      d: "latha",
		      dd: "%d latha",
		      M: "m\xecos",
		      MM: "%d m\xecosan",
		      y: "bliadhna",
		      yy: "%d bliadhna"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
		    ordinal: function (e) {
		      return e + (1 === e ? "d" : e % 10 == 2 ? "na" : "mh");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("gl", {
		    months: "xaneiro_febreiro_marzo_abril_maio_xu\xf1o_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),
		    monthsShort: "xan._feb._mar._abr._mai._xu\xf1._xul._ago._set._out._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "domingo_luns_martes_m\xe9rcores_xoves_venres_s\xe1bado".split("_"),
		    weekdaysShort: "dom._lun._mar._m\xe9r._xov._ven._s\xe1b.".split("_"),
		    weekdaysMin: "do_lu_ma_m\xe9_xo_ve_s\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY H:mm",
		      LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[hoxe " + (1 !== this.hours() ? "\xe1s" : "\xe1") + "] LT";
		      },
		      nextDay: function () {
		        return "[ma\xf1\xe1 " + (1 !== this.hours() ? "\xe1s" : "\xe1") + "] LT";
		      },
		      nextWeek: function () {
		        return "dddd [" + (1 !== this.hours() ? "\xe1s" : "a") + "] LT";
		      },
		      lastDay: function () {
		        return "[onte " + (1 !== this.hours() ? "\xe1" : "a") + "] LT";
		      },
		      lastWeek: function () {
		        return "[o] dddd [pasado " + (1 !== this.hours() ? "\xe1s" : "a") + "] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: function (e) {
		        return 0 === e.indexOf("un") ? "n" + e : "en " + e;
		      },
		      past: "hai %s",
		      s: "uns segundos",
		      ss: "%d segundos",
		      m: "un minuto",
		      mm: "%d minutos",
		      h: "unha hora",
		      hh: "%d horas",
		      d: "un d\xeda",
		      dd: "%d d\xedas",
		      M: "un mes",
		      MM: "%d meses",
		      y: "un ano",
		      yy: "%d anos"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("gom-deva", {
		    months: {
		      standalone: "\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u0940\u0932_\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932\u092f_\u0911\u0917\u0938\u094d\u091f_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930_\u0911\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930_\u0921\u093f\u0938\u0947\u0902\u092c\u0930".split("_"),
		      format: "\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940\u091a\u094d\u092f\u093e_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940\u091a\u094d\u092f\u093e_\u092e\u093e\u0930\u094d\u091a\u093e\u091a\u094d\u092f\u093e_\u090f\u092a\u094d\u0930\u0940\u0932\u093e\u091a\u094d\u092f\u093e_\u092e\u0947\u092f\u093e\u091a\u094d\u092f\u093e_\u091c\u0942\u0928\u093e\u091a\u094d\u092f\u093e_\u091c\u0941\u0932\u092f\u093e\u091a\u094d\u092f\u093e_\u0911\u0917\u0938\u094d\u091f\u093e\u091a\u094d\u092f\u093e_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0911\u0915\u094d\u091f\u094b\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0921\u093f\u0938\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e".split("_"),
		      isFormat: /MMMM(\s)+D[oD]?/
		    },
		    monthsShort: "\u091c\u093e\u0928\u0947._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u0940._\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932._\u0911\u0917._\u0938\u092a\u094d\u091f\u0947\u0902._\u0911\u0915\u094d\u091f\u094b._\u0928\u094b\u0935\u094d\u0939\u0947\u0902._\u0921\u093f\u0938\u0947\u0902.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0906\u092f\u0924\u093e\u0930_\u0938\u094b\u092e\u093e\u0930_\u092e\u0902\u0917\u0933\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u092c\u093f\u0930\u0947\u0938\u094d\u0924\u093e\u0930_\u0938\u0941\u0915\u094d\u0930\u093e\u0930_\u0936\u0947\u0928\u0935\u093e\u0930".split("_"),
		    weekdaysShort: "\u0906\u092f\u0924._\u0938\u094b\u092e._\u092e\u0902\u0917\u0933._\u092c\u0941\u0927._\u092c\u094d\u0930\u0947\u0938\u094d\u0924._\u0938\u0941\u0915\u094d\u0930._\u0936\u0947\u0928.".split("_"),
		    weekdaysMin: "\u0906_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u092c\u094d\u0930\u0947_\u0938\u0941_\u0936\u0947".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]",
		      LTS: "A h:mm:ss [\u0935\u093e\u091c\u0924\u093e\u0902]",
		      L: "DD-MM-YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]",
		      LLLL: "dddd, MMMM Do, YYYY, A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]",
		      llll: "ddd, D MMM YYYY, A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]"
		    },
		    calendar: {
		      sameDay: "[\u0906\u092f\u091c] LT",
		      nextDay: "[\u092b\u093e\u0932\u094d\u092f\u093e\u0902] LT",
		      nextWeek: "[\u092b\u0941\u0921\u0932\u094b] dddd[,] LT",
		      lastDay: "[\u0915\u093e\u0932] LT",
		      lastWeek: "[\u092b\u093e\u091f\u0932\u094b] dddd[,] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s",
		      past: "%s \u0906\u0926\u0940\u0902",
		      s: y,
		      ss: y,
		      m: y,
		      mm: y,
		      h: y,
		      hh: y,
		      d: y,
		      dd: y,
		      M: y,
		      MM: y,
		      y: y,
		      yy: y
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\u0935\u0947\u0930)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "D":
		          return e + "\u0935\u0947\u0930";

		        default:
		        case "M":
		        case "Q":
		        case "DDD":
		        case "d":
		        case "w":
		        case "W":
		          return e;
		      }
		    },
		    week: {
		      dow: 0,
		      doy: 3
		    },
		    meridiemParse: /\u0930\u093e\u0924\u0940|\u0938\u0915\u093e\u0933\u0940\u0902|\u0926\u0928\u092a\u093e\u0930\u093e\u0902|\u0938\u093e\u0902\u091c\u0947/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0930\u093e\u0924\u0940" === a ? e < 4 ? e : e + 12 : "\u0938\u0915\u093e\u0933\u0940\u0902" === a ? e : "\u0926\u0928\u092a\u093e\u0930\u093e\u0902" === a ? 12 < e ? e : e + 12 : "\u0938\u093e\u0902\u091c\u0947" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0930\u093e\u0924\u0940" : e < 12 ? "\u0938\u0915\u093e\u0933\u0940\u0902" : e < 16 ? "\u0926\u0928\u092a\u093e\u0930\u093e\u0902" : e < 20 ? "\u0938\u093e\u0902\u091c\u0947" : "\u0930\u093e\u0924\u0940";
		    }
		  }), e.defineLocale("gom-latn", {
		    months: {
		      standalone: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),
		      format: "Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),
		      isFormat: /MMMM(\s)+D[oD]?/
		    },
		    monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),
		    weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),
		    weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "A h:mm [vazta]",
		      LTS: "A h:mm:ss [vazta]",
		      L: "DD-MM-YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY A h:mm [vazta]",
		      LLLL: "dddd, MMMM Do, YYYY, A h:mm [vazta]",
		      llll: "ddd, D MMM YYYY, A h:mm [vazta]"
		    },
		    calendar: {
		      sameDay: "[Aiz] LT",
		      nextDay: "[Faleam] LT",
		      nextWeek: "[Fuddlo] dddd[,] LT",
		      lastDay: "[Kal] LT",
		      lastWeek: "[Fattlo] dddd[,] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s",
		      past: "%s adim",
		      s: c,
		      ss: c,
		      m: c,
		      mm: c,
		      h: c,
		      hh: c,
		      d: c,
		      dd: c,
		      M: c,
		      MM: c,
		      y: c,
		      yy: c
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(er)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "D":
		          return e + "er";

		        default:
		        case "M":
		        case "Q":
		        case "DDD":
		        case "d":
		        case "w":
		        case "W":
		          return e;
		      }
		    },
		    week: {
		      dow: 0,
		      doy: 3
		    },
		    meridiemParse: /rati|sokallim|donparam|sanje/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "rati" === a ? e < 4 ? e : e + 12 : "sokallim" === a ? e : "donparam" === a ? 12 < e ? e : e + 12 : "sanje" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "rati" : e < 12 ? "sokallim" : e < 16 ? "donparam" : e < 20 ? "sanje" : "rati";
		    }
		  });
		  var Ye = {
		    1: "\u0ae7",
		    2: "\u0ae8",
		    3: "\u0ae9",
		    4: "\u0aea",
		    5: "\u0aeb",
		    6: "\u0aec",
		    7: "\u0aed",
		    8: "\u0aee",
		    9: "\u0aef",
		    0: "\u0ae6"
		  },
		      he = {
		    "\u0ae7": "1",
		    "\u0ae8": "2",
		    "\u0ae9": "3",
		    "\u0aea": "4",
		    "\u0aeb": "5",
		    "\u0aec": "6",
		    "\u0aed": "7",
		    "\u0aee": "8",
		    "\u0aef": "9",
		    "\u0ae6": "0"
		  },
		      ye = (e.defineLocale("gu", {
		    months: "\u0a9c\u0abe\u0aa8\u0acd\u0aaf\u0ac1\u0a86\u0ab0\u0ac0_\u0aab\u0ac7\u0aac\u0acd\u0ab0\u0ac1\u0a86\u0ab0\u0ac0_\u0aae\u0abe\u0ab0\u0acd\u0a9a_\u0a8f\u0aaa\u0acd\u0ab0\u0abf\u0ab2_\u0aae\u0ac7_\u0a9c\u0ac2\u0aa8_\u0a9c\u0ac1\u0ab2\u0abe\u0a88_\u0a91\u0a97\u0ab8\u0acd\u0a9f_\u0ab8\u0aaa\u0acd\u0a9f\u0ac7\u0aae\u0acd\u0aac\u0ab0_\u0a91\u0a95\u0acd\u0a9f\u0acd\u0aac\u0ab0_\u0aa8\u0ab5\u0ac7\u0aae\u0acd\u0aac\u0ab0_\u0aa1\u0abf\u0ab8\u0ac7\u0aae\u0acd\u0aac\u0ab0".split("_"),
		    monthsShort: "\u0a9c\u0abe\u0aa8\u0acd\u0aaf\u0ac1._\u0aab\u0ac7\u0aac\u0acd\u0ab0\u0ac1._\u0aae\u0abe\u0ab0\u0acd\u0a9a_\u0a8f\u0aaa\u0acd\u0ab0\u0abf._\u0aae\u0ac7_\u0a9c\u0ac2\u0aa8_\u0a9c\u0ac1\u0ab2\u0abe._\u0a91\u0a97._\u0ab8\u0aaa\u0acd\u0a9f\u0ac7._\u0a91\u0a95\u0acd\u0a9f\u0acd._\u0aa8\u0ab5\u0ac7._\u0aa1\u0abf\u0ab8\u0ac7.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0ab0\u0ab5\u0abf\u0ab5\u0abe\u0ab0_\u0ab8\u0acb\u0aae\u0ab5\u0abe\u0ab0_\u0aae\u0a82\u0a97\u0ab3\u0ab5\u0abe\u0ab0_\u0aac\u0ac1\u0aa7\u0acd\u0ab5\u0abe\u0ab0_\u0a97\u0ac1\u0ab0\u0ac1\u0ab5\u0abe\u0ab0_\u0ab6\u0ac1\u0a95\u0acd\u0ab0\u0ab5\u0abe\u0ab0_\u0ab6\u0aa8\u0abf\u0ab5\u0abe\u0ab0".split("_"),
		    weekdaysShort: "\u0ab0\u0ab5\u0abf_\u0ab8\u0acb\u0aae_\u0aae\u0a82\u0a97\u0ab3_\u0aac\u0ac1\u0aa7\u0acd_\u0a97\u0ac1\u0ab0\u0ac1_\u0ab6\u0ac1\u0a95\u0acd\u0ab0_\u0ab6\u0aa8\u0abf".split("_"),
		    weekdaysMin: "\u0ab0_\u0ab8\u0acb_\u0aae\u0a82_\u0aac\u0ac1_\u0a97\u0ac1_\u0ab6\u0ac1_\u0ab6".split("_"),
		    longDateFormat: {
		      LT: "A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7",
		      LTS: "A h:mm:ss \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7",
		      LLLL: "dddd, D MMMM YYYY, A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7"
		    },
		    calendar: {
		      sameDay: "[\u0a86\u0a9c] LT",
		      nextDay: "[\u0a95\u0abe\u0ab2\u0ac7] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0a97\u0a87\u0a95\u0abe\u0ab2\u0ac7] LT",
		      lastWeek: "[\u0aaa\u0abe\u0a9b\u0ab2\u0abe] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0aae\u0abe",
		      past: "%s \u0aaa\u0ab9\u0ac7\u0ab2\u0abe",
		      s: "\u0a85\u0aae\u0ac1\u0a95 \u0aaa\u0ab3\u0acb",
		      ss: "%d \u0ab8\u0ac7\u0a95\u0a82\u0aa1",
		      m: "\u0a8f\u0a95 \u0aae\u0abf\u0aa8\u0abf\u0a9f",
		      mm: "%d \u0aae\u0abf\u0aa8\u0abf\u0a9f",
		      h: "\u0a8f\u0a95 \u0a95\u0ab2\u0abe\u0a95",
		      hh: "%d \u0a95\u0ab2\u0abe\u0a95",
		      d: "\u0a8f\u0a95 \u0aa6\u0abf\u0ab5\u0ab8",
		      dd: "%d \u0aa6\u0abf\u0ab5\u0ab8",
		      M: "\u0a8f\u0a95 \u0aae\u0ab9\u0abf\u0aa8\u0acb",
		      MM: "%d \u0aae\u0ab9\u0abf\u0aa8\u0acb",
		      y: "\u0a8f\u0a95 \u0ab5\u0ab0\u0acd\u0ab7",
		      yy: "%d \u0ab5\u0ab0\u0acd\u0ab7"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0ae6]/g, function (e) {
		        return he[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Ye[e];
		      });
		    },
		    meridiemParse: /\u0ab0\u0abe\u0aa4|\u0aac\u0aaa\u0acb\u0ab0|\u0ab8\u0ab5\u0abe\u0ab0|\u0ab8\u0abe\u0a82\u0a9c/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0ab0\u0abe\u0aa4" === a ? e < 4 ? e : e + 12 : "\u0ab8\u0ab5\u0abe\u0ab0" === a ? e : "\u0aac\u0aaa\u0acb\u0ab0" === a ? 10 <= e ? e : e + 12 : "\u0ab8\u0abe\u0a82\u0a9c" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0ab0\u0abe\u0aa4" : e < 10 ? "\u0ab8\u0ab5\u0abe\u0ab0" : e < 17 ? "\u0aac\u0aaa\u0acb\u0ab0" : e < 20 ? "\u0ab8\u0abe\u0a82\u0a9c" : "\u0ab0\u0abe\u0aa4";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("he", {
		    months: "\u05d9\u05e0\u05d5\u05d0\u05e8_\u05e4\u05d1\u05e8\u05d5\u05d0\u05e8_\u05de\u05e8\u05e5_\u05d0\u05e4\u05e8\u05d9\u05dc_\u05de\u05d0\u05d9_\u05d9\u05d5\u05e0\u05d9_\u05d9\u05d5\u05dc\u05d9_\u05d0\u05d5\u05d2\u05d5\u05e1\u05d8_\u05e1\u05e4\u05d8\u05de\u05d1\u05e8_\u05d0\u05d5\u05e7\u05d8\u05d5\u05d1\u05e8_\u05e0\u05d5\u05d1\u05de\u05d1\u05e8_\u05d3\u05e6\u05de\u05d1\u05e8".split("_"),
		    monthsShort: "\u05d9\u05e0\u05d5\u05f3_\u05e4\u05d1\u05e8\u05f3_\u05de\u05e8\u05e5_\u05d0\u05e4\u05e8\u05f3_\u05de\u05d0\u05d9_\u05d9\u05d5\u05e0\u05d9_\u05d9\u05d5\u05dc\u05d9_\u05d0\u05d5\u05d2\u05f3_\u05e1\u05e4\u05d8\u05f3_\u05d0\u05d5\u05e7\u05f3_\u05e0\u05d5\u05d1\u05f3_\u05d3\u05e6\u05de\u05f3".split("_"),
		    weekdays: "\u05e8\u05d0\u05e9\u05d5\u05df_\u05e9\u05e0\u05d9_\u05e9\u05dc\u05d9\u05e9\u05d9_\u05e8\u05d1\u05d9\u05e2\u05d9_\u05d7\u05de\u05d9\u05e9\u05d9_\u05e9\u05d9\u05e9\u05d9_\u05e9\u05d1\u05ea".split("_"),
		    weekdaysShort: "\u05d0\u05f3_\u05d1\u05f3_\u05d2\u05f3_\u05d3\u05f3_\u05d4\u05f3_\u05d5\u05f3_\u05e9\u05f3".split("_"),
		    weekdaysMin: "\u05d0_\u05d1_\u05d2_\u05d3_\u05d4_\u05d5_\u05e9".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [\u05d1]MMMM YYYY",
		      LLL: "D [\u05d1]MMMM YYYY HH:mm",
		      LLLL: "dddd, D [\u05d1]MMMM YYYY HH:mm",
		      l: "D/M/YYYY",
		      ll: "D MMM YYYY",
		      lll: "D MMM YYYY HH:mm",
		      llll: "ddd, D MMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u05d4\u05d9\u05d5\u05dd \u05d1\u05be]LT",
		      nextDay: "[\u05de\u05d7\u05e8 \u05d1\u05be]LT",
		      nextWeek: "dddd [\u05d1\u05e9\u05e2\u05d4] LT",
		      lastDay: "[\u05d0\u05ea\u05de\u05d5\u05dc \u05d1\u05be]LT",
		      lastWeek: "[\u05d1\u05d9\u05d5\u05dd] dddd [\u05d4\u05d0\u05d7\u05e8\u05d5\u05df \u05d1\u05e9\u05e2\u05d4] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u05d1\u05e2\u05d5\u05d3 %s",
		      past: "\u05dc\u05e4\u05e0\u05d9 %s",
		      s: "\u05de\u05e1\u05e4\u05e8 \u05e9\u05e0\u05d9\u05d5\u05ea",
		      ss: "%d \u05e9\u05e0\u05d9\u05d5\u05ea",
		      m: "\u05d3\u05e7\u05d4",
		      mm: "%d \u05d3\u05e7\u05d5\u05ea",
		      h: "\u05e9\u05e2\u05d4",
		      hh: function (e) {
		        return 2 === e ? "\u05e9\u05e2\u05ea\u05d9\u05d9\u05dd" : e + " \u05e9\u05e2\u05d5\u05ea";
		      },
		      d: "\u05d9\u05d5\u05dd",
		      dd: function (e) {
		        return 2 === e ? "\u05d9\u05d5\u05de\u05d9\u05d9\u05dd" : e + " \u05d9\u05de\u05d9\u05dd";
		      },
		      M: "\u05d7\u05d5\u05d3\u05e9",
		      MM: function (e) {
		        return 2 === e ? "\u05d7\u05d5\u05d3\u05e9\u05d9\u05d9\u05dd" : e + " \u05d7\u05d5\u05d3\u05e9\u05d9\u05dd";
		      },
		      y: "\u05e9\u05e0\u05d4",
		      yy: function (e) {
		        return 2 === e ? "\u05e9\u05e0\u05ea\u05d9\u05d9\u05dd" : e % 10 == 0 && 10 !== e ? e + " \u05e9\u05e0\u05d4" : e + " \u05e9\u05e0\u05d9\u05dd";
		      }
		    },
		    meridiemParse: /\u05d0\u05d7\u05d4"\u05e6|\u05dc\u05e4\u05e0\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8|\u05d1\u05d1\u05d5\u05e7\u05e8|\u05d1\u05e2\u05e8\u05d1/i,
		    isPM: function (e) {
		      return /^(\u05d0\u05d7\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05d1\u05e2\u05e8\u05d1)$/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 5 ? "\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8" : e < 10 ? "\u05d1\u05d1\u05d5\u05e7\u05e8" : e < 12 ? _ ? '\u05dc\u05e4\u05e0\u05d4"\u05e6' : "\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd" : e < 18 ? _ ? '\u05d0\u05d7\u05d4"\u05e6' : "\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd" : "\u05d1\u05e2\u05e8\u05d1";
		    }
		  }), {
		    1: "\u0967",
		    2: "\u0968",
		    3: "\u0969",
		    4: "\u096a",
		    5: "\u096b",
		    6: "\u096c",
		    7: "\u096d",
		    8: "\u096e",
		    9: "\u096f",
		    0: "\u0966"
		  }),
		      ce = {
		    "\u0967": "1",
		    "\u0968": "2",
		    "\u0969": "3",
		    "\u096a": "4",
		    "\u096b": "5",
		    "\u096c": "6",
		    "\u096d": "7",
		    "\u096e": "8",
		    "\u096f": "9",
		    "\u0966": "0"
		  },
		      r = [/^\u091c\u0928/i, /^\u092b\u093c\u0930|\u092b\u0930/i, /^\u092e\u093e\u0930\u094d\u091a/i, /^\u0905\u092a\u094d\u0930\u0948/i, /^\u092e\u0908/i, /^\u091c\u0942\u0928/i, /^\u091c\u0941\u0932/i, /^\u0905\u0917/i, /^\u0938\u093f\u0924\u0902|\u0938\u093f\u0924/i, /^\u0905\u0915\u094d\u091f\u0942/i, /^\u0928\u0935|\u0928\u0935\u0902/i, /^\u0926\u093f\u0938\u0902|\u0926\u093f\u0938/i];

		  function k(e, a, _) {
		    var s = e + " ";

		    switch (_) {
		      case "ss":
		        return s += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";

		      case "m":
		        return a ? "jedna minuta" : "jedne minute";

		      case "mm":
		        return s += 1 !== e && (2 === e || 3 === e || 4 === e) ? "minute" : "minuta";

		      case "h":
		        return a ? "jedan sat" : "jednog sata";

		      case "hh":
		        return s += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";

		      case "dd":
		        return s += 1 === e ? "dan" : "dana";

		      case "MM":
		        return s += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";

		      case "yy":
		        return s += 1 !== e && (2 === e || 3 === e || 4 === e) ? "godine" : "godina";
		    }
		  }

		  e.defineLocale("hi", {
		    months: {
		      format: "\u091c\u0928\u0935\u0930\u0940_\u092b\u093c\u0930\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948\u0932_\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0938\u094d\u0924_\u0938\u093f\u0924\u092e\u094d\u092c\u0930_\u0905\u0915\u094d\u091f\u0942\u092c\u0930_\u0928\u0935\u092e\u094d\u092c\u0930_\u0926\u093f\u0938\u092e\u094d\u092c\u0930".split("_"),
		      standalone: "\u091c\u0928\u0935\u0930\u0940_\u092b\u0930\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948\u0932_\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0938\u094d\u0924_\u0938\u093f\u0924\u0902\u092c\u0930_\u0905\u0915\u094d\u091f\u0942\u092c\u0930_\u0928\u0935\u0902\u092c\u0930_\u0926\u093f\u0938\u0902\u092c\u0930".split("_")
		    },
		    monthsShort: "\u091c\u0928._\u092b\u093c\u0930._\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948._\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932._\u0905\u0917._\u0938\u093f\u0924._\u0905\u0915\u094d\u091f\u0942._\u0928\u0935._\u0926\u093f\u0938.".split("_"),
		    weekdays: "\u0930\u0935\u093f\u0935\u093e\u0930_\u0938\u094b\u092e\u0935\u093e\u0930_\u092e\u0902\u0917\u0932\u0935\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u0917\u0941\u0930\u0942\u0935\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u0935\u093e\u0930_\u0936\u0928\u093f\u0935\u093e\u0930".split("_"),
		    weekdaysShort: "\u0930\u0935\u093f_\u0938\u094b\u092e_\u092e\u0902\u0917\u0932_\u092c\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094d\u0930_\u0936\u0928\u093f".split("_"),
		    weekdaysMin: "\u0930_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u0917\u0941_\u0936\u0941_\u0936".split("_"),
		    longDateFormat: {
		      LT: "A h:mm \u092c\u091c\u0947",
		      LTS: "A h:mm:ss \u092c\u091c\u0947",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm \u092c\u091c\u0947",
		      LLLL: "dddd, D MMMM YYYY, A h:mm \u092c\u091c\u0947"
		    },
		    monthsParse: r,
		    longMonthsParse: r,
		    shortMonthsParse: [/^\u091c\u0928/i, /^\u092b\u093c\u0930/i, /^\u092e\u093e\u0930\u094d\u091a/i, /^\u0905\u092a\u094d\u0930\u0948/i, /^\u092e\u0908/i, /^\u091c\u0942\u0928/i, /^\u091c\u0941\u0932/i, /^\u0905\u0917/i, /^\u0938\u093f\u0924/i, /^\u0905\u0915\u094d\u091f\u0942/i, /^\u0928\u0935/i, /^\u0926\u093f\u0938/i],
		    monthsRegex: /^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i,
		    monthsShortRegex: /^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i,
		    monthsStrictRegex: /^(\u091c\u0928\u0935\u0930\u0940?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908?|\u0905\u0917\u0938\u094d\u0924?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924?\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930?)/i,
		    monthsShortStrictRegex: /^(\u091c\u0928\.?|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\.?|\u0905\u0917\.?|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\.?|\u0926\u093f\u0938\.?)/i,
		    calendar: {
		      sameDay: "[\u0906\u091c] LT",
		      nextDay: "[\u0915\u0932] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0915\u0932] LT",
		      lastWeek: "[\u092a\u093f\u091b\u0932\u0947] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u092e\u0947\u0902",
		      past: "%s \u092a\u0939\u0932\u0947",
		      s: "\u0915\u0941\u091b \u0939\u0940 \u0915\u094d\u0937\u0923",
		      ss: "%d \u0938\u0947\u0915\u0902\u0921",
		      m: "\u090f\u0915 \u092e\u093f\u0928\u091f",
		      mm: "%d \u092e\u093f\u0928\u091f",
		      h: "\u090f\u0915 \u0918\u0902\u091f\u093e",
		      hh: "%d \u0918\u0902\u091f\u0947",
		      d: "\u090f\u0915 \u0926\u093f\u0928",
		      dd: "%d \u0926\u093f\u0928",
		      M: "\u090f\u0915 \u092e\u0939\u0940\u0928\u0947",
		      MM: "%d \u092e\u0939\u0940\u0928\u0947",
		      y: "\u090f\u0915 \u0935\u0930\u094d\u0937",
		      yy: "%d \u0935\u0930\u094d\u0937"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function (e) {
		        return ce[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return ye[e];
		      });
		    },
		    meridiemParse: /\u0930\u093e\u0924|\u0938\u0941\u092c\u0939|\u0926\u094b\u092a\u0939\u0930|\u0936\u093e\u092e/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0930\u093e\u0924" === a ? e < 4 ? e : e + 12 : "\u0938\u0941\u092c\u0939" === a ? e : "\u0926\u094b\u092a\u0939\u0930" === a ? 10 <= e ? e : e + 12 : "\u0936\u093e\u092e" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0930\u093e\u0924" : e < 10 ? "\u0938\u0941\u092c\u0939" : e < 17 ? "\u0926\u094b\u092a\u0939\u0930" : e < 20 ? "\u0936\u093e\u092e" : "\u0930\u093e\u0924";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("hr", {
		    months: {
		      format: "sije\u010dnja_velja\u010de_o\u017eujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),
		      standalone: "sije\u010danj_velja\u010da_o\u017eujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")
		    },
		    monthsShort: "sij._velj._o\u017eu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota".split("_"),
		    weekdaysShort: "ned._pon._uto._sri._\u010det._pet._sub.".split("_"),
		    weekdaysMin: "ne_po_ut_sr_\u010de_pe_su".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "Do MMMM YYYY",
		      LLL: "Do MMMM YYYY H:mm",
		      LLLL: "dddd, Do MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[danas u] LT",
		      nextDay: "[sutra u] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[u] [nedjelju] [u] LT";

		          case 3:
		            return "[u] [srijedu] [u] LT";

		          case 6:
		            return "[u] [subotu] [u] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[u] dddd [u] LT";
		        }
		      },
		      lastDay: "[ju\u010der u] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[pro\u0161lu] [nedjelju] [u] LT";

		          case 3:
		            return "[pro\u0161lu] [srijedu] [u] LT";

		          case 6:
		            return "[pro\u0161le] [subote] [u] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[pro\u0161li] dddd [u] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "prije %s",
		      s: "par sekundi",
		      ss: k,
		      m: k,
		      mm: k,
		      h: k,
		      hh: k,
		      d: "dan",
		      dd: k,
		      M: "mjesec",
		      MM: k,
		      y: "godinu",
		      yy: k
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  });
		  var ke = "vas\xe1rnap h\xe9tf\u0151n kedden szerd\xe1n cs\xfct\xf6rt\xf6k\xf6n p\xe9nteken szombaton".split(" ");

		  function D(e, a, _, s) {
		    var d = e;

		    switch (_) {
		      case "s":
		        return s || a ? "n\xe9h\xe1ny m\xe1sodperc" : "n\xe9h\xe1ny m\xe1sodperce";

		      case "ss":
		        return d + (s || a) ? " m\xe1sodperc" : " m\xe1sodperce";

		      case "m":
		        return "egy" + (s || a ? " perc" : " perce");

		      case "mm":
		        return d + (s || a ? " perc" : " perce");

		      case "h":
		        return "egy" + (s || a ? " \xf3ra" : " \xf3r\xe1ja");

		      case "hh":
		        return d + (s || a ? " \xf3ra" : " \xf3r\xe1ja");

		      case "d":
		        return "egy" + (s || a ? " nap" : " napja");

		      case "dd":
		        return d + (s || a ? " nap" : " napja");

		      case "M":
		        return "egy" + (s || a ? " h\xf3nap" : " h\xf3napja");

		      case "MM":
		        return d + (s || a ? " h\xf3nap" : " h\xf3napja");

		      case "y":
		        return "egy" + (s || a ? " \xe9v" : " \xe9ve");

		      case "yy":
		        return d + (s || a ? " \xe9v" : " \xe9ve");
		    }

		    return "";
		  }

		  function De(e) {
		    return (e ? "" : "[m\xfalt] ") + "[" + ke[this.day()] + "] LT[-kor]";
		  }

		  function p(e) {
		    return e % 100 == 11 || e % 10 != 1;
		  }

		  function T(e, a, _, s) {
		    var d = e + " ";

		    switch (_) {
		      case "s":
		        return a || s ? "nokkrar sek\xfandur" : "nokkrum sek\xfandum";

		      case "ss":
		        return p(e) ? d + (a || s ? "sek\xfandur" : "sek\xfandum") : d + "sek\xfanda";

		      case "m":
		        return a ? "m\xedn\xfata" : "m\xedn\xfatu";

		      case "mm":
		        return p(e) ? d + (a || s ? "m\xedn\xfatur" : "m\xedn\xfatum") : a ? d + "m\xedn\xfata" : d + "m\xedn\xfatu";

		      case "hh":
		        return p(e) ? d + (a || s ? "klukkustundir" : "klukkustundum") : d + "klukkustund";

		      case "d":
		        return a ? "dagur" : s ? "dag" : "degi";

		      case "dd":
		        return p(e) ? a ? d + "dagar" : d + (s ? "daga" : "d\xf6gum") : a ? d + "dagur" : d + (s ? "dag" : "degi");

		      case "M":
		        return a ? "m\xe1nu\xf0ur" : s ? "m\xe1nu\xf0" : "m\xe1nu\xf0i";

		      case "MM":
		        return p(e) ? a ? d + "m\xe1nu\xf0ir" : d + (s ? "m\xe1nu\xf0i" : "m\xe1nu\xf0um") : a ? d + "m\xe1nu\xf0ur" : d + (s ? "m\xe1nu\xf0" : "m\xe1nu\xf0i");

		      case "y":
		        return a || s ? "\xe1r" : "\xe1ri";

		      case "yy":
		        return p(e) ? d + (a || s ? "\xe1r" : "\xe1rum") : d + (a || s ? "\xe1r" : "\xe1ri");
		    }
		  }

		  e.defineLocale("hu", {
		    months: "janu\xe1r_febru\xe1r_m\xe1rcius_\xe1prilis_m\xe1jus_j\xfanius_j\xfalius_augusztus_szeptember_okt\xf3ber_november_december".split("_"),
		    monthsShort: "jan._feb._m\xe1rc._\xe1pr._m\xe1j._j\xfan._j\xfal._aug._szept._okt._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "vas\xe1rnap_h\xe9tf\u0151_kedd_szerda_cs\xfct\xf6rt\xf6k_p\xe9ntek_szombat".split("_"),
		    weekdaysShort: "vas_h\xe9t_kedd_sze_cs\xfct_p\xe9n_szo".split("_"),
		    weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "YYYY.MM.DD.",
		      LL: "YYYY. MMMM D.",
		      LLL: "YYYY. MMMM D. H:mm",
		      LLLL: "YYYY. MMMM D., dddd H:mm"
		    },
		    meridiemParse: /de|du/i,
		    isPM: function (e) {
		      return "u" === e.charAt(1).toLowerCase();
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? !0 === _ ? "de" : "DE" : !0 === _ ? "du" : "DU";
		    },
		    calendar: {
		      sameDay: "[ma] LT[-kor]",
		      nextDay: "[holnap] LT[-kor]",
		      nextWeek: function () {
		        return De.call(this, !0);
		      },
		      lastDay: "[tegnap] LT[-kor]",
		      lastWeek: function () {
		        return De.call(this, !1);
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s m\xfalva",
		      past: "%s",
		      s: D,
		      ss: D,
		      m: D,
		      mm: D,
		      h: D,
		      hh: D,
		      d: D,
		      dd: D,
		      M: D,
		      MM: D,
		      y: D,
		      yy: D
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("hy-am", {
		    months: {
		      format: "\u0570\u0578\u0582\u0576\u057e\u0561\u0580\u056b_\u0583\u0565\u057f\u0580\u057e\u0561\u0580\u056b_\u0574\u0561\u0580\u057f\u056b_\u0561\u057a\u0580\u056b\u056c\u056b_\u0574\u0561\u0575\u056b\u057d\u056b_\u0570\u0578\u0582\u0576\u056b\u057d\u056b_\u0570\u0578\u0582\u056c\u056b\u057d\u056b_\u0585\u0563\u0578\u057d\u057f\u0578\u057d\u056b_\u057d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580\u056b_\u0570\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580\u056b_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056b_\u0564\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580\u056b".split("_"),
		      standalone: "\u0570\u0578\u0582\u0576\u057e\u0561\u0580_\u0583\u0565\u057f\u0580\u057e\u0561\u0580_\u0574\u0561\u0580\u057f_\u0561\u057a\u0580\u056b\u056c_\u0574\u0561\u0575\u056b\u057d_\u0570\u0578\u0582\u0576\u056b\u057d_\u0570\u0578\u0582\u056c\u056b\u057d_\u0585\u0563\u0578\u057d\u057f\u0578\u057d_\u057d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580_\u0570\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580_\u0564\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580".split("_")
		    },
		    monthsShort: "\u0570\u0576\u057e_\u0583\u057f\u0580_\u0574\u0580\u057f_\u0561\u057a\u0580_\u0574\u0575\u057d_\u0570\u0576\u057d_\u0570\u056c\u057d_\u0585\u0563\u057d_\u057d\u057a\u057f_\u0570\u056f\u057f_\u0576\u0574\u0562_\u0564\u056f\u057f".split("_"),
		    weekdays: "\u056f\u056b\u0580\u0561\u056f\u056b_\u0565\u0580\u056f\u0578\u0582\u0577\u0561\u0562\u0569\u056b_\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b_\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b_\u0570\u056b\u0576\u0563\u0577\u0561\u0562\u0569\u056b_\u0578\u0582\u0580\u0562\u0561\u0569_\u0577\u0561\u0562\u0561\u0569".split("_"),
		    weekdaysShort: "\u056f\u0580\u056f_\u0565\u0580\u056f_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569".split("_"),
		    weekdaysMin: "\u056f\u0580\u056f_\u0565\u0580\u056f_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY \u0569.",
		      LLL: "D MMMM YYYY \u0569., HH:mm",
		      LLLL: "dddd, D MMMM YYYY \u0569., HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0561\u0575\u057d\u0585\u0580] LT",
		      nextDay: "[\u057e\u0561\u0572\u0568] LT",
		      lastDay: "[\u0565\u0580\u0565\u056f] LT",
		      nextWeek: function () {
		        return "dddd [\u0585\u0580\u0568 \u056a\u0561\u0574\u0568] LT";
		      },
		      lastWeek: function () {
		        return "[\u0561\u0576\u0581\u0561\u056e] dddd [\u0585\u0580\u0568 \u056a\u0561\u0574\u0568] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0570\u0565\u057f\u0578",
		      past: "%s \u0561\u057c\u0561\u057b",
		      s: "\u0574\u056b \u0584\u0561\u0576\u056b \u057e\u0561\u0575\u0580\u056f\u0575\u0561\u0576",
		      ss: "%d \u057e\u0561\u0575\u0580\u056f\u0575\u0561\u0576",
		      m: "\u0580\u0578\u057a\u0565",
		      mm: "%d \u0580\u0578\u057a\u0565",
		      h: "\u056a\u0561\u0574",
		      hh: "%d \u056a\u0561\u0574",
		      d: "\u0585\u0580",
		      dd: "%d \u0585\u0580",
		      M: "\u0561\u0574\u056b\u057d",
		      MM: "%d \u0561\u0574\u056b\u057d",
		      y: "\u057f\u0561\u0580\u056b",
		      yy: "%d \u057f\u0561\u0580\u056b"
		    },
		    meridiemParse: /\u0563\u056b\u0577\u0565\u0580\u057e\u0561|\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561|\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576/,
		    isPM: function (e) {
		      return /^(\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576)$/.test(e);
		    },
		    meridiem: function (e) {
		      return e < 4 ? "\u0563\u056b\u0577\u0565\u0580\u057e\u0561" : e < 12 ? "\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561" : e < 17 ? "\u0581\u0565\u0580\u0565\u056f\u057e\u0561" : "\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(\u056b\u0576|\u0580\u0564)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "DDD":
		        case "w":
		        case "W":
		        case "DDDo":
		          return 1 === e ? e + "-\u056b\u0576" : e + "-\u0580\u0564";

		        default:
		          return e;
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("id", {
		    months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),
		    weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
		    weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
		    weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
		    longDateFormat: {
		      LT: "HH.mm",
		      LTS: "HH.mm.ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY [pukul] HH.mm",
		      LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
		    },
		    meridiemParse: /pagi|siang|sore|malam/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "pagi" === a ? e : "siang" === a ? 11 <= e ? e : e + 12 : "sore" === a || "malam" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam";
		    },
		    calendar: {
		      sameDay: "[Hari ini pukul] LT",
		      nextDay: "[Besok pukul] LT",
		      nextWeek: "dddd [pukul] LT",
		      lastDay: "[Kemarin pukul] LT",
		      lastWeek: "dddd [lalu pukul] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dalam %s",
		      past: "%s yang lalu",
		      s: "beberapa detik",
		      ss: "%d detik",
		      m: "semenit",
		      mm: "%d menit",
		      h: "sejam",
		      hh: "%d jam",
		      d: "sehari",
		      dd: "%d hari",
		      M: "sebulan",
		      MM: "%d bulan",
		      y: "setahun",
		      yy: "%d tahun"
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("is", {
		    months: "jan\xfaar_febr\xfaar_mars_apr\xedl_ma\xed_j\xfan\xed_j\xfal\xed_\xe1g\xfast_september_okt\xf3ber_n\xf3vember_desember".split("_"),
		    monthsShort: "jan_feb_mar_apr_ma\xed_j\xfan_j\xfal_\xe1g\xfa_sep_okt_n\xf3v_des".split("_"),
		    weekdays: "sunnudagur_m\xe1nudagur_\xferi\xf0judagur_mi\xf0vikudagur_fimmtudagur_f\xf6studagur_laugardagur".split("_"),
		    weekdaysShort: "sun_m\xe1n_\xferi_mi\xf0_fim_f\xf6s_lau".split("_"),
		    weekdaysMin: "Su_M\xe1_\xder_Mi_Fi_F\xf6_La".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY [kl.] H:mm",
		      LLLL: "dddd, D. MMMM YYYY [kl.] H:mm"
		    },
		    calendar: {
		      sameDay: "[\xed dag kl.] LT",
		      nextDay: "[\xe1 morgun kl.] LT",
		      nextWeek: "dddd [kl.] LT",
		      lastDay: "[\xed g\xe6r kl.] LT",
		      lastWeek: "[s\xed\xf0asta] dddd [kl.] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "eftir %s",
		      past: "fyrir %s s\xed\xf0an",
		      s: T,
		      ss: T,
		      m: T,
		      mm: T,
		      h: "klukkustund",
		      hh: T,
		      d: T,
		      dd: T,
		      M: T,
		      MM: T,
		      y: T,
		      yy: T
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("it-ch", {
		    months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
		    monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
		    weekdays: "domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato".split("_"),
		    weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
		    weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Oggi alle] LT",
		      nextDay: "[Domani alle] LT",
		      nextWeek: "dddd [alle] LT",
		      lastDay: "[Ieri alle] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[la scorsa] dddd [alle] LT";

		          default:
		            return "[lo scorso] dddd [alle] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: function (e) {
		        return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e;
		      },
		      past: "%s fa",
		      s: "alcuni secondi",
		      ss: "%d secondi",
		      m: "un minuto",
		      mm: "%d minuti",
		      h: "un'ora",
		      hh: "%d ore",
		      d: "un giorno",
		      dd: "%d giorni",
		      M: "un mese",
		      MM: "%d mesi",
		      y: "un anno",
		      yy: "%d anni"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("it", {
		    months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
		    monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
		    weekdays: "domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato".split("_"),
		    weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
		    weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: function () {
		        return "[Oggi a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
		      },
		      nextDay: function () {
		        return "[Domani a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
		      },
		      nextWeek: function () {
		        return "dddd [a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
		      },
		      lastDay: function () {
		        return "[Ieri a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
		      },
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[La scorsa] dddd [a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";

		          default:
		            return "[Lo scorso] dddd [a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "tra %s",
		      past: "%s fa",
		      s: "alcuni secondi",
		      ss: "%d secondi",
		      m: "un minuto",
		      mm: "%d minuti",
		      h: "un'ora",
		      hh: "%d ore",
		      d: "un giorno",
		      dd: "%d giorni",
		      w: "una settimana",
		      ww: "%d settimane",
		      M: "un mese",
		      MM: "%d mesi",
		      y: "un anno",
		      yy: "%d anni"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("ja", {
		    eras: [{
		      since: "2019-05-01",
		      offset: 1,
		      name: "\u4ee4\u548c",
		      narrow: "\u32ff",
		      abbr: "R"
		    }, {
		      since: "1989-01-08",
		      until: "2019-04-30",
		      offset: 1,
		      name: "\u5e73\u6210",
		      narrow: "\u337b",
		      abbr: "H"
		    }, {
		      since: "1926-12-25",
		      until: "1989-01-07",
		      offset: 1,
		      name: "\u662d\u548c",
		      narrow: "\u337c",
		      abbr: "S"
		    }, {
		      since: "1912-07-30",
		      until: "1926-12-24",
		      offset: 1,
		      name: "\u5927\u6b63",
		      narrow: "\u337d",
		      abbr: "T"
		    }, {
		      since: "1873-01-01",
		      until: "1912-07-29",
		      offset: 6,
		      name: "\u660e\u6cbb",
		      narrow: "\u337e",
		      abbr: "M"
		    }, {
		      since: "0001-01-01",
		      until: "1873-12-31",
		      offset: 1,
		      name: "\u897f\u66a6",
		      narrow: "AD",
		      abbr: "AD"
		    }, {
		      since: "0000-12-31",
		      until: -1 / 0,
		      offset: 1,
		      name: "\u7d00\u5143\u524d",
		      narrow: "BC",
		      abbr: "BC"
		    }],
		    eraYearOrdinalRegex: /(\u5143|\d+)\u5e74/,
		    eraYearOrdinalParse: function (e, a) {
		      return "\u5143" === a[1] ? 1 : parseInt(a[1] || e, 10);
		    },
		    months: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
		    monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
		    weekdays: "\u65e5\u66dc\u65e5_\u6708\u66dc\u65e5_\u706b\u66dc\u65e5_\u6c34\u66dc\u65e5_\u6728\u66dc\u65e5_\u91d1\u66dc\u65e5_\u571f\u66dc\u65e5".split("_"),
		    weekdaysShort: "\u65e5_\u6708_\u706b_\u6c34_\u6728_\u91d1_\u571f".split("_"),
		    weekdaysMin: "\u65e5_\u6708_\u706b_\u6c34_\u6728_\u91d1_\u571f".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY/MM/DD",
		      LL: "YYYY\u5e74M\u6708D\u65e5",
		      LLL: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      LLLL: "YYYY\u5e74M\u6708D\u65e5 dddd HH:mm",
		      l: "YYYY/MM/DD",
		      ll: "YYYY\u5e74M\u6708D\u65e5",
		      lll: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      llll: "YYYY\u5e74M\u6708D\u65e5(ddd) HH:mm"
		    },
		    meridiemParse: /\u5348\u524d|\u5348\u5f8c/i,
		    isPM: function (e) {
		      return "\u5348\u5f8c" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u5348\u524d" : "\u5348\u5f8c";
		    },
		    calendar: {
		      sameDay: "[\u4eca\u65e5] LT",
		      nextDay: "[\u660e\u65e5] LT",
		      nextWeek: function (e) {
		        return e.week() !== this.week() ? "[\u6765\u9031]dddd LT" : "dddd LT";
		      },
		      lastDay: "[\u6628\u65e5] LT",
		      lastWeek: function (e) {
		        return this.week() !== e.week() ? "[\u5148\u9031]dddd LT" : "dddd LT";
		      },
		      sameElse: "L"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\u65e5/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "y":
		          return 1 === e ? "\u5143\u5e74" : e + "\u5e74";

		        case "d":
		        case "D":
		        case "DDD":
		          return e + "\u65e5";

		        default:
		          return e;
		      }
		    },
		    relativeTime: {
		      future: "%s\u5f8c",
		      past: "%s\u524d",
		      s: "\u6570\u79d2",
		      ss: "%d\u79d2",
		      m: "1\u5206",
		      mm: "%d\u5206",
		      h: "1\u6642\u9593",
		      hh: "%d\u6642\u9593",
		      d: "1\u65e5",
		      dd: "%d\u65e5",
		      M: "1\u30f6\u6708",
		      MM: "%d\u30f6\u6708",
		      y: "1\u5e74",
		      yy: "%d\u5e74"
		    }
		  }), e.defineLocale("jv", {
		    months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),
		    monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),
		    weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
		    weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
		    weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
		    longDateFormat: {
		      LT: "HH.mm",
		      LTS: "HH.mm.ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY [pukul] HH.mm",
		      LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
		    },
		    meridiemParse: /enjing|siyang|sonten|ndalu/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "enjing" === a ? e : "siyang" === a ? 11 <= e ? e : e + 12 : "sonten" === a || "ndalu" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu";
		    },
		    calendar: {
		      sameDay: "[Dinten puniko pukul] LT",
		      nextDay: "[Mbenjang pukul] LT",
		      nextWeek: "dddd [pukul] LT",
		      lastDay: "[Kala wingi pukul] LT",
		      lastWeek: "dddd [kepengker pukul] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "wonten ing %s",
		      past: "%s ingkang kepengker",
		      s: "sawetawis detik",
		      ss: "%d detik",
		      m: "setunggal menit",
		      mm: "%d menit",
		      h: "setunggal jam",
		      hh: "%d jam",
		      d: "sedinten",
		      dd: "%d dinten",
		      M: "sewulan",
		      MM: "%d wulan",
		      y: "setaun",
		      yy: "%d taun"
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("ka", {
		    months: "\u10d8\u10d0\u10dc\u10d5\u10d0\u10e0\u10d8_\u10d7\u10d4\u10d1\u10d4\u10e0\u10d5\u10d0\u10da\u10d8_\u10db\u10d0\u10e0\u10e2\u10d8_\u10d0\u10de\u10e0\u10d8\u10da\u10d8_\u10db\u10d0\u10d8\u10e1\u10d8_\u10d8\u10d5\u10dc\u10d8\u10e1\u10d8_\u10d8\u10d5\u10da\u10d8\u10e1\u10d8_\u10d0\u10d2\u10d5\u10d8\u10e1\u10e2\u10dd_\u10e1\u10d4\u10e5\u10e2\u10d4\u10db\u10d1\u10d4\u10e0\u10d8_\u10dd\u10e5\u10e2\u10dd\u10db\u10d1\u10d4\u10e0\u10d8_\u10dc\u10dd\u10d4\u10db\u10d1\u10d4\u10e0\u10d8_\u10d3\u10d4\u10d9\u10d4\u10db\u10d1\u10d4\u10e0\u10d8".split("_"),
		    monthsShort: "\u10d8\u10d0\u10dc_\u10d7\u10d4\u10d1_\u10db\u10d0\u10e0_\u10d0\u10de\u10e0_\u10db\u10d0\u10d8_\u10d8\u10d5\u10dc_\u10d8\u10d5\u10da_\u10d0\u10d2\u10d5_\u10e1\u10d4\u10e5_\u10dd\u10e5\u10e2_\u10dc\u10dd\u10d4_\u10d3\u10d4\u10d9".split("_"),
		    weekdays: {
		      standalone: "\u10d9\u10d5\u10d8\u10e0\u10d0_\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10d8_\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8".split("_"),
		      format: "\u10d9\u10d5\u10d8\u10e0\u10d0\u10e1_\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10e1_\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1".split("_"),
		      isFormat: /(\u10ec\u10d8\u10dc\u10d0|\u10e8\u10d4\u10db\u10d3\u10d4\u10d2)/
		    },
		    weekdaysShort: "\u10d9\u10d5\u10d8_\u10dd\u10e0\u10e8_\u10e1\u10d0\u10db_\u10dd\u10d7\u10ee_\u10ee\u10e3\u10d7_\u10de\u10d0\u10e0_\u10e8\u10d0\u10d1".split("_"),
		    weekdaysMin: "\u10d9\u10d5_\u10dd\u10e0_\u10e1\u10d0_\u10dd\u10d7_\u10ee\u10e3_\u10de\u10d0_\u10e8\u10d0".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u10d3\u10e6\u10d4\u10e1] LT[-\u10d6\u10d4]",
		      nextDay: "[\u10ee\u10d5\u10d0\u10da] LT[-\u10d6\u10d4]",
		      lastDay: "[\u10d2\u10e3\u10e8\u10d8\u10dc] LT[-\u10d6\u10d4]",
		      nextWeek: "[\u10e8\u10d4\u10db\u10d3\u10d4\u10d2] dddd LT[-\u10d6\u10d4]",
		      lastWeek: "[\u10ec\u10d8\u10dc\u10d0] dddd LT-\u10d6\u10d4",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: function (e) {
		        return e.replace(/(\u10ec\u10d0\u10db|\u10ec\u10e3\u10d7|\u10e1\u10d0\u10d0\u10d7|\u10ec\u10d4\u10da|\u10d3\u10e6|\u10d7\u10d5)(\u10d8|\u10d4)/, function (e, a, _) {
		          return "\u10d8" === _ ? a + "\u10e8\u10d8" : a + _ + "\u10e8\u10d8";
		        });
		      },
		      past: function (e) {
		        return /(\u10ec\u10d0\u10db\u10d8|\u10ec\u10e3\u10d7\u10d8|\u10e1\u10d0\u10d0\u10d7\u10d8|\u10d3\u10e6\u10d4|\u10d7\u10d5\u10d4)/.test(e) ? e.replace(/(\u10d8|\u10d4)$/, "\u10d8\u10e1 \u10ec\u10d8\u10dc") : /\u10ec\u10d4\u10da\u10d8/.test(e) ? e.replace(/\u10ec\u10d4\u10da\u10d8$/, "\u10ec\u10da\u10d8\u10e1 \u10ec\u10d8\u10dc") : e;
		      },
		      s: "\u10e0\u10d0\u10db\u10d3\u10d4\u10dc\u10d8\u10db\u10d4 \u10ec\u10d0\u10db\u10d8",
		      ss: "%d \u10ec\u10d0\u10db\u10d8",
		      m: "\u10ec\u10e3\u10d7\u10d8",
		      mm: "%d \u10ec\u10e3\u10d7\u10d8",
		      h: "\u10e1\u10d0\u10d0\u10d7\u10d8",
		      hh: "%d \u10e1\u10d0\u10d0\u10d7\u10d8",
		      d: "\u10d3\u10e6\u10d4",
		      dd: "%d \u10d3\u10e6\u10d4",
		      M: "\u10d7\u10d5\u10d4",
		      MM: "%d \u10d7\u10d5\u10d4",
		      y: "\u10ec\u10d4\u10da\u10d8",
		      yy: "%d \u10ec\u10d4\u10da\u10d8"
		    },
		    dayOfMonthOrdinalParse: /0|1-\u10da\u10d8|\u10db\u10d4-\d{1,2}|\d{1,2}-\u10d4/,
		    ordinal: function (e) {
		      return 0 === e ? e : 1 === e ? e + "-\u10da\u10d8" : e < 20 || e <= 100 && e % 20 == 0 || e % 100 == 0 ? "\u10db\u10d4-" + e : e + "-\u10d4";
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  });
		  var pe = {
		    0: "-\u0448\u0456",
		    1: "-\u0448\u0456",
		    2: "-\u0448\u0456",
		    3: "-\u0448\u0456",
		    4: "-\u0448\u0456",
		    5: "-\u0448\u0456",
		    6: "-\u0448\u044b",
		    7: "-\u0448\u0456",
		    8: "-\u0448\u0456",
		    9: "-\u0448\u044b",
		    10: "-\u0448\u044b",
		    20: "-\u0448\u044b",
		    30: "-\u0448\u044b",
		    40: "-\u0448\u044b",
		    50: "-\u0448\u0456",
		    60: "-\u0448\u044b",
		    70: "-\u0448\u0456",
		    80: "-\u0448\u0456",
		    90: "-\u0448\u044b",
		    100: "-\u0448\u0456"
		  },
		      Te = (e.defineLocale("kk", {
		    months: "\u049b\u0430\u04a3\u0442\u0430\u0440_\u0430\u049b\u043f\u0430\u043d_\u043d\u0430\u0443\u0440\u044b\u0437_\u0441\u04d9\u0443\u0456\u0440_\u043c\u0430\u043c\u044b\u0440_\u043c\u0430\u0443\u0441\u044b\u043c_\u0448\u0456\u043b\u0434\u0435_\u0442\u0430\u043c\u044b\u0437_\u049b\u044b\u0440\u043a\u04af\u0439\u0435\u043a_\u049b\u0430\u0437\u0430\u043d_\u049b\u0430\u0440\u0430\u0448\u0430_\u0436\u0435\u043b\u0442\u043e\u049b\u0441\u0430\u043d".split("_"),
		    monthsShort: "\u049b\u0430\u04a3_\u0430\u049b\u043f_\u043d\u0430\u0443_\u0441\u04d9\u0443_\u043c\u0430\u043c_\u043c\u0430\u0443_\u0448\u0456\u043b_\u0442\u0430\u043c_\u049b\u044b\u0440_\u049b\u0430\u0437_\u049b\u0430\u0440_\u0436\u0435\u043b".split("_"),
		    weekdays: "\u0436\u0435\u043a\u0441\u0435\u043d\u0431\u0456_\u0434\u04af\u0439\u0441\u0435\u043d\u0431\u0456_\u0441\u0435\u0439\u0441\u0435\u043d\u0431\u0456_\u0441\u04d9\u0440\u0441\u0435\u043d\u0431\u0456_\u0431\u0435\u0439\u0441\u0435\u043d\u0431\u0456_\u0436\u04b1\u043c\u0430_\u0441\u0435\u043d\u0431\u0456".split("_"),
		    weekdaysShort: "\u0436\u0435\u043a_\u0434\u04af\u0439_\u0441\u0435\u0439_\u0441\u04d9\u0440_\u0431\u0435\u0439_\u0436\u04b1\u043c_\u0441\u0435\u043d".split("_"),
		    weekdaysMin: "\u0436\u043a_\u0434\u0439_\u0441\u0439_\u0441\u0440_\u0431\u0439_\u0436\u043c_\u0441\u043d".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0411\u04af\u0433\u0456\u043d \u0441\u0430\u0493\u0430\u0442] LT",
		      nextDay: "[\u0415\u0440\u0442\u0435\u04a3 \u0441\u0430\u0493\u0430\u0442] LT",
		      nextWeek: "dddd [\u0441\u0430\u0493\u0430\u0442] LT",
		      lastDay: "[\u041a\u0435\u0448\u0435 \u0441\u0430\u0493\u0430\u0442] LT",
		      lastWeek: "[\u04e8\u0442\u043a\u0435\u043d \u0430\u043f\u0442\u0430\u043d\u044b\u04a3] dddd [\u0441\u0430\u0493\u0430\u0442] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0456\u0448\u0456\u043d\u0434\u0435",
		      past: "%s \u0431\u04b1\u0440\u044b\u043d",
		      s: "\u0431\u0456\u0440\u043d\u0435\u0448\u0435 \u0441\u0435\u043a\u0443\u043d\u0434",
		      ss: "%d \u0441\u0435\u043a\u0443\u043d\u0434",
		      m: "\u0431\u0456\u0440 \u043c\u0438\u043d\u0443\u0442",
		      mm: "%d \u043c\u0438\u043d\u0443\u0442",
		      h: "\u0431\u0456\u0440 \u0441\u0430\u0493\u0430\u0442",
		      hh: "%d \u0441\u0430\u0493\u0430\u0442",
		      d: "\u0431\u0456\u0440 \u043a\u04af\u043d",
		      dd: "%d \u043a\u04af\u043d",
		      M: "\u0431\u0456\u0440 \u0430\u0439",
		      MM: "%d \u0430\u0439",
		      y: "\u0431\u0456\u0440 \u0436\u044b\u043b",
		      yy: "%d \u0436\u044b\u043b"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0448\u0456|\u0448\u044b)/,
		    ordinal: function (e) {
		      return e + (pe[e] || pe[e % 10] || pe[100 <= e ? 100 : null]);
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), {
		    1: "\u17e1",
		    2: "\u17e2",
		    3: "\u17e3",
		    4: "\u17e4",
		    5: "\u17e5",
		    6: "\u17e6",
		    7: "\u17e7",
		    8: "\u17e8",
		    9: "\u17e9",
		    0: "\u17e0"
		  }),
		      fe = {
		    "\u17e1": "1",
		    "\u17e2": "2",
		    "\u17e3": "3",
		    "\u17e4": "4",
		    "\u17e5": "5",
		    "\u17e6": "6",
		    "\u17e7": "7",
		    "\u17e8": "8",
		    "\u17e9": "9",
		    "\u17e0": "0"
		  },
		      we = (e.defineLocale("km", {
		    months: "\u1798\u1780\u179a\u17b6_\u1780\u17bb\u1798\u17d2\u1797\u17c8_\u1798\u17b8\u1793\u17b6_\u1798\u17c1\u179f\u17b6_\u17a7\u179f\u1797\u17b6_\u1798\u17b7\u1790\u17bb\u1793\u17b6_\u1780\u1780\u17d2\u1780\u178a\u17b6_\u179f\u17b8\u17a0\u17b6_\u1780\u1789\u17d2\u1789\u17b6_\u178f\u17bb\u179b\u17b6_\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6_\u1792\u17d2\u1793\u17bc".split("_"),
		    monthsShort: "\u1798\u1780\u179a\u17b6_\u1780\u17bb\u1798\u17d2\u1797\u17c8_\u1798\u17b8\u1793\u17b6_\u1798\u17c1\u179f\u17b6_\u17a7\u179f\u1797\u17b6_\u1798\u17b7\u1790\u17bb\u1793\u17b6_\u1780\u1780\u17d2\u1780\u178a\u17b6_\u179f\u17b8\u17a0\u17b6_\u1780\u1789\u17d2\u1789\u17b6_\u178f\u17bb\u179b\u17b6_\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6_\u1792\u17d2\u1793\u17bc".split("_"),
		    weekdays: "\u17a2\u17b6\u1791\u17b7\u178f\u17d2\u1799_\u1785\u17d0\u1793\u17d2\u1791_\u17a2\u1784\u17d2\u1782\u17b6\u179a_\u1796\u17bb\u1792_\u1796\u17d2\u179a\u17a0\u179f\u17d2\u1794\u178f\u17b7\u17cd_\u179f\u17bb\u1780\u17d2\u179a_\u179f\u17c5\u179a\u17cd".split("_"),
		    weekdaysShort: "\u17a2\u17b6_\u1785_\u17a2_\u1796_\u1796\u17d2\u179a_\u179f\u17bb_\u179f".split("_"),
		    weekdaysMin: "\u17a2\u17b6_\u1785_\u17a2_\u1796_\u1796\u17d2\u179a_\u179f\u17bb_\u179f".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u1796\u17d2\u179a\u17b9\u1780|\u179b\u17d2\u1784\u17b6\u1785/,
		    isPM: function (e) {
		      return "\u179b\u17d2\u1784\u17b6\u1785" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u1796\u17d2\u179a\u17b9\u1780" : "\u179b\u17d2\u1784\u17b6\u1785";
		    },
		    calendar: {
		      sameDay: "[\u1790\u17d2\u1784\u17c3\u1793\u17c1\u17c7 \u1798\u17c9\u17c4\u1784] LT",
		      nextDay: "[\u179f\u17d2\u17a2\u17c2\u1780 \u1798\u17c9\u17c4\u1784] LT",
		      nextWeek: "dddd [\u1798\u17c9\u17c4\u1784] LT",
		      lastDay: "[\u1798\u17d2\u179f\u17b7\u179b\u1798\u17b7\u1789 \u1798\u17c9\u17c4\u1784] LT",
		      lastWeek: "dddd [\u179f\u1794\u17d2\u178f\u17b6\u17a0\u17cd\u1798\u17bb\u1793] [\u1798\u17c9\u17c4\u1784] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s\u1791\u17c0\u178f",
		      past: "%s\u1798\u17bb\u1793",
		      s: "\u1794\u17c9\u17bb\u1793\u17d2\u1798\u17b6\u1793\u179c\u17b7\u1793\u17b6\u1791\u17b8",
		      ss: "%d \u179c\u17b7\u1793\u17b6\u1791\u17b8",
		      m: "\u1798\u17bd\u1799\u1793\u17b6\u1791\u17b8",
		      mm: "%d \u1793\u17b6\u1791\u17b8",
		      h: "\u1798\u17bd\u1799\u1798\u17c9\u17c4\u1784",
		      hh: "%d \u1798\u17c9\u17c4\u1784",
		      d: "\u1798\u17bd\u1799\u1790\u17d2\u1784\u17c3",
		      dd: "%d \u1790\u17d2\u1784\u17c3",
		      M: "\u1798\u17bd\u1799\u1781\u17c2",
		      MM: "%d \u1781\u17c2",
		      y: "\u1798\u17bd\u1799\u1786\u17d2\u1793\u17b6\u17c6",
		      yy: "%d \u1786\u17d2\u1793\u17b6\u17c6"
		    },
		    dayOfMonthOrdinalParse: /\u1791\u17b8\d{1,2}/,
		    ordinal: "\u1791\u17b8%d",
		    preparse: function (e) {
		      return e.replace(/[\u17e1\u17e2\u17e3\u17e4\u17e5\u17e6\u17e7\u17e8\u17e9\u17e0]/g, function (e) {
		        return fe[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Te[e];
		      });
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), {
		    1: "\u0ce7",
		    2: "\u0ce8",
		    3: "\u0ce9",
		    4: "\u0cea",
		    5: "\u0ceb",
		    6: "\u0cec",
		    7: "\u0ced",
		    8: "\u0cee",
		    9: "\u0cef",
		    0: "\u0ce6"
		  }),
		      ge = {
		    "\u0ce7": "1",
		    "\u0ce8": "2",
		    "\u0ce9": "3",
		    "\u0cea": "4",
		    "\u0ceb": "5",
		    "\u0cec": "6",
		    "\u0ced": "7",
		    "\u0cee": "8",
		    "\u0cef": "9",
		    "\u0ce6": "0"
		  },
		      He = (e.defineLocale("kn", {
		    months: "\u0c9c\u0ca8\u0cb5\u0cb0\u0cbf_\u0cab\u0cc6\u0cac\u0ccd\u0cb0\u0cb5\u0cb0\u0cbf_\u0cae\u0cbe\u0cb0\u0ccd\u0c9a\u0ccd_\u0c8f\u0caa\u0ccd\u0cb0\u0cbf\u0cb2\u0ccd_\u0cae\u0cc6\u0cd5_\u0c9c\u0cc2\u0ca8\u0ccd_\u0c9c\u0cc1\u0cb2\u0cc6\u0cd6_\u0c86\u0c97\u0cb8\u0ccd\u0c9f\u0ccd_\u0cb8\u0cc6\u0caa\u0ccd\u0c9f\u0cc6\u0c82\u0cac\u0cb0\u0ccd_\u0c85\u0c95\u0ccd\u0c9f\u0cc6\u0cc2\u0cd5\u0cac\u0cb0\u0ccd_\u0ca8\u0cb5\u0cc6\u0c82\u0cac\u0cb0\u0ccd_\u0ca1\u0cbf\u0cb8\u0cc6\u0c82\u0cac\u0cb0\u0ccd".split("_"),
		    monthsShort: "\u0c9c\u0ca8_\u0cab\u0cc6\u0cac\u0ccd\u0cb0_\u0cae\u0cbe\u0cb0\u0ccd\u0c9a\u0ccd_\u0c8f\u0caa\u0ccd\u0cb0\u0cbf\u0cb2\u0ccd_\u0cae\u0cc6\u0cd5_\u0c9c\u0cc2\u0ca8\u0ccd_\u0c9c\u0cc1\u0cb2\u0cc6\u0cd6_\u0c86\u0c97\u0cb8\u0ccd\u0c9f\u0ccd_\u0cb8\u0cc6\u0caa\u0ccd\u0c9f\u0cc6\u0c82_\u0c85\u0c95\u0ccd\u0c9f\u0cc6\u0cc2\u0cd5_\u0ca8\u0cb5\u0cc6\u0c82_\u0ca1\u0cbf\u0cb8\u0cc6\u0c82".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0cad\u0cbe\u0ca8\u0cc1\u0cb5\u0cbe\u0cb0_\u0cb8\u0cc6\u0cc2\u0cd5\u0cae\u0cb5\u0cbe\u0cb0_\u0cae\u0c82\u0c97\u0cb3\u0cb5\u0cbe\u0cb0_\u0cac\u0cc1\u0ca7\u0cb5\u0cbe\u0cb0_\u0c97\u0cc1\u0cb0\u0cc1\u0cb5\u0cbe\u0cb0_\u0cb6\u0cc1\u0c95\u0ccd\u0cb0\u0cb5\u0cbe\u0cb0_\u0cb6\u0ca8\u0cbf\u0cb5\u0cbe\u0cb0".split("_"),
		    weekdaysShort: "\u0cad\u0cbe\u0ca8\u0cc1_\u0cb8\u0cc6\u0cc2\u0cd5\u0cae_\u0cae\u0c82\u0c97\u0cb3_\u0cac\u0cc1\u0ca7_\u0c97\u0cc1\u0cb0\u0cc1_\u0cb6\u0cc1\u0c95\u0ccd\u0cb0_\u0cb6\u0ca8\u0cbf".split("_"),
		    weekdaysMin: "\u0cad\u0cbe_\u0cb8\u0cc6\u0cc2\u0cd5_\u0cae\u0c82_\u0cac\u0cc1_\u0c97\u0cc1_\u0cb6\u0cc1_\u0cb6".split("_"),
		    longDateFormat: {
		      LT: "A h:mm",
		      LTS: "A h:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm",
		      LLLL: "dddd, D MMMM YYYY, A h:mm"
		    },
		    calendar: {
		      sameDay: "[\u0c87\u0c82\u0ca6\u0cc1] LT",
		      nextDay: "[\u0ca8\u0cbe\u0cb3\u0cc6] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0ca8\u0cbf\u0ca8\u0ccd\u0ca8\u0cc6] LT",
		      lastWeek: "[\u0c95\u0cc6\u0cc2\u0ca8\u0cc6\u0caf] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0ca8\u0c82\u0ca4\u0cb0",
		      past: "%s \u0cb9\u0cbf\u0c82\u0ca6\u0cc6",
		      s: "\u0c95\u0cc6\u0cb2\u0cb5\u0cc1 \u0c95\u0ccd\u0cb7\u0ca3\u0c97\u0cb3\u0cc1",
		      ss: "%d \u0cb8\u0cc6\u0c95\u0cc6\u0c82\u0ca1\u0cc1\u0c97\u0cb3\u0cc1",
		      m: "\u0c92\u0c82\u0ca6\u0cc1 \u0ca8\u0cbf\u0cae\u0cbf\u0cb7",
		      mm: "%d \u0ca8\u0cbf\u0cae\u0cbf\u0cb7",
		      h: "\u0c92\u0c82\u0ca6\u0cc1 \u0c97\u0c82\u0c9f\u0cc6",
		      hh: "%d \u0c97\u0c82\u0c9f\u0cc6",
		      d: "\u0c92\u0c82\u0ca6\u0cc1 \u0ca6\u0cbf\u0ca8",
		      dd: "%d \u0ca6\u0cbf\u0ca8",
		      M: "\u0c92\u0c82\u0ca6\u0cc1 \u0ca4\u0cbf\u0c82\u0c97\u0cb3\u0cc1",
		      MM: "%d \u0ca4\u0cbf\u0c82\u0c97\u0cb3\u0cc1",
		      y: "\u0c92\u0c82\u0ca6\u0cc1 \u0cb5\u0cb0\u0ccd\u0cb7",
		      yy: "%d \u0cb5\u0cb0\u0ccd\u0cb7"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0ce6]/g, function (e) {
		        return ge[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return we[e];
		      });
		    },
		    meridiemParse: /\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf|\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6|\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8|\u0cb8\u0c82\u0c9c\u0cc6/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf" === a ? e < 4 ? e : e + 12 : "\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6" === a ? e : "\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8" === a ? 10 <= e ? e : e + 12 : "\u0cb8\u0c82\u0c9c\u0cc6" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf" : e < 10 ? "\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6" : e < 17 ? "\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8" : e < 20 ? "\u0cb8\u0c82\u0c9c\u0cc6" : "\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\u0ca8\u0cc6\u0cd5)/,
		    ordinal: function (e) {
		      return e + "\u0ca8\u0cc6\u0cd5";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("ko", {
		    months: "1\uc6d4_2\uc6d4_3\uc6d4_4\uc6d4_5\uc6d4_6\uc6d4_7\uc6d4_8\uc6d4_9\uc6d4_10\uc6d4_11\uc6d4_12\uc6d4".split("_"),
		    monthsShort: "1\uc6d4_2\uc6d4_3\uc6d4_4\uc6d4_5\uc6d4_6\uc6d4_7\uc6d4_8\uc6d4_9\uc6d4_10\uc6d4_11\uc6d4_12\uc6d4".split("_"),
		    weekdays: "\uc77c\uc694\uc77c_\uc6d4\uc694\uc77c_\ud654\uc694\uc77c_\uc218\uc694\uc77c_\ubaa9\uc694\uc77c_\uae08\uc694\uc77c_\ud1a0\uc694\uc77c".split("_"),
		    weekdaysShort: "\uc77c_\uc6d4_\ud654_\uc218_\ubaa9_\uae08_\ud1a0".split("_"),
		    weekdaysMin: "\uc77c_\uc6d4_\ud654_\uc218_\ubaa9_\uae08_\ud1a0".split("_"),
		    longDateFormat: {
		      LT: "A h:mm",
		      LTS: "A h:mm:ss",
		      L: "YYYY.MM.DD.",
		      LL: "YYYY\ub144 MMMM D\uc77c",
		      LLL: "YYYY\ub144 MMMM D\uc77c A h:mm",
		      LLLL: "YYYY\ub144 MMMM D\uc77c dddd A h:mm",
		      l: "YYYY.MM.DD.",
		      ll: "YYYY\ub144 MMMM D\uc77c",
		      lll: "YYYY\ub144 MMMM D\uc77c A h:mm",
		      llll: "YYYY\ub144 MMMM D\uc77c dddd A h:mm"
		    },
		    calendar: {
		      sameDay: "\uc624\ub298 LT",
		      nextDay: "\ub0b4\uc77c LT",
		      nextWeek: "dddd LT",
		      lastDay: "\uc5b4\uc81c LT",
		      lastWeek: "\uc9c0\ub09c\uc8fc dddd LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \ud6c4",
		      past: "%s \uc804",
		      s: "\uba87 \ucd08",
		      ss: "%d\ucd08",
		      m: "1\ubd84",
		      mm: "%d\ubd84",
		      h: "\ud55c \uc2dc\uac04",
		      hh: "%d\uc2dc\uac04",
		      d: "\ud558\ub8e8",
		      dd: "%d\uc77c",
		      M: "\ud55c \ub2ec",
		      MM: "%d\ub2ec",
		      y: "\uc77c \ub144",
		      yy: "%d\ub144"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\uc77c|\uc6d4|\uc8fc)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + "\uc77c";

		        case "M":
		          return e + "\uc6d4";

		        case "w":
		        case "W":
		          return e + "\uc8fc";

		        default:
		          return e;
		      }
		    },
		    meridiemParse: /\uc624\uc804|\uc624\ud6c4/,
		    isPM: function (e) {
		      return "\uc624\ud6c4" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\uc624\uc804" : "\uc624\ud6c4";
		    }
		  }), {
		    1: "\u0661",
		    2: "\u0662",
		    3: "\u0663",
		    4: "\u0664",
		    5: "\u0665",
		    6: "\u0666",
		    7: "\u0667",
		    8: "\u0668",
		    9: "\u0669",
		    0: "\u0660"
		  }),
		      be = {
		    "\u0661": "1",
		    "\u0662": "2",
		    "\u0663": "3",
		    "\u0664": "4",
		    "\u0665": "5",
		    "\u0666": "6",
		    "\u0667": "7",
		    "\u0668": "8",
		    "\u0669": "9",
		    "\u0660": "0"
		  },
		      n = ["\u06a9\u0627\u0646\u0648\u0646\u06cc \u062f\u0648\u0648\u06d5\u0645", "\u0634\u0648\u0628\u0627\u062a", "\u0626\u0627\u0632\u0627\u0631", "\u0646\u06cc\u0633\u0627\u0646", "\u0626\u0627\u06cc\u0627\u0631", "\u062d\u0648\u0632\u06d5\u06cc\u0631\u0627\u0646", "\u062a\u06d5\u0645\u0645\u0648\u0632", "\u0626\u0627\u0628", "\u0626\u06d5\u06cc\u0644\u0648\u0648\u0644", "\u062a\u0634\u0631\u06cc\u0646\u06cc \u06cc\u06d5\u0643\u06d5\u0645", "\u062a\u0634\u0631\u06cc\u0646\u06cc \u062f\u0648\u0648\u06d5\u0645", "\u0643\u0627\u0646\u0648\u0646\u06cc \u06cc\u06d5\u06a9\u06d5\u0645"],
		      Se = (e.defineLocale("ku", {
		    months: n,
		    monthsShort: n,
		    weekdays: "\u06cc\u0647\u200c\u0643\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u062f\u0648\u0648\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0633\u06ce\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0686\u0648\u0627\u0631\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u067e\u06ce\u0646\u062c\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0647\u0647\u200c\u06cc\u0646\u06cc_\u0634\u0647\u200c\u0645\u0645\u0647\u200c".split("_"),
		    weekdaysShort: "\u06cc\u0647\u200c\u0643\u0634\u0647\u200c\u0645_\u062f\u0648\u0648\u0634\u0647\u200c\u0645_\u0633\u06ce\u0634\u0647\u200c\u0645_\u0686\u0648\u0627\u0631\u0634\u0647\u200c\u0645_\u067e\u06ce\u0646\u062c\u0634\u0647\u200c\u0645_\u0647\u0647\u200c\u06cc\u0646\u06cc_\u0634\u0647\u200c\u0645\u0645\u0647\u200c".split("_"),
		    weekdaysMin: "\u06cc_\u062f_\u0633_\u0686_\u067e_\u0647_\u0634".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c|\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc/,
		    isPM: function (e) {
		      return /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc" : "\u0626\u06ce\u0648\u0627\u0631\u0647\u200c";
		    },
		    calendar: {
		      sameDay: "[\u0626\u0647\u200c\u0645\u0631\u06c6 \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",
		      nextDay: "[\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",
		      nextWeek: "dddd [\u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",
		      lastDay: "[\u062f\u0648\u06ce\u0646\u06ce \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",
		      lastWeek: "dddd [\u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0644\u0647\u200c %s",
		      past: "%s",
		      s: "\u0686\u0647\u200c\u0646\u062f \u0686\u0631\u0643\u0647\u200c\u06cc\u0647\u200c\u0643",
		      ss: "\u0686\u0631\u0643\u0647\u200c %d",
		      m: "\u06cc\u0647\u200c\u0643 \u062e\u0648\u0644\u0647\u200c\u0643",
		      mm: "%d \u062e\u0648\u0644\u0647\u200c\u0643",
		      h: "\u06cc\u0647\u200c\u0643 \u0643\u0627\u062a\u0698\u0645\u06ce\u0631",
		      hh: "%d \u0643\u0627\u062a\u0698\u0645\u06ce\u0631",
		      d: "\u06cc\u0647\u200c\u0643 \u0695\u06c6\u0698",
		      dd: "%d \u0695\u06c6\u0698",
		      M: "\u06cc\u0647\u200c\u0643 \u0645\u0627\u0646\u06af",
		      MM: "%d \u0645\u0627\u0646\u06af",
		      y: "\u06cc\u0647\u200c\u0643 \u0633\u0627\u06b5",
		      yy: "%d \u0633\u0627\u06b5"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
		        return be[e];
		      }).replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return He[e];
		      }).replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 6,
		      doy: 12
		    }
		  }), {
		    0: "-\u0447\u04af",
		    1: "-\u0447\u0438",
		    2: "-\u0447\u0438",
		    3: "-\u0447\u04af",
		    4: "-\u0447\u04af",
		    5: "-\u0447\u0438",
		    6: "-\u0447\u044b",
		    7: "-\u0447\u0438",
		    8: "-\u0447\u0438",
		    9: "-\u0447\u0443",
		    10: "-\u0447\u0443",
		    20: "-\u0447\u044b",
		    30: "-\u0447\u0443",
		    40: "-\u0447\u044b",
		    50: "-\u0447\u04af",
		    60: "-\u0447\u044b",
		    70: "-\u0447\u0438",
		    80: "-\u0447\u0438",
		    90: "-\u0447\u0443",
		    100: "-\u0447\u04af"
		  });

		  function ve(e, a, _, s) {
		    var d = {
		      m: ["eng Minutt", "enger Minutt"],
		      h: ["eng Stonn", "enger Stonn"],
		      d: ["een Dag", "engem Dag"],
		      M: ["ee Mount", "engem Mount"],
		      y: ["ee Joer", "engem Joer"]
		    };
		    return a ? d[_][0] : d[_][1];
		  }

		  function je(e) {
		    if (e = parseInt(e, 10), isNaN(e)) return !1;
		    if (e < 0) return !0;
		    if (e < 10) return 4 <= e && e <= 7;
		    var a;
		    if (e < 100) return je(0 == (a = e % 10) ? e / 10 : a);

		    if (e < 1e4) {
		      for (; 10 <= e;) e /= 10;

		      return je(e);
		    }

		    return je(e /= 1e3);
		  }

		  e.defineLocale("ky", {
		    months: "\u044f\u043d\u0432\u0430\u0440\u044c_\u0444\u0435\u0432\u0440\u0430\u043b\u044c_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b\u044c_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c_\u043e\u043a\u0442\u044f\u0431\u0440\u044c_\u043d\u043e\u044f\u0431\u0440\u044c_\u0434\u0435\u043a\u0430\u0431\u0440\u044c".split("_"),
		    monthsShort: "\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a".split("_"),
		    weekdays: "\u0416\u0435\u043a\u0448\u0435\u043c\u0431\u0438_\u0414\u04af\u0439\u0448\u04e9\u043c\u0431\u04af_\u0428\u0435\u0439\u0448\u0435\u043c\u0431\u0438_\u0428\u0430\u0440\u0448\u0435\u043c\u0431\u0438_\u0411\u0435\u0439\u0448\u0435\u043c\u0431\u0438_\u0416\u0443\u043c\u0430_\u0418\u0448\u0435\u043c\u0431\u0438".split("_"),
		    weekdaysShort: "\u0416\u0435\u043a_\u0414\u04af\u0439_\u0428\u0435\u0439_\u0428\u0430\u0440_\u0411\u0435\u0439_\u0416\u0443\u043c_\u0418\u0448\u0435".split("_"),
		    weekdaysMin: "\u0416\u043a_\u0414\u0439_\u0428\u0439_\u0428\u0440_\u0411\u0439_\u0416\u043c_\u0418\u0448".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0411\u04af\u0433\u04af\u043d \u0441\u0430\u0430\u0442] LT",
		      nextDay: "[\u042d\u0440\u0442\u0435\u04a3 \u0441\u0430\u0430\u0442] LT",
		      nextWeek: "dddd [\u0441\u0430\u0430\u0442] LT",
		      lastDay: "[\u041a\u0435\u0447\u044d\u044d \u0441\u0430\u0430\u0442] LT",
		      lastWeek: "[\u04e8\u0442\u043a\u04e9\u043d \u0430\u043f\u0442\u0430\u043d\u044b\u043d] dddd [\u043a\u04af\u043d\u04af] [\u0441\u0430\u0430\u0442] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0438\u0447\u0438\u043d\u0434\u0435",
		      past: "%s \u043c\u0443\u0440\u0443\u043d",
		      s: "\u0431\u0438\u0440\u043d\u0435\u0447\u0435 \u0441\u0435\u043a\u0443\u043d\u0434",
		      ss: "%d \u0441\u0435\u043a\u0443\u043d\u0434",
		      m: "\u0431\u0438\u0440 \u043c\u04af\u043d\u04e9\u0442",
		      mm: "%d \u043c\u04af\u043d\u04e9\u0442",
		      h: "\u0431\u0438\u0440 \u0441\u0430\u0430\u0442",
		      hh: "%d \u0441\u0430\u0430\u0442",
		      d: "\u0431\u0438\u0440 \u043a\u04af\u043d",
		      dd: "%d \u043a\u04af\u043d",
		      M: "\u0431\u0438\u0440 \u0430\u0439",
		      MM: "%d \u0430\u0439",
		      y: "\u0431\u0438\u0440 \u0436\u044b\u043b",
		      yy: "%d \u0436\u044b\u043b"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0447\u0438|\u0447\u044b|\u0447\u04af|\u0447\u0443)/,
		    ordinal: function (e) {
		      return e + (Se[e] || Se[e % 10] || Se[100 <= e ? 100 : null]);
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("lb", {
		    months: "Januar_Februar_M\xe4erz_Abr\xebll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
		    monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "Sonndeg_M\xe9indeg_D\xebnschdeg_M\xebttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
		    weekdaysShort: "So._M\xe9._D\xeb._M\xeb._Do._Fr._Sa.".split("_"),
		    weekdaysMin: "So_M\xe9_D\xeb_M\xeb_Do_Fr_Sa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm [Auer]",
		      LTS: "H:mm:ss [Auer]",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm [Auer]",
		      LLLL: "dddd, D. MMMM YYYY H:mm [Auer]"
		    },
		    calendar: {
		      sameDay: "[Haut um] LT",
		      sameElse: "L",
		      nextDay: "[Muer um] LT",
		      nextWeek: "dddd [um] LT",
		      lastDay: "[G\xebschter um] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 2:
		          case 4:
		            return "[Leschten] dddd [um] LT";

		          default:
		            return "[Leschte] dddd [um] LT";
		        }
		      }
		    },
		    relativeTime: {
		      future: function (e) {
		        return je(e.substr(0, e.indexOf(" "))) ? "a " + e : "an " + e;
		      },
		      past: function (e) {
		        return je(e.substr(0, e.indexOf(" "))) ? "viru " + e : "virun " + e;
		      },
		      s: "e puer Sekonnen",
		      ss: "%d Sekonnen",
		      m: ve,
		      mm: "%d Minutten",
		      h: ve,
		      hh: "%d Stonnen",
		      d: ve,
		      dd: "%d Deeg",
		      M: ve,
		      MM: "%d M\xe9int",
		      y: ve,
		      yy: "%d Joer"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("lo", {
		    months: "\u0ea1\u0eb1\u0e87\u0e81\u0ead\u0e99_\u0e81\u0eb8\u0ea1\u0e9e\u0eb2_\u0ea1\u0eb5\u0e99\u0eb2_\u0ec0\u0ea1\u0eaa\u0eb2_\u0e9e\u0eb6\u0e94\u0eaa\u0eb0\u0e9e\u0eb2_\u0ea1\u0eb4\u0e96\u0eb8\u0e99\u0eb2_\u0e81\u0ecd\u0ea5\u0eb0\u0e81\u0ebb\u0e94_\u0eaa\u0eb4\u0e87\u0eab\u0eb2_\u0e81\u0eb1\u0e99\u0e8d\u0eb2_\u0e95\u0eb8\u0ea5\u0eb2_\u0e9e\u0eb0\u0e88\u0eb4\u0e81_\u0e97\u0eb1\u0e99\u0ea7\u0eb2".split("_"),
		    monthsShort: "\u0ea1\u0eb1\u0e87\u0e81\u0ead\u0e99_\u0e81\u0eb8\u0ea1\u0e9e\u0eb2_\u0ea1\u0eb5\u0e99\u0eb2_\u0ec0\u0ea1\u0eaa\u0eb2_\u0e9e\u0eb6\u0e94\u0eaa\u0eb0\u0e9e\u0eb2_\u0ea1\u0eb4\u0e96\u0eb8\u0e99\u0eb2_\u0e81\u0ecd\u0ea5\u0eb0\u0e81\u0ebb\u0e94_\u0eaa\u0eb4\u0e87\u0eab\u0eb2_\u0e81\u0eb1\u0e99\u0e8d\u0eb2_\u0e95\u0eb8\u0ea5\u0eb2_\u0e9e\u0eb0\u0e88\u0eb4\u0e81_\u0e97\u0eb1\u0e99\u0ea7\u0eb2".split("_"),
		    weekdays: "\u0ead\u0eb2\u0e97\u0eb4\u0e94_\u0e88\u0eb1\u0e99_\u0ead\u0eb1\u0e87\u0e84\u0eb2\u0e99_\u0e9e\u0eb8\u0e94_\u0e9e\u0eb0\u0eab\u0eb1\u0e94_\u0eaa\u0eb8\u0e81_\u0ec0\u0eaa\u0ebb\u0eb2".split("_"),
		    weekdaysShort: "\u0e97\u0eb4\u0e94_\u0e88\u0eb1\u0e99_\u0ead\u0eb1\u0e87\u0e84\u0eb2\u0e99_\u0e9e\u0eb8\u0e94_\u0e9e\u0eb0\u0eab\u0eb1\u0e94_\u0eaa\u0eb8\u0e81_\u0ec0\u0eaa\u0ebb\u0eb2".split("_"),
		    weekdaysMin: "\u0e97_\u0e88_\u0ead\u0e84_\u0e9e_\u0e9e\u0eab_\u0eaa\u0e81_\u0eaa".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "\u0ea7\u0eb1\u0e99dddd D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2|\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87/,
		    isPM: function (e) {
		      return "\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2" : "\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87";
		    },
		    calendar: {
		      sameDay: "[\u0ea1\u0eb7\u0ec9\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT",
		      nextDay: "[\u0ea1\u0eb7\u0ec9\u0ead\u0eb7\u0ec8\u0e99\u0ec0\u0ea7\u0ea5\u0eb2] LT",
		      nextWeek: "[\u0ea7\u0eb1\u0e99]dddd[\u0edc\u0ec9\u0eb2\u0ec0\u0ea7\u0ea5\u0eb2] LT",
		      lastDay: "[\u0ea1\u0eb7\u0ec9\u0ea7\u0eb2\u0e99\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT",
		      lastWeek: "[\u0ea7\u0eb1\u0e99]dddd[\u0ec1\u0ea5\u0ec9\u0ea7\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0ead\u0eb5\u0e81 %s",
		      past: "%s\u0e9c\u0ec8\u0eb2\u0e99\u0ea1\u0eb2",
		      s: "\u0e9a\u0ecd\u0ec8\u0ec0\u0e97\u0ebb\u0ec8\u0eb2\u0ec3\u0e94\u0ea7\u0eb4\u0e99\u0eb2\u0e97\u0eb5",
		      ss: "%d \u0ea7\u0eb4\u0e99\u0eb2\u0e97\u0eb5",
		      m: "1 \u0e99\u0eb2\u0e97\u0eb5",
		      mm: "%d \u0e99\u0eb2\u0e97\u0eb5",
		      h: "1 \u0e8a\u0ebb\u0ec8\u0ea7\u0ec2\u0ea1\u0e87",
		      hh: "%d \u0e8a\u0ebb\u0ec8\u0ea7\u0ec2\u0ea1\u0e87",
		      d: "1 \u0ea1\u0eb7\u0ec9",
		      dd: "%d \u0ea1\u0eb7\u0ec9",
		      M: "1 \u0ec0\u0e94\u0eb7\u0ead\u0e99",
		      MM: "%d \u0ec0\u0e94\u0eb7\u0ead\u0e99",
		      y: "1 \u0e9b\u0eb5",
		      yy: "%d \u0e9b\u0eb5"
		    },
		    dayOfMonthOrdinalParse: /(\u0e97\u0eb5\u0ec8)\d{1,2}/,
		    ordinal: function (e) {
		      return "\u0e97\u0eb5\u0ec8" + e;
		    }
		  });
		  var xe = {
		    ss: "sekund\u0117_sekund\u017ei\u0173_sekundes",
		    m: "minut\u0117_minut\u0117s_minut\u0119",
		    mm: "minut\u0117s_minu\u010di\u0173_minutes",
		    h: "valanda_valandos_valand\u0105",
		    hh: "valandos_valand\u0173_valandas",
		    d: "diena_dienos_dien\u0105",
		    dd: "dienos_dien\u0173_dienas",
		    M: "m\u0117nuo_m\u0117nesio_m\u0117nes\u012f",
		    MM: "m\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius",
		    y: "metai_met\u0173_metus",
		    yy: "metai_met\u0173_metus"
		  };

		  function Pe(e, a, _, s) {
		    return a ? f(_)[0] : s ? f(_)[1] : f(_)[2];
		  }

		  function We(e) {
		    return e % 10 == 0 || 10 < e && e < 20;
		  }

		  function f(e) {
		    return xe[e].split("_");
		  }

		  function Ae(e, a, _, s) {
		    var d = e + " ";
		    return 1 === e ? d + Pe(0, a, _[0], s) : a ? d + (We(e) ? f(_)[1] : f(_)[0]) : s ? d + f(_)[1] : d + (We(e) ? f(_)[1] : f(_)[2]);
		  }

		  e.defineLocale("lt", {
		    months: {
		      format: "sausio_vasario_kovo_baland\u017eio_gegu\u017e\u0117s_bir\u017eelio_liepos_rugpj\u016b\u010dio_rugs\u0117jo_spalio_lapkri\u010dio_gruod\u017eio".split("_"),
		      standalone: "sausis_vasaris_kovas_balandis_gegu\u017e\u0117_bir\u017eelis_liepa_rugpj\u016btis_rugs\u0117jis_spalis_lapkritis_gruodis".split("_"),
		      isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
		    },
		    monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
		    weekdays: {
		      format: "sekmadien\u012f_pirmadien\u012f_antradien\u012f_tre\u010diadien\u012f_ketvirtadien\u012f_penktadien\u012f_\u0161e\u0161tadien\u012f".split("_"),
		      standalone: "sekmadienis_pirmadienis_antradienis_tre\u010diadienis_ketvirtadienis_penktadienis_\u0161e\u0161tadienis".split("_"),
		      isFormat: /dddd HH:mm/
		    },
		    weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_\u0160e\u0161".split("_"),
		    weekdaysMin: "S_P_A_T_K_Pn_\u0160".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "YYYY [m.] MMMM D [d.]",
		      LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
		      LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
		      l: "YYYY-MM-DD",
		      ll: "YYYY [m.] MMMM D [d.]",
		      lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
		      llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"
		    },
		    calendar: {
		      sameDay: "[\u0160iandien] LT",
		      nextDay: "[Rytoj] LT",
		      nextWeek: "dddd LT",
		      lastDay: "[Vakar] LT",
		      lastWeek: "[Pra\u0117jus\u012f] dddd LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "po %s",
		      past: "prie\u0161 %s",
		      s: function (e, a, _, s) {
		        return a ? "kelios sekund\u0117s" : s ? "keli\u0173 sekund\u017ei\u0173" : "kelias sekundes";
		      },
		      ss: Ae,
		      m: Pe,
		      mm: Ae,
		      h: Pe,
		      hh: Ae,
		      d: Pe,
		      dd: Ae,
		      M: Pe,
		      MM: Ae,
		      y: Pe,
		      yy: Ae
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
		    ordinal: function (e) {
		      return e + "-oji";
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var Oe = {
		    ss: "sekundes_sekund\u0113m_sekunde_sekundes".split("_"),
		    m: "min\u016btes_min\u016bt\u0113m_min\u016bte_min\u016btes".split("_"),
		    mm: "min\u016btes_min\u016bt\u0113m_min\u016bte_min\u016btes".split("_"),
		    h: "stundas_stund\u0101m_stunda_stundas".split("_"),
		    hh: "stundas_stund\u0101m_stunda_stundas".split("_"),
		    d: "dienas_dien\u0101m_diena_dienas".split("_"),
		    dd: "dienas_dien\u0101m_diena_dienas".split("_"),
		    M: "m\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i".split("_"),
		    MM: "m\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i".split("_"),
		    y: "gada_gadiem_gads_gadi".split("_"),
		    yy: "gada_gadiem_gads_gadi".split("_")
		  };

		  function Ee(e, a, _) {
		    return _ ? a % 10 == 1 && a % 100 != 11 ? e[2] : e[3] : a % 10 == 1 && a % 100 != 11 ? e[0] : e[1];
		  }

		  function Fe(e, a, _) {
		    return e + " " + Ee(Oe[_], e, a);
		  }

		  function ze(e, a, _) {
		    return Ee(Oe[_], e, a);
		  }

		  e.defineLocale("lv", {
		    months: "janv\u0101ris_febru\u0101ris_marts_apr\u012blis_maijs_j\u016bnijs_j\u016blijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
		    monthsShort: "jan_feb_mar_apr_mai_j\u016bn_j\u016bl_aug_sep_okt_nov_dec".split("_"),
		    weekdays: "sv\u0113tdiena_pirmdiena_otrdiena_tre\u0161diena_ceturtdiena_piektdiena_sestdiena".split("_"),
		    weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
		    weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY.",
		      LL: "YYYY. [gada] D. MMMM",
		      LLL: "YYYY. [gada] D. MMMM, HH:mm",
		      LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0160odien pulksten] LT",
		      nextDay: "[R\u012bt pulksten] LT",
		      nextWeek: "dddd [pulksten] LT",
		      lastDay: "[Vakar pulksten] LT",
		      lastWeek: "[Pag\u0101ju\u0161\u0101] dddd [pulksten] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "p\u0113c %s",
		      past: "pirms %s",
		      s: function (e, a) {
		        return a ? "da\u017eas sekundes" : "da\u017e\u0101m sekund\u0113m";
		      },
		      ss: Fe,
		      m: ze,
		      mm: Fe,
		      h: ze,
		      hh: Fe,
		      d: ze,
		      dd: Fe,
		      M: ze,
		      MM: Fe,
		      y: ze,
		      yy: Fe
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var w = {
		    words: {
		      ss: ["sekund", "sekunda", "sekundi"],
		      m: ["jedan minut", "jednog minuta"],
		      mm: ["minut", "minuta", "minuta"],
		      h: ["jedan sat", "jednog sata"],
		      hh: ["sat", "sata", "sati"],
		      dd: ["dan", "dana", "dana"],
		      MM: ["mjesec", "mjeseca", "mjeseci"],
		      yy: ["godina", "godine", "godina"]
		    },
		    correctGrammaticalCase: function (e, a) {
		      return 1 === e ? a[0] : 2 <= e && e <= 4 ? a[1] : a[2];
		    },
		    translate: function (e, a, _) {
		      var s = w.words[_];
		      return 1 === _.length ? a ? s[0] : s[1] : e + " " + w.correctGrammaticalCase(e, s);
		    }
		  };

		  function g(e, a, _, s) {
		    switch (_) {
		      case "s":
		        return a ? "\u0445\u044d\u0434\u0445\u044d\u043d \u0441\u0435\u043a\u0443\u043d\u0434" : "\u0445\u044d\u0434\u0445\u044d\u043d \u0441\u0435\u043a\u0443\u043d\u0434\u044b\u043d";

		      case "ss":
		        return e + (a ? " \u0441\u0435\u043a\u0443\u043d\u0434" : " \u0441\u0435\u043a\u0443\u043d\u0434\u044b\u043d");

		      case "m":
		      case "mm":
		        return e + (a ? " \u043c\u0438\u043d\u0443\u0442" : " \u043c\u0438\u043d\u0443\u0442\u044b\u043d");

		      case "h":
		      case "hh":
		        return e + (a ? " \u0446\u0430\u0433" : " \u0446\u0430\u0433\u0438\u0439\u043d");

		      case "d":
		      case "dd":
		        return e + (a ? " \u04e9\u0434\u04e9\u0440" : " \u04e9\u0434\u0440\u0438\u0439\u043d");

		      case "M":
		      case "MM":
		        return e + (a ? " \u0441\u0430\u0440" : " \u0441\u0430\u0440\u044b\u043d");

		      case "y":
		      case "yy":
		        return e + (a ? " \u0436\u0438\u043b" : " \u0436\u0438\u043b\u0438\u0439\u043d");

		      default:
		        return e;
		    }
		  }

		  e.defineLocale("me", {
		    months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
		    monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota".split("_"),
		    weekdaysShort: "ned._pon._uto._sri._\u010det._pet._sub.".split("_"),
		    weekdaysMin: "ne_po_ut_sr_\u010de_pe_su".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm",
		      LLLL: "dddd, D. MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[danas u] LT",
		      nextDay: "[sjutra u] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[u] [nedjelju] [u] LT";

		          case 3:
		            return "[u] [srijedu] [u] LT";

		          case 6:
		            return "[u] [subotu] [u] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[u] dddd [u] LT";
		        }
		      },
		      lastDay: "[ju\u010de u] LT",
		      lastWeek: function () {
		        return ["[pro\u0161le] [nedjelje] [u] LT", "[pro\u0161log] [ponedjeljka] [u] LT", "[pro\u0161log] [utorka] [u] LT", "[pro\u0161le] [srijede] [u] LT", "[pro\u0161log] [\u010detvrtka] [u] LT", "[pro\u0161log] [petka] [u] LT", "[pro\u0161le] [subote] [u] LT"][this.day()];
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "prije %s",
		      s: "nekoliko sekundi",
		      ss: w.translate,
		      m: w.translate,
		      mm: w.translate,
		      h: w.translate,
		      hh: w.translate,
		      d: "dan",
		      dd: w.translate,
		      M: "mjesec",
		      MM: w.translate,
		      y: "godinu",
		      yy: w.translate
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("mi", {
		    months: "Kohi-t\u0101te_Hui-tanguru_Pout\u016b-te-rangi_Paenga-wh\u0101wh\u0101_Haratua_Pipiri_H\u014dngoingoi_Here-turi-k\u014dk\u0101_Mahuru_Whiringa-\u0101-nuku_Whiringa-\u0101-rangi_Hakihea".split("_"),
		    monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_H\u014dngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),
		    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
		    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
		    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
		    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
		    weekdays: "R\u0101tapu_Mane_T\u016brei_Wenerei_T\u0101ite_Paraire_H\u0101tarei".split("_"),
		    weekdaysShort: "Ta_Ma_T\u016b_We_T\u0101i_Pa_H\u0101".split("_"),
		    weekdaysMin: "Ta_Ma_T\u016b_We_T\u0101i_Pa_H\u0101".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY [i] HH:mm",
		      LLLL: "dddd, D MMMM YYYY [i] HH:mm"
		    },
		    calendar: {
		      sameDay: "[i teie mahana, i] LT",
		      nextDay: "[apopo i] LT",
		      nextWeek: "dddd [i] LT",
		      lastDay: "[inanahi i] LT",
		      lastWeek: "dddd [whakamutunga i] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "i roto i %s",
		      past: "%s i mua",
		      s: "te h\u0113kona ruarua",
		      ss: "%d h\u0113kona",
		      m: "he meneti",
		      mm: "%d meneti",
		      h: "te haora",
		      hh: "%d haora",
		      d: "he ra",
		      dd: "%d ra",
		      M: "he marama",
		      MM: "%d marama",
		      y: "he tau",
		      yy: "%d tau"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("mk", {
		    months: "\u0458\u0430\u043d\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0458_\u0458\u0443\u043d\u0438_\u0458\u0443\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438_\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438_\u043d\u043e\u0435\u043c\u0432\u0440\u0438_\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438".split("_"),
		    monthsShort: "\u0458\u0430\u043d_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433_\u0441\u0435\u043f_\u043e\u043a\u0442_\u043d\u043e\u0435_\u0434\u0435\u043a".split("_"),
		    weekdays: "\u043d\u0435\u0434\u0435\u043b\u0430_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u043e\u043a_\u043f\u0435\u0442\u043e\u043a_\u0441\u0430\u0431\u043e\u0442\u0430".split("_"),
		    weekdaysShort: "\u043d\u0435\u0434_\u043f\u043e\u043d_\u0432\u0442\u043e_\u0441\u0440\u0435_\u0447\u0435\u0442_\u043f\u0435\u0442_\u0441\u0430\u0431".split("_"),
		    weekdaysMin: "\u043de_\u043fo_\u0432\u0442_\u0441\u0440_\u0447\u0435_\u043f\u0435_\u0441a".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "D.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY H:mm",
		      LLLL: "dddd, D MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[\u0414\u0435\u043d\u0435\u0441 \u0432\u043e] LT",
		      nextDay: "[\u0423\u0442\u0440\u0435 \u0432\u043e] LT",
		      nextWeek: "[\u0412\u043e] dddd [\u0432\u043e] LT",
		      lastDay: "[\u0412\u0447\u0435\u0440\u0430 \u0432\u043e] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		          case 3:
		          case 6:
		            return "[\u0418\u0437\u043c\u0438\u043d\u0430\u0442\u0430\u0442\u0430] dddd [\u0432\u043e] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[\u0418\u0437\u043c\u0438\u043d\u0430\u0442\u0438\u043e\u0442] dddd [\u0432\u043e] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0437\u0430 %s",
		      past: "\u043f\u0440\u0435\u0434 %s",
		      s: "\u043d\u0435\u043a\u043e\u043b\u043a\u0443 \u0441\u0435\u043a\u0443\u043d\u0434\u0438",
		      ss: "%d \u0441\u0435\u043a\u0443\u043d\u0434\u0438",
		      m: "\u0435\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430",
		      mm: "%d \u043c\u0438\u043d\u0443\u0442\u0438",
		      h: "\u0435\u0434\u0435\u043d \u0447\u0430\u0441",
		      hh: "%d \u0447\u0430\u0441\u0430",
		      d: "\u0435\u0434\u0435\u043d \u0434\u0435\u043d",
		      dd: "%d \u0434\u0435\u043d\u0430",
		      M: "\u0435\u0434\u0435\u043d \u043c\u0435\u0441\u0435\u0446",
		      MM: "%d \u043c\u0435\u0441\u0435\u0446\u0438",
		      y: "\u0435\u0434\u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0430",
		      yy: "%d \u0433\u043e\u0434\u0438\u043d\u0438"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/,
		    ordinal: function (e) {
		      var a = e % 10,
		          _ = e % 100;

		      return 0 === e ? e + "-\u0435\u0432" : 0 == _ ? e + "-\u0435\u043d" : 10 < _ && _ < 20 ? e + "-\u0442\u0438" : 1 == a ? e + "-\u0432\u0438" : 2 == a ? e + "-\u0440\u0438" : 7 == a || 8 == a ? e + "-\u043c\u0438" : e + "-\u0442\u0438";
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("ml", {
		    months: "\u0d1c\u0d28\u0d41\u0d35\u0d30\u0d3f_\u0d2b\u0d46\u0d2c\u0d4d\u0d30\u0d41\u0d35\u0d30\u0d3f_\u0d2e\u0d3e\u0d7c\u0d1a\u0d4d\u0d1a\u0d4d_\u0d0f\u0d2a\u0d4d\u0d30\u0d3f\u0d7d_\u0d2e\u0d47\u0d2f\u0d4d_\u0d1c\u0d42\u0d7a_\u0d1c\u0d42\u0d32\u0d48_\u0d13\u0d17\u0d38\u0d4d\u0d31\u0d4d\u0d31\u0d4d_\u0d38\u0d46\u0d2a\u0d4d\u0d31\u0d4d\u0d31\u0d02\u0d2c\u0d7c_\u0d12\u0d15\u0d4d\u0d1f\u0d4b\u0d2c\u0d7c_\u0d28\u0d35\u0d02\u0d2c\u0d7c_\u0d21\u0d3f\u0d38\u0d02\u0d2c\u0d7c".split("_"),
		    monthsShort: "\u0d1c\u0d28\u0d41._\u0d2b\u0d46\u0d2c\u0d4d\u0d30\u0d41._\u0d2e\u0d3e\u0d7c._\u0d0f\u0d2a\u0d4d\u0d30\u0d3f._\u0d2e\u0d47\u0d2f\u0d4d_\u0d1c\u0d42\u0d7a_\u0d1c\u0d42\u0d32\u0d48._\u0d13\u0d17._\u0d38\u0d46\u0d2a\u0d4d\u0d31\u0d4d\u0d31._\u0d12\u0d15\u0d4d\u0d1f\u0d4b._\u0d28\u0d35\u0d02._\u0d21\u0d3f\u0d38\u0d02.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0d1e\u0d3e\u0d2f\u0d31\u0d3e\u0d34\u0d4d\u0d1a_\u0d24\u0d3f\u0d19\u0d4d\u0d15\u0d33\u0d3e\u0d34\u0d4d\u0d1a_\u0d1a\u0d4a\u0d35\u0d4d\u0d35\u0d3e\u0d34\u0d4d\u0d1a_\u0d2c\u0d41\u0d27\u0d28\u0d3e\u0d34\u0d4d\u0d1a_\u0d35\u0d4d\u0d2f\u0d3e\u0d34\u0d3e\u0d34\u0d4d\u0d1a_\u0d35\u0d46\u0d33\u0d4d\u0d33\u0d3f\u0d2f\u0d3e\u0d34\u0d4d\u0d1a_\u0d36\u0d28\u0d3f\u0d2f\u0d3e\u0d34\u0d4d\u0d1a".split("_"),
		    weekdaysShort: "\u0d1e\u0d3e\u0d2f\u0d7c_\u0d24\u0d3f\u0d19\u0d4d\u0d15\u0d7e_\u0d1a\u0d4a\u0d35\u0d4d\u0d35_\u0d2c\u0d41\u0d27\u0d7b_\u0d35\u0d4d\u0d2f\u0d3e\u0d34\u0d02_\u0d35\u0d46\u0d33\u0d4d\u0d33\u0d3f_\u0d36\u0d28\u0d3f".split("_"),
		    weekdaysMin: "\u0d1e\u0d3e_\u0d24\u0d3f_\u0d1a\u0d4a_\u0d2c\u0d41_\u0d35\u0d4d\u0d2f\u0d3e_\u0d35\u0d46_\u0d36".split("_"),
		    longDateFormat: {
		      LT: "A h:mm -\u0d28\u0d41",
		      LTS: "A h:mm:ss -\u0d28\u0d41",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm -\u0d28\u0d41",
		      LLLL: "dddd, D MMMM YYYY, A h:mm -\u0d28\u0d41"
		    },
		    calendar: {
		      sameDay: "[\u0d07\u0d28\u0d4d\u0d28\u0d4d] LT",
		      nextDay: "[\u0d28\u0d3e\u0d33\u0d46] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0d07\u0d28\u0d4d\u0d28\u0d32\u0d46] LT",
		      lastWeek: "[\u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d",
		      past: "%s \u0d2e\u0d41\u0d7b\u0d2a\u0d4d",
		      s: "\u0d05\u0d7d\u0d2a \u0d28\u0d3f\u0d2e\u0d3f\u0d37\u0d19\u0d4d\u0d19\u0d7e",
		      ss: "%d \u0d38\u0d46\u0d15\u0d4d\u0d15\u0d7b\u0d21\u0d4d",
		      m: "\u0d12\u0d30\u0d41 \u0d2e\u0d3f\u0d28\u0d3f\u0d31\u0d4d\u0d31\u0d4d",
		      mm: "%d \u0d2e\u0d3f\u0d28\u0d3f\u0d31\u0d4d\u0d31\u0d4d",
		      h: "\u0d12\u0d30\u0d41 \u0d2e\u0d23\u0d3f\u0d15\u0d4d\u0d15\u0d42\u0d7c",
		      hh: "%d \u0d2e\u0d23\u0d3f\u0d15\u0d4d\u0d15\u0d42\u0d7c",
		      d: "\u0d12\u0d30\u0d41 \u0d26\u0d3f\u0d35\u0d38\u0d02",
		      dd: "%d \u0d26\u0d3f\u0d35\u0d38\u0d02",
		      M: "\u0d12\u0d30\u0d41 \u0d2e\u0d3e\u0d38\u0d02",
		      MM: "%d \u0d2e\u0d3e\u0d38\u0d02",
		      y: "\u0d12\u0d30\u0d41 \u0d35\u0d7c\u0d37\u0d02",
		      yy: "%d \u0d35\u0d7c\u0d37\u0d02"
		    },
		    meridiemParse: /\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f|\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46|\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d|\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02|\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f/i,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f" === a && 4 <= e || "\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d" === a || "\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02" === a ? e + 12 : e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f" : e < 12 ? "\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46" : e < 17 ? "\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d" : e < 20 ? "\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02" : "\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f";
		    }
		  }), e.defineLocale("mn", {
		    months: "\u041d\u044d\u0433\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0425\u043e\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0413\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0414\u04e9\u0440\u04e9\u0432\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0422\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0417\u0443\u0440\u0433\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0414\u043e\u043b\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u041d\u0430\u0439\u043c\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0415\u0441\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0410\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0410\u0440\u0432\u0430\u043d \u043d\u044d\u0433\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0410\u0440\u0432\u0430\u043d \u0445\u043e\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440".split("_"),
		    monthsShort: "1 \u0441\u0430\u0440_2 \u0441\u0430\u0440_3 \u0441\u0430\u0440_4 \u0441\u0430\u0440_5 \u0441\u0430\u0440_6 \u0441\u0430\u0440_7 \u0441\u0430\u0440_8 \u0441\u0430\u0440_9 \u0441\u0430\u0440_10 \u0441\u0430\u0440_11 \u0441\u0430\u0440_12 \u0441\u0430\u0440".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u041d\u044f\u043c_\u0414\u0430\u0432\u0430\u0430_\u041c\u044f\u0433\u043c\u0430\u0440_\u041b\u0445\u0430\u0433\u0432\u0430_\u041f\u04af\u0440\u044d\u0432_\u0411\u0430\u0430\u0441\u0430\u043d_\u0411\u044f\u043c\u0431\u0430".split("_"),
		    weekdaysShort: "\u041d\u044f\u043c_\u0414\u0430\u0432_\u041c\u044f\u0433_\u041b\u0445\u0430_\u041f\u04af\u0440_\u0411\u0430\u0430_\u0411\u044f\u043c".split("_"),
		    weekdaysMin: "\u041d\u044f_\u0414\u0430_\u041c\u044f_\u041b\u0445_\u041f\u04af_\u0411\u0430_\u0411\u044f".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "YYYY \u043e\u043d\u044b MMMM\u044b\u043d D",
		      LLL: "YYYY \u043e\u043d\u044b MMMM\u044b\u043d D HH:mm",
		      LLLL: "dddd, YYYY \u043e\u043d\u044b MMMM\u044b\u043d D HH:mm"
		    },
		    meridiemParse: /\u04ae\u04e8|\u04ae\u0425/i,
		    isPM: function (e) {
		      return "\u04ae\u0425" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u04ae\u04e8" : "\u04ae\u0425";
		    },
		    calendar: {
		      sameDay: "[\u04e8\u043d\u04e9\u04e9\u0434\u04e9\u0440] LT",
		      nextDay: "[\u041c\u0430\u0440\u0433\u0430\u0430\u0448] LT",
		      nextWeek: "[\u0418\u0440\u044d\u0445] dddd LT",
		      lastDay: "[\u04e8\u0447\u0438\u0433\u0434\u04e9\u0440] LT",
		      lastWeek: "[\u04e8\u043d\u0433\u04e9\u0440\u0441\u04e9\u043d] dddd LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0434\u0430\u0440\u0430\u0430",
		      past: "%s \u04e9\u043c\u043d\u04e9",
		      s: g,
		      ss: g,
		      m: g,
		      mm: g,
		      h: g,
		      hh: g,
		      d: g,
		      dd: g,
		      M: g,
		      MM: g,
		      y: g,
		      yy: g
		    },
		    dayOfMonthOrdinalParse: /\d{1,2} \u04e9\u0434\u04e9\u0440/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + " \u04e9\u0434\u04e9\u0440";

		        default:
		          return e;
		      }
		    }
		  });
		  var Je = {
		    1: "\u0967",
		    2: "\u0968",
		    3: "\u0969",
		    4: "\u096a",
		    5: "\u096b",
		    6: "\u096c",
		    7: "\u096d",
		    8: "\u096e",
		    9: "\u096f",
		    0: "\u0966"
		  },
		      Ie = {
		    "\u0967": "1",
		    "\u0968": "2",
		    "\u0969": "3",
		    "\u096a": "4",
		    "\u096b": "5",
		    "\u096c": "6",
		    "\u096d": "7",
		    "\u096e": "8",
		    "\u096f": "9",
		    "\u0966": "0"
		  };

		  function H(e, a, _, s) {
		    var d = "";
		    if (a) switch (_) {
		      case "s":
		        d = "\u0915\u093e\u0939\u0940 \u0938\u0947\u0915\u0902\u0926";
		        break;

		      case "ss":
		        d = "%d \u0938\u0947\u0915\u0902\u0926";
		        break;

		      case "m":
		        d = "\u090f\u0915 \u092e\u093f\u0928\u093f\u091f";
		        break;

		      case "mm":
		        d = "%d \u092e\u093f\u0928\u093f\u091f\u0947";
		        break;

		      case "h":
		        d = "\u090f\u0915 \u0924\u093e\u0938";
		        break;

		      case "hh":
		        d = "%d \u0924\u093e\u0938";
		        break;

		      case "d":
		        d = "\u090f\u0915 \u0926\u093f\u0935\u0938";
		        break;

		      case "dd":
		        d = "%d \u0926\u093f\u0935\u0938";
		        break;

		      case "M":
		        d = "\u090f\u0915 \u092e\u0939\u093f\u0928\u093e";
		        break;

		      case "MM":
		        d = "%d \u092e\u0939\u093f\u0928\u0947";
		        break;

		      case "y":
		        d = "\u090f\u0915 \u0935\u0930\u094d\u0937";
		        break;

		      case "yy":
		        d = "%d \u0935\u0930\u094d\u0937\u0947";
		        break;
		    } else switch (_) {
		      case "s":
		        d = "\u0915\u093e\u0939\u0940 \u0938\u0947\u0915\u0902\u0926\u093e\u0902";
		        break;

		      case "ss":
		        d = "%d \u0938\u0947\u0915\u0902\u0926\u093e\u0902";
		        break;

		      case "m":
		        d = "\u090f\u0915\u093e \u092e\u093f\u0928\u093f\u091f\u093e";
		        break;

		      case "mm":
		        d = "%d \u092e\u093f\u0928\u093f\u091f\u093e\u0902";
		        break;

		      case "h":
		        d = "\u090f\u0915\u093e \u0924\u093e\u0938\u093e";
		        break;

		      case "hh":
		        d = "%d \u0924\u093e\u0938\u093e\u0902";
		        break;

		      case "d":
		        d = "\u090f\u0915\u093e \u0926\u093f\u0935\u0938\u093e";
		        break;

		      case "dd":
		        d = "%d \u0926\u093f\u0935\u0938\u093e\u0902";
		        break;

		      case "M":
		        d = "\u090f\u0915\u093e \u092e\u0939\u093f\u0928\u094d\u092f\u093e";
		        break;

		      case "MM":
		        d = "%d \u092e\u0939\u093f\u0928\u094d\u092f\u093e\u0902";
		        break;

		      case "y":
		        d = "\u090f\u0915\u093e \u0935\u0930\u094d\u0937\u093e";
		        break;

		      case "yy":
		        d = "%d \u0935\u0930\u094d\u0937\u093e\u0902";
		        break;
		    }
		    return d.replace(/%d/i, e);
		  }

		  e.defineLocale("mr", {
		    months: "\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u093f\u0932_\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932\u0948_\u0911\u0917\u0938\u094d\u091f_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930_\u0911\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930_\u0921\u093f\u0938\u0947\u0902\u092c\u0930".split("_"),
		    monthsShort: "\u091c\u093e\u0928\u0947._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a._\u090f\u092a\u094d\u0930\u093f._\u092e\u0947._\u091c\u0942\u0928._\u091c\u0941\u0932\u0948._\u0911\u0917._\u0938\u092a\u094d\u091f\u0947\u0902._\u0911\u0915\u094d\u091f\u094b._\u0928\u094b\u0935\u094d\u0939\u0947\u0902._\u0921\u093f\u0938\u0947\u0902.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0930\u0935\u093f\u0935\u093e\u0930_\u0938\u094b\u092e\u0935\u093e\u0930_\u092e\u0902\u0917\u0933\u0935\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u0917\u0941\u0930\u0942\u0935\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u0935\u093e\u0930_\u0936\u0928\u093f\u0935\u093e\u0930".split("_"),
		    weekdaysShort: "\u0930\u0935\u093f_\u0938\u094b\u092e_\u092e\u0902\u0917\u0933_\u092c\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094d\u0930_\u0936\u0928\u093f".split("_"),
		    weekdaysMin: "\u0930_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u0917\u0941_\u0936\u0941_\u0936".split("_"),
		    longDateFormat: {
		      LT: "A h:mm \u0935\u093e\u091c\u0924\u093e",
		      LTS: "A h:mm:ss \u0935\u093e\u091c\u0924\u093e",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm \u0935\u093e\u091c\u0924\u093e",
		      LLLL: "dddd, D MMMM YYYY, A h:mm \u0935\u093e\u091c\u0924\u093e"
		    },
		    calendar: {
		      sameDay: "[\u0906\u091c] LT",
		      nextDay: "[\u0909\u0926\u094d\u092f\u093e] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0915\u093e\u0932] LT",
		      lastWeek: "[\u092e\u093e\u0917\u0940\u0932] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s\u092e\u0927\u094d\u092f\u0947",
		      past: "%s\u092a\u0942\u0930\u094d\u0935\u0940",
		      s: H,
		      ss: H,
		      m: H,
		      mm: H,
		      h: H,
		      hh: H,
		      d: H,
		      dd: H,
		      M: H,
		      MM: H,
		      y: H,
		      yy: H
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function (e) {
		        return Ie[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Je[e];
		      });
		    },
		    meridiemParse: /\u092a\u0939\u093e\u091f\u0947|\u0938\u0915\u093e\u0933\u0940|\u0926\u0941\u092a\u093e\u0930\u0940|\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940|\u0930\u093e\u0924\u094d\u0930\u0940/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u092a\u0939\u093e\u091f\u0947" === a || "\u0938\u0915\u093e\u0933\u0940" === a ? e : "\u0926\u0941\u092a\u093e\u0930\u0940" === a || "\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940" === a || "\u0930\u093e\u0924\u094d\u0930\u0940" === a ? 12 <= e ? e : e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return 0 <= e && e < 6 ? "\u092a\u0939\u093e\u091f\u0947" : e < 12 ? "\u0938\u0915\u093e\u0933\u0940" : e < 17 ? "\u0926\u0941\u092a\u093e\u0930\u0940" : e < 20 ? "\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940" : "\u0930\u093e\u0924\u094d\u0930\u0940";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("ms-my", {
		    months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
		    monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
		    weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
		    weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
		    weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
		    longDateFormat: {
		      LT: "HH.mm",
		      LTS: "HH.mm.ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY [pukul] HH.mm",
		      LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
		    },
		    meridiemParse: /pagi|tengahari|petang|malam/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "pagi" === a ? e : "tengahari" === a ? 11 <= e ? e : e + 12 : "petang" === a || "malam" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
		    },
		    calendar: {
		      sameDay: "[Hari ini pukul] LT",
		      nextDay: "[Esok pukul] LT",
		      nextWeek: "dddd [pukul] LT",
		      lastDay: "[Kelmarin pukul] LT",
		      lastWeek: "dddd [lepas pukul] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dalam %s",
		      past: "%s yang lepas",
		      s: "beberapa saat",
		      ss: "%d saat",
		      m: "seminit",
		      mm: "%d minit",
		      h: "sejam",
		      hh: "%d jam",
		      d: "sehari",
		      dd: "%d hari",
		      M: "sebulan",
		      MM: "%d bulan",
		      y: "setahun",
		      yy: "%d tahun"
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("ms", {
		    months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
		    monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
		    weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
		    weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
		    weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
		    longDateFormat: {
		      LT: "HH.mm",
		      LTS: "HH.mm.ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY [pukul] HH.mm",
		      LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
		    },
		    meridiemParse: /pagi|tengahari|petang|malam/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "pagi" === a ? e : "tengahari" === a ? 11 <= e ? e : e + 12 : "petang" === a || "malam" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
		    },
		    calendar: {
		      sameDay: "[Hari ini pukul] LT",
		      nextDay: "[Esok pukul] LT",
		      nextWeek: "dddd [pukul] LT",
		      lastDay: "[Kelmarin pukul] LT",
		      lastWeek: "dddd [lepas pukul] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dalam %s",
		      past: "%s yang lepas",
		      s: "beberapa saat",
		      ss: "%d saat",
		      m: "seminit",
		      mm: "%d minit",
		      h: "sejam",
		      hh: "%d jam",
		      d: "sehari",
		      dd: "%d hari",
		      M: "sebulan",
		      MM: "%d bulan",
		      y: "setahun",
		      yy: "%d tahun"
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("mt", {
		    months: "Jannar_Frar_Marzu_April_Mejju_\u0120unju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Di\u010bembru".split("_"),
		    monthsShort: "Jan_Fra_Mar_Apr_Mej_\u0120un_Lul_Aww_Set_Ott_Nov_Di\u010b".split("_"),
		    weekdays: "Il-\u0126add_It-Tnejn_It-Tlieta_L-Erbg\u0127a_Il-\u0126amis_Il-\u0120img\u0127a_Is-Sibt".split("_"),
		    weekdaysShort: "\u0126ad_Tne_Tli_Erb_\u0126am_\u0120im_Sib".split("_"),
		    weekdaysMin: "\u0126a_Tn_Tl_Er_\u0126a_\u0120i_Si".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Illum fil-]LT",
		      nextDay: "[G\u0127ada fil-]LT",
		      nextWeek: "dddd [fil-]LT",
		      lastDay: "[Il-biera\u0127 fil-]LT",
		      lastWeek: "dddd [li g\u0127adda] [fil-]LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "f\u2019 %s",
		      past: "%s ilu",
		      s: "ftit sekondi",
		      ss: "%d sekondi",
		      m: "minuta",
		      mm: "%d minuti",
		      h: "sieg\u0127a",
		      hh: "%d sieg\u0127at",
		      d: "\u0121urnata",
		      dd: "%d \u0121ranet",
		      M: "xahar",
		      MM: "%d xhur",
		      y: "sena",
		      yy: "%d sni"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var Ne = {
		    1: "\u1041",
		    2: "\u1042",
		    3: "\u1043",
		    4: "\u1044",
		    5: "\u1045",
		    6: "\u1046",
		    7: "\u1047",
		    8: "\u1048",
		    9: "\u1049",
		    0: "\u1040"
		  },
		      Re = {
		    "\u1041": "1",
		    "\u1042": "2",
		    "\u1043": "3",
		    "\u1044": "4",
		    "\u1045": "5",
		    "\u1046": "6",
		    "\u1047": "7",
		    "\u1048": "8",
		    "\u1049": "9",
		    "\u1040": "0"
		  },
		      Ce = (e.defineLocale("my", {
		    months: "\u1007\u1014\u103a\u1014\u101d\u102b\u101b\u102e_\u1016\u1031\u1016\u1031\u102c\u103a\u101d\u102b\u101b\u102e_\u1019\u1010\u103a_\u1027\u1015\u103c\u102e_\u1019\u1031_\u1007\u103d\u1014\u103a_\u1007\u1030\u101c\u102d\u102f\u1004\u103a_\u101e\u103c\u1002\u102f\u1010\u103a_\u1005\u1000\u103a\u1010\u1004\u103a\u1018\u102c_\u1021\u1031\u102c\u1000\u103a\u1010\u102d\u102f\u1018\u102c_\u1014\u102d\u102f\u101d\u1004\u103a\u1018\u102c_\u1012\u102e\u1007\u1004\u103a\u1018\u102c".split("_"),
		    monthsShort: "\u1007\u1014\u103a_\u1016\u1031_\u1019\u1010\u103a_\u1015\u103c\u102e_\u1019\u1031_\u1007\u103d\u1014\u103a_\u101c\u102d\u102f\u1004\u103a_\u101e\u103c_\u1005\u1000\u103a_\u1021\u1031\u102c\u1000\u103a_\u1014\u102d\u102f_\u1012\u102e".split("_"),
		    weekdays: "\u1010\u1014\u1004\u103a\u1039\u1002\u1014\u103d\u1031_\u1010\u1014\u1004\u103a\u1039\u101c\u102c_\u1021\u1004\u103a\u1039\u1002\u102b_\u1017\u102f\u1012\u1039\u1013\u101f\u1030\u1038_\u1000\u103c\u102c\u101e\u1015\u1010\u1031\u1038_\u101e\u1031\u102c\u1000\u103c\u102c_\u1005\u1014\u1031".split("_"),
		    weekdaysShort: "\u1014\u103d\u1031_\u101c\u102c_\u1002\u102b_\u101f\u1030\u1038_\u1000\u103c\u102c_\u101e\u1031\u102c_\u1014\u1031".split("_"),
		    weekdaysMin: "\u1014\u103d\u1031_\u101c\u102c_\u1002\u102b_\u101f\u1030\u1038_\u1000\u103c\u102c_\u101e\u1031\u102c_\u1014\u1031".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u101a\u1014\u1031.] LT [\u1019\u103e\u102c]",
		      nextDay: "[\u1019\u1014\u1000\u103a\u1016\u103c\u1014\u103a] LT [\u1019\u103e\u102c]",
		      nextWeek: "dddd LT [\u1019\u103e\u102c]",
		      lastDay: "[\u1019\u1014\u1031.\u1000] LT [\u1019\u103e\u102c]",
		      lastWeek: "[\u1015\u103c\u102e\u1038\u1001\u1032\u1037\u101e\u1031\u102c] dddd LT [\u1019\u103e\u102c]",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u101c\u102c\u1019\u100a\u103a\u1037 %s \u1019\u103e\u102c",
		      past: "\u101c\u103d\u1014\u103a\u1001\u1032\u1037\u101e\u1031\u102c %s \u1000",
		      s: "\u1005\u1000\u1039\u1000\u1014\u103a.\u1021\u1014\u100a\u103a\u1038\u1004\u101a\u103a",
		      ss: "%d \u1005\u1000\u1039\u1000\u1014\u1037\u103a",
		      m: "\u1010\u1005\u103a\u1019\u102d\u1014\u1005\u103a",
		      mm: "%d \u1019\u102d\u1014\u1005\u103a",
		      h: "\u1010\u1005\u103a\u1014\u102c\u101b\u102e",
		      hh: "%d \u1014\u102c\u101b\u102e",
		      d: "\u1010\u1005\u103a\u101b\u1000\u103a",
		      dd: "%d \u101b\u1000\u103a",
		      M: "\u1010\u1005\u103a\u101c",
		      MM: "%d \u101c",
		      y: "\u1010\u1005\u103a\u1014\u103e\u1005\u103a",
		      yy: "%d \u1014\u103e\u1005\u103a"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1040]/g, function (e) {
		        return Re[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Ne[e];
		      });
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("nb", {
		    months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
		    monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "s\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag".split("_"),
		    weekdaysShort: "s\xf8._ma._ti._on._to._fr._l\xf8.".split("_"),
		    weekdaysMin: "s\xf8_ma_ti_on_to_fr_l\xf8".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY [kl.] HH:mm",
		      LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
		    },
		    calendar: {
		      sameDay: "[i dag kl.] LT",
		      nextDay: "[i morgen kl.] LT",
		      nextWeek: "dddd [kl.] LT",
		      lastDay: "[i g\xe5r kl.] LT",
		      lastWeek: "[forrige] dddd [kl.] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "om %s",
		      past: "%s siden",
		      s: "noen sekunder",
		      ss: "%d sekunder",
		      m: "ett minutt",
		      mm: "%d minutter",
		      h: "en time",
		      hh: "%d timer",
		      d: "en dag",
		      dd: "%d dager",
		      w: "en uke",
		      ww: "%d uker",
		      M: "en m\xe5ned",
		      MM: "%d m\xe5neder",
		      y: "ett \xe5r",
		      yy: "%d \xe5r"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), {
		    1: "\u0967",
		    2: "\u0968",
		    3: "\u0969",
		    4: "\u096a",
		    5: "\u096b",
		    6: "\u096c",
		    7: "\u096d",
		    8: "\u096e",
		    9: "\u096f",
		    0: "\u0966"
		  }),
		      Ke = {
		    "\u0967": "1",
		    "\u0968": "2",
		    "\u0969": "3",
		    "\u096a": "4",
		    "\u096b": "5",
		    "\u096c": "6",
		    "\u096d": "7",
		    "\u096e": "8",
		    "\u096f": "9",
		    "\u0966": "0"
		  },
		      Ge = (e.defineLocale("ne", {
		    months: "\u091c\u0928\u0935\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u093f\u0932_\u092e\u0908_\u091c\u0941\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0937\u094d\u091f_\u0938\u0947\u092a\u094d\u091f\u0947\u092e\u094d\u092c\u0930_\u0905\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u092d\u0947\u092e\u094d\u092c\u0930_\u0921\u093f\u0938\u0947\u092e\u094d\u092c\u0930".split("_"),
		    monthsShort: "\u091c\u0928._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u093f._\u092e\u0908_\u091c\u0941\u0928_\u091c\u0941\u0932\u093e\u0908._\u0905\u0917._\u0938\u0947\u092a\u094d\u091f._\u0905\u0915\u094d\u091f\u094b._\u0928\u094b\u092d\u0947._\u0921\u093f\u0938\u0947.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0906\u0907\u0924\u092c\u093e\u0930_\u0938\u094b\u092e\u092c\u093e\u0930_\u092e\u0919\u094d\u0917\u0932\u092c\u093e\u0930_\u092c\u0941\u0927\u092c\u093e\u0930_\u092c\u093f\u0939\u093f\u092c\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u092c\u093e\u0930_\u0936\u0928\u093f\u092c\u093e\u0930".split("_"),
		    weekdaysShort: "\u0906\u0907\u0924._\u0938\u094b\u092e._\u092e\u0919\u094d\u0917\u0932._\u092c\u0941\u0927._\u092c\u093f\u0939\u093f._\u0936\u0941\u0915\u094d\u0930._\u0936\u0928\u093f.".split("_"),
		    weekdaysMin: "\u0906._\u0938\u094b._\u092e\u0902._\u092c\u0941._\u092c\u093f._\u0936\u0941._\u0936.".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "A\u0915\u094b h:mm \u092c\u091c\u0947",
		      LTS: "A\u0915\u094b h:mm:ss \u092c\u091c\u0947",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A\u0915\u094b h:mm \u092c\u091c\u0947",
		      LLLL: "dddd, D MMMM YYYY, A\u0915\u094b h:mm \u092c\u091c\u0947"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function (e) {
		        return Ke[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return Ce[e];
		      });
		    },
		    meridiemParse: /\u0930\u093e\u0924\u093f|\u092c\u093f\u0939\u093e\u0928|\u0926\u093f\u0909\u0901\u0938\u094b|\u0938\u093e\u0901\u091d/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0930\u093e\u0924\u093f" === a ? e < 4 ? e : e + 12 : "\u092c\u093f\u0939\u093e\u0928" === a ? e : "\u0926\u093f\u0909\u0901\u0938\u094b" === a ? 10 <= e ? e : e + 12 : "\u0938\u093e\u0901\u091d" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 3 ? "\u0930\u093e\u0924\u093f" : e < 12 ? "\u092c\u093f\u0939\u093e\u0928" : e < 16 ? "\u0926\u093f\u0909\u0901\u0938\u094b" : e < 20 ? "\u0938\u093e\u0901\u091d" : "\u0930\u093e\u0924\u093f";
		    },
		    calendar: {
		      sameDay: "[\u0906\u091c] LT",
		      nextDay: "[\u092d\u094b\u0932\u093f] LT",
		      nextWeek: "[\u0906\u0909\u0901\u0926\u094b] dddd[,] LT",
		      lastDay: "[\u0939\u093f\u091c\u094b] LT",
		      lastWeek: "[\u0917\u090f\u0915\u094b] dddd[,] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s\u092e\u093e",
		      past: "%s \u0905\u0917\u093e\u0921\u093f",
		      s: "\u0915\u0947\u0939\u0940 \u0915\u094d\u0937\u0923",
		      ss: "%d \u0938\u0947\u0915\u0947\u0923\u094d\u0921",
		      m: "\u090f\u0915 \u092e\u093f\u0928\u0947\u091f",
		      mm: "%d \u092e\u093f\u0928\u0947\u091f",
		      h: "\u090f\u0915 \u0918\u0923\u094d\u091f\u093e",
		      hh: "%d \u0918\u0923\u094d\u091f\u093e",
		      d: "\u090f\u0915 \u0926\u093f\u0928",
		      dd: "%d \u0926\u093f\u0928",
		      M: "\u090f\u0915 \u092e\u0939\u093f\u0928\u093e",
		      MM: "%d \u092e\u0939\u093f\u0928\u093e",
		      y: "\u090f\u0915 \u092c\u0930\u094d\u0937",
		      yy: "%d \u092c\u0930\u094d\u0937"
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),
		      Be = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
		      m = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
		      d = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
		      qe = (e.defineLocale("nl-be", {
		    months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? Be : Ge)[e.month()] : Ge;
		    },
		    monthsRegex: d,
		    monthsShortRegex: d,
		    monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
		    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
		    monthsParse: m,
		    longMonthsParse: m,
		    shortMonthsParse: m,
		    weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
		    weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
		    weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[vandaag om] LT",
		      nextDay: "[morgen om] LT",
		      nextWeek: "dddd [om] LT",
		      lastDay: "[gisteren om] LT",
		      lastWeek: "[afgelopen] dddd [om] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "over %s",
		      past: "%s geleden",
		      s: "een paar seconden",
		      ss: "%d seconden",
		      m: "\xe9\xe9n minuut",
		      mm: "%d minuten",
		      h: "\xe9\xe9n uur",
		      hh: "%d uur",
		      d: "\xe9\xe9n dag",
		      dd: "%d dagen",
		      M: "\xe9\xe9n maand",
		      MM: "%d maanden",
		      y: "\xe9\xe9n jaar",
		      yy: "%d jaar"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
		    ordinal: function (e) {
		      return e + (1 === e || 8 === e || 20 <= e ? "ste" : "de");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),
		      Ue = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
		      r = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
		      n = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
		      $e = (e.defineLocale("nl", {
		    months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
		    monthsShort: function (e, a) {
		      return e ? (/-MMM-/.test(a) ? Ue : qe)[e.month()] : qe;
		    },
		    monthsRegex: n,
		    monthsShortRegex: n,
		    monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
		    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
		    monthsParse: r,
		    longMonthsParse: r,
		    shortMonthsParse: r,
		    weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
		    weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
		    weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD-MM-YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[vandaag om] LT",
		      nextDay: "[morgen om] LT",
		      nextWeek: "dddd [om] LT",
		      lastDay: "[gisteren om] LT",
		      lastWeek: "[afgelopen] dddd [om] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "over %s",
		      past: "%s geleden",
		      s: "een paar seconden",
		      ss: "%d seconden",
		      m: "\xe9\xe9n minuut",
		      mm: "%d minuten",
		      h: "\xe9\xe9n uur",
		      hh: "%d uur",
		      d: "\xe9\xe9n dag",
		      dd: "%d dagen",
		      w: "\xe9\xe9n week",
		      ww: "%d weken",
		      M: "\xe9\xe9n maand",
		      MM: "%d maanden",
		      y: "\xe9\xe9n jaar",
		      yy: "%d jaar"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
		    ordinal: function (e) {
		      return e + (1 === e || 8 === e || 20 <= e ? "ste" : "de");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("nn", {
		    months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
		    monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "sundag_m\xe5ndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
		    weekdaysShort: "su._m\xe5._ty._on._to._fr._lau.".split("_"),
		    weekdaysMin: "su_m\xe5_ty_on_to_fr_la".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY [kl.] H:mm",
		      LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
		    },
		    calendar: {
		      sameDay: "[I dag klokka] LT",
		      nextDay: "[I morgon klokka] LT",
		      nextWeek: "dddd [klokka] LT",
		      lastDay: "[I g\xe5r klokka] LT",
		      lastWeek: "[F\xf8reg\xe5ande] dddd [klokka] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "om %s",
		      past: "%s sidan",
		      s: "nokre sekund",
		      ss: "%d sekund",
		      m: "eit minutt",
		      mm: "%d minutt",
		      h: "ein time",
		      hh: "%d timar",
		      d: "ein dag",
		      dd: "%d dagar",
		      w: "ei veke",
		      ww: "%d veker",
		      M: "ein m\xe5nad",
		      MM: "%d m\xe5nader",
		      y: "eit \xe5r",
		      yy: "%d \xe5r"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("oc-lnc", {
		    months: {
		      standalone: "geni\xe8r_febri\xe8r_mar\xe7_abril_mai_junh_julhet_agost_setembre_oct\xf2bre_novembre_decembre".split("_"),
		      format: "de geni\xe8r_de febri\xe8r_de mar\xe7_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'oct\xf2bre_de novembre_de decembre".split("_"),
		      isFormat: /D[oD]?(\s)+MMMM/
		    },
		    monthsShort: "gen._febr._mar\xe7_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "dimenge_diluns_dimars_dim\xe8cres_dij\xf2us_divendres_dissabte".split("_"),
		    weekdaysShort: "dg._dl._dm._dc._dj._dv._ds.".split("_"),
		    weekdaysMin: "dg_dl_dm_dc_dj_dv_ds".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM [de] YYYY",
		      ll: "D MMM YYYY",
		      LLL: "D MMMM [de] YYYY [a] H:mm",
		      lll: "D MMM YYYY, H:mm",
		      LLLL: "dddd D MMMM [de] YYYY [a] H:mm",
		      llll: "ddd D MMM YYYY, H:mm"
		    },
		    calendar: {
		      sameDay: "[u\xe8i a] LT",
		      nextDay: "[deman a] LT",
		      nextWeek: "dddd [a] LT",
		      lastDay: "[i\xe8r a] LT",
		      lastWeek: "dddd [passat a] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "d'aqu\xed %s",
		      past: "fa %s",
		      s: "unas segondas",
		      ss: "%d segondas",
		      m: "una minuta",
		      mm: "%d minutas",
		      h: "una ora",
		      hh: "%d oras",
		      d: "un jorn",
		      dd: "%d jorns",
		      M: "un mes",
		      MM: "%d meses",
		      y: "un an",
		      yy: "%d ans"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/,
		    ordinal: function (e, a) {
		      return e + ("w" !== a && "W" !== a ? 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "\xe8" : "a");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), {
		    1: "\u0a67",
		    2: "\u0a68",
		    3: "\u0a69",
		    4: "\u0a6a",
		    5: "\u0a6b",
		    6: "\u0a6c",
		    7: "\u0a6d",
		    8: "\u0a6e",
		    9: "\u0a6f",
		    0: "\u0a66"
		  }),
		      Qe = {
		    "\u0a67": "1",
		    "\u0a68": "2",
		    "\u0a69": "3",
		    "\u0a6a": "4",
		    "\u0a6b": "5",
		    "\u0a6c": "6",
		    "\u0a6d": "7",
		    "\u0a6e": "8",
		    "\u0a6f": "9",
		    "\u0a66": "0"
		  },
		      Ve = (e.defineLocale("pa-in", {
		    months: "\u0a1c\u0a28\u0a35\u0a30\u0a40_\u0a2b\u0a3c\u0a30\u0a35\u0a30\u0a40_\u0a2e\u0a3e\u0a30\u0a1a_\u0a05\u0a2a\u0a4d\u0a30\u0a48\u0a32_\u0a2e\u0a08_\u0a1c\u0a42\u0a28_\u0a1c\u0a41\u0a32\u0a3e\u0a08_\u0a05\u0a17\u0a38\u0a24_\u0a38\u0a24\u0a70\u0a2c\u0a30_\u0a05\u0a15\u0a24\u0a42\u0a2c\u0a30_\u0a28\u0a35\u0a70\u0a2c\u0a30_\u0a26\u0a38\u0a70\u0a2c\u0a30".split("_"),
		    monthsShort: "\u0a1c\u0a28\u0a35\u0a30\u0a40_\u0a2b\u0a3c\u0a30\u0a35\u0a30\u0a40_\u0a2e\u0a3e\u0a30\u0a1a_\u0a05\u0a2a\u0a4d\u0a30\u0a48\u0a32_\u0a2e\u0a08_\u0a1c\u0a42\u0a28_\u0a1c\u0a41\u0a32\u0a3e\u0a08_\u0a05\u0a17\u0a38\u0a24_\u0a38\u0a24\u0a70\u0a2c\u0a30_\u0a05\u0a15\u0a24\u0a42\u0a2c\u0a30_\u0a28\u0a35\u0a70\u0a2c\u0a30_\u0a26\u0a38\u0a70\u0a2c\u0a30".split("_"),
		    weekdays: "\u0a10\u0a24\u0a35\u0a3e\u0a30_\u0a38\u0a4b\u0a2e\u0a35\u0a3e\u0a30_\u0a2e\u0a70\u0a17\u0a32\u0a35\u0a3e\u0a30_\u0a2c\u0a41\u0a27\u0a35\u0a3e\u0a30_\u0a35\u0a40\u0a30\u0a35\u0a3e\u0a30_\u0a38\u0a3c\u0a41\u0a71\u0a15\u0a30\u0a35\u0a3e\u0a30_\u0a38\u0a3c\u0a28\u0a40\u0a1a\u0a30\u0a35\u0a3e\u0a30".split("_"),
		    weekdaysShort: "\u0a10\u0a24_\u0a38\u0a4b\u0a2e_\u0a2e\u0a70\u0a17\u0a32_\u0a2c\u0a41\u0a27_\u0a35\u0a40\u0a30_\u0a38\u0a3c\u0a41\u0a15\u0a30_\u0a38\u0a3c\u0a28\u0a40".split("_"),
		    weekdaysMin: "\u0a10\u0a24_\u0a38\u0a4b\u0a2e_\u0a2e\u0a70\u0a17\u0a32_\u0a2c\u0a41\u0a27_\u0a35\u0a40\u0a30_\u0a38\u0a3c\u0a41\u0a15\u0a30_\u0a38\u0a3c\u0a28\u0a40".split("_"),
		    longDateFormat: {
		      LT: "A h:mm \u0a35\u0a1c\u0a47",
		      LTS: "A h:mm:ss \u0a35\u0a1c\u0a47",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm \u0a35\u0a1c\u0a47",
		      LLLL: "dddd, D MMMM YYYY, A h:mm \u0a35\u0a1c\u0a47"
		    },
		    calendar: {
		      sameDay: "[\u0a05\u0a1c] LT",
		      nextDay: "[\u0a15\u0a32] LT",
		      nextWeek: "[\u0a05\u0a17\u0a32\u0a3e] dddd, LT",
		      lastDay: "[\u0a15\u0a32] LT",
		      lastWeek: "[\u0a2a\u0a3f\u0a1b\u0a32\u0a47] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0a35\u0a3f\u0a71\u0a1a",
		      past: "%s \u0a2a\u0a3f\u0a1b\u0a32\u0a47",
		      s: "\u0a15\u0a41\u0a1d \u0a38\u0a15\u0a3f\u0a70\u0a1f",
		      ss: "%d \u0a38\u0a15\u0a3f\u0a70\u0a1f",
		      m: "\u0a07\u0a15 \u0a2e\u0a3f\u0a70\u0a1f",
		      mm: "%d \u0a2e\u0a3f\u0a70\u0a1f",
		      h: "\u0a07\u0a71\u0a15 \u0a18\u0a70\u0a1f\u0a3e",
		      hh: "%d \u0a18\u0a70\u0a1f\u0a47",
		      d: "\u0a07\u0a71\u0a15 \u0a26\u0a3f\u0a28",
		      dd: "%d \u0a26\u0a3f\u0a28",
		      M: "\u0a07\u0a71\u0a15 \u0a2e\u0a39\u0a40\u0a28\u0a3e",
		      MM: "%d \u0a2e\u0a39\u0a40\u0a28\u0a47",
		      y: "\u0a07\u0a71\u0a15 \u0a38\u0a3e\u0a32",
		      yy: "%d \u0a38\u0a3e\u0a32"
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0a66]/g, function (e) {
		        return Qe[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return $e[e];
		      });
		    },
		    meridiemParse: /\u0a30\u0a3e\u0a24|\u0a38\u0a35\u0a47\u0a30|\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30|\u0a38\u0a3c\u0a3e\u0a2e/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0a30\u0a3e\u0a24" === a ? e < 4 ? e : e + 12 : "\u0a38\u0a35\u0a47\u0a30" === a ? e : "\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30" === a ? 10 <= e ? e : e + 12 : "\u0a38\u0a3c\u0a3e\u0a2e" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0a30\u0a3e\u0a24" : e < 10 ? "\u0a38\u0a35\u0a47\u0a30" : e < 17 ? "\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30" : e < 20 ? "\u0a38\u0a3c\u0a3e\u0a2e" : "\u0a30\u0a3e\u0a24";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), "stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017adziernik_listopad_grudzie\u0144".split("_")),
		      Ze = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015bnia_pa\u017adziernika_listopada_grudnia".split("_"),
		      d = [/^sty/i, /^lut/i, /^mar/i, /^kwi/i, /^maj/i, /^cze/i, /^lip/i, /^sie/i, /^wrz/i, /^pa\u017a/i, /^lis/i, /^gru/i];

		  function Xe(e) {
		    return e % 10 < 5 && 1 < e % 10 && ~~(e / 10) % 10 != 1;
		  }

		  function b(e, a, _) {
		    var s = e + " ";

		    switch (_) {
		      case "ss":
		        return s + (Xe(e) ? "sekundy" : "sekund");

		      case "m":
		        return a ? "minuta" : "minut\u0119";

		      case "mm":
		        return s + (Xe(e) ? "minuty" : "minut");

		      case "h":
		        return a ? "godzina" : "godzin\u0119";

		      case "hh":
		        return s + (Xe(e) ? "godziny" : "godzin");

		      case "ww":
		        return s + (Xe(e) ? "tygodnie" : "tygodni");

		      case "MM":
		        return s + (Xe(e) ? "miesi\u0105ce" : "miesi\u0119cy");

		      case "yy":
		        return s + (Xe(e) ? "lata" : "lat");
		    }
		  }

		  function S(e, a, _) {
		    return e + (20 <= e % 100 || 100 <= e && e % 100 == 0 ? " de " : " ") + {
		      ss: "secunde",
		      mm: "minute",
		      hh: "ore",
		      dd: "zile",
		      ww: "s\u0103pt\u0103m\xe2ni",
		      MM: "luni",
		      yy: "ani"
		    }[_];
		  }

		  function v(e, a, _) {
		    return "m" === _ ? a ? "\u043c\u0438\u043d\u0443\u0442\u0430" : "\u043c\u0438\u043d\u0443\u0442\u0443" : e + " " + (e = +e, a = (a = {
		      ss: a ? "\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434" : "\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434",
		      mm: a ? "\u043c\u0438\u043d\u0443\u0442\u0430_\u043c\u0438\u043d\u0443\u0442\u044b_\u043c\u0438\u043d\u0443\u0442" : "\u043c\u0438\u043d\u0443\u0442\u0443_\u043c\u0438\u043d\u0443\u0442\u044b_\u043c\u0438\u043d\u0443\u0442",
		      hh: "\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043e\u0432",
		      dd: "\u0434\u0435\u043d\u044c_\u0434\u043d\u044f_\u0434\u043d\u0435\u0439",
		      ww: "\u043d\u0435\u0434\u0435\u043b\u044f_\u043d\u0435\u0434\u0435\u043b\u0438_\u043d\u0435\u0434\u0435\u043b\u044c",
		      MM: "\u043c\u0435\u0441\u044f\u0446_\u043c\u0435\u0441\u044f\u0446\u0430_\u043c\u0435\u0441\u044f\u0446\u0435\u0432",
		      yy: "\u0433\u043e\u0434_\u0433\u043e\u0434\u0430_\u043b\u0435\u0442"
		    }[_]).split("_"), e % 10 == 1 && e % 100 != 11 ? a[0] : 2 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? a[1] : a[2]);
		  }

		  e.defineLocale("pl", {
		    months: function (e, a) {
		      return e ? (/D MMMM/.test(a) ? Ze : Ve)[e.month()] : Ve;
		    },
		    monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017a_lis_gru".split("_"),
		    monthsParse: d,
		    longMonthsParse: d,
		    shortMonthsParse: d,
		    weekdays: "niedziela_poniedzia\u0142ek_wtorek_\u015broda_czwartek_pi\u0105tek_sobota".split("_"),
		    weekdaysShort: "ndz_pon_wt_\u015br_czw_pt_sob".split("_"),
		    weekdaysMin: "Nd_Pn_Wt_\u015ar_Cz_Pt_So".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Dzi\u015b o] LT",
		      nextDay: "[Jutro o] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[W niedziel\u0119 o] LT";

		          case 2:
		            return "[We wtorek o] LT";

		          case 3:
		            return "[W \u015brod\u0119 o] LT";

		          case 6:
		            return "[W sobot\u0119 o] LT";

		          default:
		            return "[W] dddd [o] LT";
		        }
		      },
		      lastDay: "[Wczoraj o] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[W zesz\u0142\u0105 niedziel\u0119 o] LT";

		          case 3:
		            return "[W zesz\u0142\u0105 \u015brod\u0119 o] LT";

		          case 6:
		            return "[W zesz\u0142\u0105 sobot\u0119 o] LT";

		          default:
		            return "[W zesz\u0142y] dddd [o] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "%s temu",
		      s: "kilka sekund",
		      ss: b,
		      m: b,
		      mm: b,
		      h: b,
		      hh: b,
		      d: "1 dzie\u0144",
		      dd: "%d dni",
		      w: "tydzie\u0144",
		      ww: b,
		      M: "miesi\u0105c",
		      MM: b,
		      y: "rok",
		      yy: b
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("pt-br", {
		    months: "janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
		    monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
		    weekdays: "domingo_segunda-feira_ter\xe7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xe1bado".split("_"),
		    weekdaysShort: "dom_seg_ter_qua_qui_sex_s\xe1b".split("_"),
		    weekdaysMin: "do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_s\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY [\xe0s] HH:mm",
		      LLLL: "dddd, D [de] MMMM [de] YYYY [\xe0s] HH:mm"
		    },
		    calendar: {
		      sameDay: "[Hoje \xe0s] LT",
		      nextDay: "[Amanh\xe3 \xe0s] LT",
		      nextWeek: "dddd [\xe0s] LT",
		      lastDay: "[Ontem \xe0s] LT",
		      lastWeek: function () {
		        return 0 === this.day() || 6 === this.day() ? "[\xdaltimo] dddd [\xe0s] LT" : "[\xdaltima] dddd [\xe0s] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "em %s",
		      past: "h\xe1 %s",
		      s: "poucos segundos",
		      ss: "%d segundos",
		      m: "um minuto",
		      mm: "%d minutos",
		      h: "uma hora",
		      hh: "%d horas",
		      d: "um dia",
		      dd: "%d dias",
		      M: "um m\xeas",
		      MM: "%d meses",
		      y: "um ano",
		      yy: "%d anos"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    invalidDate: "Data inv\xe1lida"
		  }), e.defineLocale("pt", {
		    months: "janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
		    monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
		    weekdays: "Domingo_Segunda-feira_Ter\xe7a-feira_Quarta-feira_Quinta-feira_Sexta-feira_S\xe1bado".split("_"),
		    weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_S\xe1b".split("_"),
		    weekdaysMin: "Do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_S\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D [de] MMMM [de] YYYY",
		      LLL: "D [de] MMMM [de] YYYY HH:mm",
		      LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Hoje \xe0s] LT",
		      nextDay: "[Amanh\xe3 \xe0s] LT",
		      nextWeek: "dddd [\xe0s] LT",
		      lastDay: "[Ontem \xe0s] LT",
		      lastWeek: function () {
		        return 0 === this.day() || 6 === this.day() ? "[\xdaltimo] dddd [\xe0s] LT" : "[\xdaltima] dddd [\xe0s] LT";
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "em %s",
		      past: "h\xe1 %s",
		      s: "segundos",
		      ss: "%d segundos",
		      m: "um minuto",
		      mm: "%d minutos",
		      h: "uma hora",
		      hh: "%d horas",
		      d: "um dia",
		      dd: "%d dias",
		      w: "uma semana",
		      ww: "%d semanas",
		      M: "um m\xeas",
		      MM: "%d meses",
		      y: "um ano",
		      yy: "%d anos"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\xba/,
		    ordinal: "%d\xba",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("ro", {
		    months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
		    monthsShort: "ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "duminic\u0103_luni_mar\u021bi_miercuri_joi_vineri_s\xe2mb\u0103t\u0103".split("_"),
		    weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_S\xe2m".split("_"),
		    weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_S\xe2".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY H:mm",
		      LLLL: "dddd, D MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[azi la] LT",
		      nextDay: "[m\xe2ine la] LT",
		      nextWeek: "dddd [la] LT",
		      lastDay: "[ieri la] LT",
		      lastWeek: "[fosta] dddd [la] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "peste %s",
		      past: "%s \xeen urm\u0103",
		      s: "c\xe2teva secunde",
		      ss: S,
		      m: "un minut",
		      mm: S,
		      h: "o or\u0103",
		      hh: S,
		      d: "o zi",
		      dd: S,
		      w: "o s\u0103pt\u0103m\xe2n\u0103",
		      ww: S,
		      M: "o lun\u0103",
		      MM: S,
		      y: "un an",
		      yy: S
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  });
		  m = [/^\u044f\u043d\u0432/i, /^\u0444\u0435\u0432/i, /^\u043c\u0430\u0440/i, /^\u0430\u043f\u0440/i, /^\u043c\u0430[\u0439\u044f]/i, /^\u0438\u044e\u043d/i, /^\u0438\u044e\u043b/i, /^\u0430\u0432\u0433/i, /^\u0441\u0435\u043d/i, /^\u043e\u043a\u0442/i, /^\u043d\u043e\u044f/i, /^\u0434\u0435\u043a/i], e.defineLocale("ru", {
		    months: {
		      format: "\u044f\u043d\u0432\u0430\u0440\u044f_\u0444\u0435\u0432\u0440\u0430\u043b\u044f_\u043c\u0430\u0440\u0442\u0430_\u0430\u043f\u0440\u0435\u043b\u044f_\u043c\u0430\u044f_\u0438\u044e\u043d\u044f_\u0438\u044e\u043b\u044f_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f_\u043e\u043a\u0442\u044f\u0431\u0440\u044f_\u043d\u043e\u044f\u0431\u0440\u044f_\u0434\u0435\u043a\u0430\u0431\u0440\u044f".split("_"),
		      standalone: "\u044f\u043d\u0432\u0430\u0440\u044c_\u0444\u0435\u0432\u0440\u0430\u043b\u044c_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b\u044c_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c_\u043e\u043a\u0442\u044f\u0431\u0440\u044c_\u043d\u043e\u044f\u0431\u0440\u044c_\u0434\u0435\u043a\u0430\u0431\u0440\u044c".split("_")
		    },
		    monthsShort: {
		      format: "\u044f\u043d\u0432._\u0444\u0435\u0432\u0440._\u043c\u0430\u0440._\u0430\u043f\u0440._\u043c\u0430\u044f_\u0438\u044e\u043d\u044f_\u0438\u044e\u043b\u044f_\u0430\u0432\u0433._\u0441\u0435\u043d\u0442._\u043e\u043a\u0442._\u043d\u043e\u044f\u0431._\u0434\u0435\u043a.".split("_"),
		      standalone: "\u044f\u043d\u0432._\u0444\u0435\u0432\u0440._\u043c\u0430\u0440\u0442_\u0430\u043f\u0440._\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433._\u0441\u0435\u043d\u0442._\u043e\u043a\u0442._\u043d\u043e\u044f\u0431._\u0434\u0435\u043a.".split("_")
		    },
		    weekdays: {
		      standalone: "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043f\u044f\u0442\u043d\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043e\u0442\u0430".split("_"),
		      format: "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043f\u044f\u0442\u043d\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043e\u0442\u0443".split("_"),
		      isFormat: /\[ ?[\u0412\u0432] ?(?:\u043f\u0440\u043e\u0448\u043b\u0443\u044e|\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e|\u044d\u0442\u0443)? ?] ?dddd/
		    },
		    weekdaysShort: "\u0432\u0441_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),
		    weekdaysMin: "\u0432\u0441_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),
		    monthsParse: m,
		    longMonthsParse: m,
		    shortMonthsParse: m,
		    monthsRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i,
		    monthsShortRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i,
		    monthsStrictRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044f\u044c]|\u0444\u0435\u0432\u0440\u0430\u043b[\u044f\u044c]|\u043c\u0430\u0440\u0442\u0430?|\u0430\u043f\u0440\u0435\u043b[\u044f\u044c]|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044f\u044c]|\u0438\u044e\u043b[\u044f\u044c]|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043e\u043a\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043d\u043e\u044f\u0431\u0440[\u044f\u044c]|\u0434\u0435\u043a\u0430\u0431\u0440[\u044f\u044c])/i,
		    monthsShortStrictRegex: /^(\u044f\u043d\u0432\.|\u0444\u0435\u0432\u0440?\.|\u043c\u0430\u0440[\u0442.]|\u0430\u043f\u0440\.|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044c\u044f.]|\u0438\u044e\u043b[\u044c\u044f.]|\u0430\u0432\u0433\.|\u0441\u0435\u043d\u0442?\.|\u043e\u043a\u0442\.|\u043d\u043e\u044f\u0431?\.|\u0434\u0435\u043a\.)/i,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY \u0433.",
		      LLL: "D MMMM YYYY \u0433., H:mm",
		      LLLL: "dddd, D MMMM YYYY \u0433., H:mm"
		    },
		    calendar: {
		      sameDay: "[\u0421\u0435\u0433\u043e\u0434\u043d\u044f, \u0432] LT",
		      nextDay: "[\u0417\u0430\u0432\u0442\u0440\u0430, \u0432] LT",
		      lastDay: "[\u0412\u0447\u0435\u0440\u0430, \u0432] LT",
		      nextWeek: function (e) {
		        if (e.week() === this.week()) return 2 === this.day() ? "[\u0412\u043e] dddd, [\u0432] LT" : "[\u0412] dddd, [\u0432] LT";

		        switch (this.day()) {
		          case 0:
		            return "[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435] dddd, [\u0432] LT";

		          case 1:
		          case 2:
		          case 4:
		            return "[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439] dddd, [\u0432] LT";

		          case 3:
		          case 5:
		          case 6:
		            return "[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e] dddd, [\u0432] LT";
		        }
		      },
		      lastWeek: function (e) {
		        if (e.week() === this.week()) return 2 === this.day() ? "[\u0412\u043e] dddd, [\u0432] LT" : "[\u0412] dddd, [\u0432] LT";

		        switch (this.day()) {
		          case 0:
		            return "[\u0412 \u043f\u0440\u043e\u0448\u043b\u043e\u0435] dddd, [\u0432] LT";

		          case 1:
		          case 2:
		          case 4:
		            return "[\u0412 \u043f\u0440\u043e\u0448\u043b\u044b\u0439] dddd, [\u0432] LT";

		          case 3:
		          case 5:
		          case 6:
		            return "[\u0412 \u043f\u0440\u043e\u0448\u043b\u0443\u044e] dddd, [\u0432] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0447\u0435\u0440\u0435\u0437 %s",
		      past: "%s \u043d\u0430\u0437\u0430\u0434",
		      s: "\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434",
		      ss: v,
		      m: v,
		      mm: v,
		      h: "\u0447\u0430\u0441",
		      hh: v,
		      d: "\u0434\u0435\u043d\u044c",
		      dd: v,
		      w: "\u043d\u0435\u0434\u0435\u043b\u044f",
		      ww: v,
		      M: "\u043c\u0435\u0441\u044f\u0446",
		      MM: v,
		      y: "\u0433\u043e\u0434",
		      yy: v
		    },
		    meridiemParse: /\u043d\u043e\u0447\u0438|\u0443\u0442\u0440\u0430|\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430/i,
		    isPM: function (e) {
		      return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430)$/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u043d\u043e\u0447\u0438" : e < 12 ? "\u0443\u0442\u0440\u0430" : e < 17 ? "\u0434\u043d\u044f" : "\u0432\u0435\u0447\u0435\u0440\u0430";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e|\u044f)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "M":
		        case "d":
		        case "DDD":
		          return e + "-\u0439";

		        case "D":
		          return e + "-\u0433\u043e";

		        case "w":
		        case "W":
		          return e + "-\u044f";

		        default:
		          return e;
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), n = ["\u062c\u0646\u0648\u0631\u064a", "\u0641\u064a\u0628\u0631\u0648\u0631\u064a", "\u0645\u0627\u0631\u0686", "\u0627\u067e\u0631\u064a\u0644", "\u0645\u0626\u064a", "\u062c\u0648\u0646", "\u062c\u0648\u0644\u0627\u0621\u0650", "\u0622\u06af\u0633\u067d", "\u0633\u064a\u067e\u067d\u0645\u0628\u0631", "\u0622\u06aa\u067d\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u068a\u0633\u0645\u0628\u0631"], r = ["\u0622\u0686\u0631", "\u0633\u0648\u0645\u0631", "\u0627\u06b1\u0627\u0631\u0648", "\u0627\u0631\u0628\u0639", "\u062e\u0645\u064a\u0633", "\u062c\u0645\u0639", "\u0687\u0646\u0687\u0631"], e.defineLocale("sd", {
		    months: n,
		    monthsShort: n,
		    weekdays: r,
		    weekdaysShort: r,
		    weekdaysMin: r,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd\u060c D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/,
		    isPM: function (e) {
		      return "\u0634\u0627\u0645" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0635\u0628\u062d" : "\u0634\u0627\u0645";
		    },
		    calendar: {
		      sameDay: "[\u0627\u0684] LT",
		      nextDay: "[\u0633\u0680\u0627\u06bb\u064a] LT",
		      nextWeek: "dddd [\u0627\u06b3\u064a\u0646 \u0647\u0641\u062a\u064a \u062a\u064a] LT",
		      lastDay: "[\u06aa\u0627\u0644\u0647\u0647] LT",
		      lastWeek: "[\u06af\u0632\u0631\u064a\u0644 \u0647\u0641\u062a\u064a] dddd [\u062a\u064a] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u067e\u0648\u0621",
		      past: "%s \u0627\u06b3",
		      s: "\u0686\u0646\u062f \u0633\u064a\u06aa\u0646\u068a",
		      ss: "%d \u0633\u064a\u06aa\u0646\u068a",
		      m: "\u0647\u06aa \u0645\u0646\u067d",
		      mm: "%d \u0645\u0646\u067d",
		      h: "\u0647\u06aa \u06aa\u0644\u0627\u06aa",
		      hh: "%d \u06aa\u0644\u0627\u06aa",
		      d: "\u0647\u06aa \u068f\u064a\u0646\u0647\u0646",
		      dd: "%d \u068f\u064a\u0646\u0647\u0646",
		      M: "\u0647\u06aa \u0645\u0647\u064a\u0646\u0648",
		      MM: "%d \u0645\u0647\u064a\u0646\u0627",
		      y: "\u0647\u06aa \u0633\u0627\u0644",
		      yy: "%d \u0633\u0627\u0644"
		    },
		    preparse: function (e) {
		      return e.replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("se", {
		    months: "o\u0111\u0111ajagem\xe1nnu_guovvam\xe1nnu_njuk\u010dam\xe1nnu_cuo\u014bom\xe1nnu_miessem\xe1nnu_geassem\xe1nnu_suoidnem\xe1nnu_borgem\xe1nnu_\u010dak\u010dam\xe1nnu_golggotm\xe1nnu_sk\xe1bmam\xe1nnu_juovlam\xe1nnu".split("_"),
		    monthsShort: "o\u0111\u0111j_guov_njuk_cuo_mies_geas_suoi_borg_\u010dak\u010d_golg_sk\xe1b_juov".split("_"),
		    weekdays: "sotnabeaivi_vuoss\xe1rga_ma\u014b\u014beb\xe1rga_gaskavahkku_duorastat_bearjadat_l\xe1vvardat".split("_"),
		    weekdaysShort: "sotn_vuos_ma\u014b_gask_duor_bear_l\xe1v".split("_"),
		    weekdaysMin: "s_v_m_g_d_b_L".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "MMMM D. [b.] YYYY",
		      LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
		      LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm"
		    },
		    calendar: {
		      sameDay: "[otne ti] LT",
		      nextDay: "[ihttin ti] LT",
		      nextWeek: "dddd [ti] LT",
		      lastDay: "[ikte ti] LT",
		      lastWeek: "[ovddit] dddd [ti] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s gea\u017ees",
		      past: "ma\u014bit %s",
		      s: "moadde sekunddat",
		      ss: "%d sekunddat",
		      m: "okta minuhta",
		      mm: "%d minuhtat",
		      h: "okta diimmu",
		      hh: "%d diimmut",
		      d: "okta beaivi",
		      dd: "%d beaivvit",
		      M: "okta m\xe1nnu",
		      MM: "%d m\xe1nut",
		      y: "okta jahki",
		      yy: "%d jagit"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("si", {
		    months: "\u0da2\u0db1\u0dc0\u0dcf\u0dbb\u0dd2_\u0db4\u0dd9\u0db6\u0dbb\u0dc0\u0dcf\u0dbb\u0dd2_\u0db8\u0dcf\u0dbb\u0dca\u0dad\u0dd4_\u0d85\u0db4\u0dca\u200d\u0dbb\u0dda\u0dbd\u0dca_\u0db8\u0dd0\u0dba\u0dd2_\u0da2\u0dd6\u0db1\u0dd2_\u0da2\u0dd6\u0dbd\u0dd2_\u0d85\u0d9c\u0ddd\u0dc3\u0dca\u0dad\u0dd4_\u0dc3\u0dd0\u0db4\u0dca\u0dad\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca_\u0d94\u0d9a\u0dca\u0dad\u0ddd\u0db6\u0dbb\u0dca_\u0db1\u0ddc\u0dc0\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca_\u0daf\u0dd9\u0dc3\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca".split("_"),
		    monthsShort: "\u0da2\u0db1_\u0db4\u0dd9\u0db6_\u0db8\u0dcf\u0dbb\u0dca_\u0d85\u0db4\u0dca_\u0db8\u0dd0\u0dba\u0dd2_\u0da2\u0dd6\u0db1\u0dd2_\u0da2\u0dd6\u0dbd\u0dd2_\u0d85\u0d9c\u0ddd_\u0dc3\u0dd0\u0db4\u0dca_\u0d94\u0d9a\u0dca_\u0db1\u0ddc\u0dc0\u0dd0_\u0daf\u0dd9\u0dc3\u0dd0".split("_"),
		    weekdays: "\u0d89\u0dbb\u0dd2\u0daf\u0dcf_\u0dc3\u0db3\u0dd4\u0daf\u0dcf_\u0d85\u0d9f\u0dc4\u0dbb\u0dd4\u0dc0\u0dcf\u0daf\u0dcf_\u0db6\u0daf\u0dcf\u0daf\u0dcf_\u0db6\u0dca\u200d\u0dbb\u0dc4\u0dc3\u0dca\u0db4\u0dad\u0dd2\u0db1\u0dca\u0daf\u0dcf_\u0dc3\u0dd2\u0d9a\u0dd4\u0dbb\u0dcf\u0daf\u0dcf_\u0dc3\u0dd9\u0db1\u0dc3\u0dd4\u0dbb\u0dcf\u0daf\u0dcf".split("_"),
		    weekdaysShort: "\u0d89\u0dbb\u0dd2_\u0dc3\u0db3\u0dd4_\u0d85\u0d9f_\u0db6\u0daf\u0dcf_\u0db6\u0dca\u200d\u0dbb\u0dc4_\u0dc3\u0dd2\u0d9a\u0dd4_\u0dc3\u0dd9\u0db1".split("_"),
		    weekdaysMin: "\u0d89_\u0dc3_\u0d85_\u0db6_\u0db6\u0dca\u200d\u0dbb_\u0dc3\u0dd2_\u0dc3\u0dd9".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "a h:mm",
		      LTS: "a h:mm:ss",
		      L: "YYYY/MM/DD",
		      LL: "YYYY MMMM D",
		      LLL: "YYYY MMMM D, a h:mm",
		      LLLL: "YYYY MMMM D [\u0dc0\u0dd0\u0db1\u0dd2] dddd, a h:mm:ss"
		    },
		    calendar: {
		      sameDay: "[\u0d85\u0daf] LT[\u0da7]",
		      nextDay: "[\u0dc4\u0dd9\u0da7] LT[\u0da7]",
		      nextWeek: "dddd LT[\u0da7]",
		      lastDay: "[\u0d8a\u0dba\u0dda] LT[\u0da7]",
		      lastWeek: "[\u0db4\u0dc3\u0dd4\u0d9c\u0dd2\u0dba] dddd LT[\u0da7]",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s\u0d9a\u0dd2\u0db1\u0dca",
		      past: "%s\u0d9a\u0da7 \u0db4\u0dd9\u0dbb",
		      s: "\u0dad\u0dad\u0dca\u0db4\u0dbb \u0d9a\u0dd2\u0dc4\u0dd2\u0db4\u0dba",
		      ss: "\u0dad\u0dad\u0dca\u0db4\u0dbb %d",
		      m: "\u0db8\u0dd2\u0db1\u0dd2\u0dad\u0dca\u0dad\u0dd4\u0dc0",
		      mm: "\u0db8\u0dd2\u0db1\u0dd2\u0dad\u0dca\u0dad\u0dd4 %d",
		      h: "\u0db4\u0dd0\u0dba",
		      hh: "\u0db4\u0dd0\u0dba %d",
		      d: "\u0daf\u0dd2\u0db1\u0dba",
		      dd: "\u0daf\u0dd2\u0db1 %d",
		      M: "\u0db8\u0dcf\u0dc3\u0dba",
		      MM: "\u0db8\u0dcf\u0dc3 %d",
		      y: "\u0dc0\u0dc3\u0dbb",
		      yy: "\u0dc0\u0dc3\u0dbb %d"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2} \u0dc0\u0dd0\u0db1\u0dd2/,
		    ordinal: function (e) {
		      return e + " \u0dc0\u0dd0\u0db1\u0dd2";
		    },
		    meridiemParse: /\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4|\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4|\u0db4\u0dd9.\u0dc0|\u0db4.\u0dc0./,
		    isPM: function (e) {
		      return "\u0db4.\u0dc0." === e || "\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4" === e;
		    },
		    meridiem: function (e, a, _) {
		      return 11 < e ? _ ? "\u0db4.\u0dc0." : "\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4" : _ ? "\u0db4\u0dd9.\u0dc0." : "\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4";
		    }
		  }), d = "janu\xe1r_febru\xe1r_marec_apr\xedl_m\xe1j_j\xfan_j\xfal_august_september_okt\xf3ber_november_december".split("_"), m = "jan_feb_mar_apr_m\xe1j_j\xfan_j\xfal_aug_sep_okt_nov_dec".split("_");

		  function ea(e) {
		    return 1 < e && e < 5;
		  }

		  function j(e, a, _, s) {
		    var d = e + " ";

		    switch (_) {
		      case "s":
		        return a || s ? "p\xe1r sek\xfand" : "p\xe1r sekundami";

		      case "ss":
		        return a || s ? d + (ea(e) ? "sekundy" : "sek\xfand") : d + "sekundami";

		      case "m":
		        return a ? "min\xfata" : s ? "min\xfatu" : "min\xfatou";

		      case "mm":
		        return a || s ? d + (ea(e) ? "min\xfaty" : "min\xfat") : d + "min\xfatami";

		      case "h":
		        return a ? "hodina" : s ? "hodinu" : "hodinou";

		      case "hh":
		        return a || s ? d + (ea(e) ? "hodiny" : "hod\xedn") : d + "hodinami";

		      case "d":
		        return a || s ? "de\u0148" : "d\u0148om";

		      case "dd":
		        return a || s ? d + (ea(e) ? "dni" : "dn\xed") : d + "d\u0148ami";

		      case "M":
		        return a || s ? "mesiac" : "mesiacom";

		      case "MM":
		        return a || s ? d + (ea(e) ? "mesiace" : "mesiacov") : d + "mesiacmi";

		      case "y":
		        return a || s ? "rok" : "rokom";

		      case "yy":
		        return a || s ? d + (ea(e) ? "roky" : "rokov") : d + "rokmi";
		    }
		  }

		  function x(e, a, _, s) {
		    var d = e + " ";

		    switch (_) {
		      case "s":
		        return a || s ? "nekaj sekund" : "nekaj sekundami";

		      case "ss":
		        return d += 1 === e ? a ? "sekundo" : "sekundi" : 2 === e ? a || s ? "sekundi" : "sekundah" : e < 5 ? a || s ? "sekunde" : "sekundah" : "sekund";

		      case "m":
		        return a ? "ena minuta" : "eno minuto";

		      case "mm":
		        return d += 1 === e ? a ? "minuta" : "minuto" : 2 === e ? a || s ? "minuti" : "minutama" : e < 5 ? a || s ? "minute" : "minutami" : a || s ? "minut" : "minutami";

		      case "h":
		        return a ? "ena ura" : "eno uro";

		      case "hh":
		        return d += 1 === e ? a ? "ura" : "uro" : 2 === e ? a || s ? "uri" : "urama" : e < 5 ? a || s ? "ure" : "urami" : a || s ? "ur" : "urami";

		      case "d":
		        return a || s ? "en dan" : "enim dnem";

		      case "dd":
		        return d += 1 === e ? a || s ? "dan" : "dnem" : 2 === e ? a || s ? "dni" : "dnevoma" : a || s ? "dni" : "dnevi";

		      case "M":
		        return a || s ? "en mesec" : "enim mesecem";

		      case "MM":
		        return d += 1 === e ? a || s ? "mesec" : "mesecem" : 2 === e ? a || s ? "meseca" : "mesecema" : e < 5 ? a || s ? "mesece" : "meseci" : a || s ? "mesecev" : "meseci";

		      case "y":
		        return a || s ? "eno leto" : "enim letom";

		      case "yy":
		        return d += 1 === e ? a || s ? "leto" : "letom" : 2 === e ? a || s ? "leti" : "letoma" : e < 5 ? a || s ? "leta" : "leti" : a || s ? "let" : "leti";
		    }
		  }

		  e.defineLocale("sk", {
		    months: d,
		    monthsShort: m,
		    weekdays: "nede\u013ea_pondelok_utorok_streda_\u0161tvrtok_piatok_sobota".split("_"),
		    weekdaysShort: "ne_po_ut_st_\u0161t_pi_so".split("_"),
		    weekdaysMin: "ne_po_ut_st_\u0161t_pi_so".split("_"),
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm",
		      LLLL: "dddd D. MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[dnes o] LT",
		      nextDay: "[zajtra o] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[v nede\u013eu o] LT";

		          case 1:
		          case 2:
		            return "[v] dddd [o] LT";

		          case 3:
		            return "[v stredu o] LT";

		          case 4:
		            return "[vo \u0161tvrtok o] LT";

		          case 5:
		            return "[v piatok o] LT";

		          case 6:
		            return "[v sobotu o] LT";
		        }
		      },
		      lastDay: "[v\u010dera o] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[minul\xfa nede\u013eu o] LT";

		          case 1:
		          case 2:
		            return "[minul\xfd] dddd [o] LT";

		          case 3:
		            return "[minul\xfa stredu o] LT";

		          case 4:
		          case 5:
		            return "[minul\xfd] dddd [o] LT";

		          case 6:
		            return "[minul\xfa sobotu o] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "pred %s",
		      s: j,
		      ss: j,
		      m: j,
		      mm: j,
		      h: j,
		      hh: j,
		      d: j,
		      dd: j,
		      M: j,
		      MM: j,
		      y: j,
		      yy: j
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("sl", {
		    months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
		    monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "nedelja_ponedeljek_torek_sreda_\u010detrtek_petek_sobota".split("_"),
		    weekdaysShort: "ned._pon._tor._sre._\u010det._pet._sob.".split("_"),
		    weekdaysMin: "ne_po_to_sr_\u010de_pe_so".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD. MM. YYYY",
		      LL: "D. MMMM YYYY",
		      LLL: "D. MMMM YYYY H:mm",
		      LLLL: "dddd, D. MMMM YYYY H:mm"
		    },
		    calendar: {
		      sameDay: "[danes ob] LT",
		      nextDay: "[jutri ob] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[v] [nedeljo] [ob] LT";

		          case 3:
		            return "[v] [sredo] [ob] LT";

		          case 6:
		            return "[v] [soboto] [ob] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[v] dddd [ob] LT";
		        }
		      },
		      lastDay: "[v\u010deraj ob] LT",
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[prej\u0161njo] [nedeljo] [ob] LT";

		          case 3:
		            return "[prej\u0161njo] [sredo] [ob] LT";

		          case 6:
		            return "[prej\u0161njo] [soboto] [ob] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[prej\u0161nji] dddd [ob] LT";
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u010dez %s",
		      past: "pred %s",
		      s: x,
		      ss: x,
		      m: x,
		      mm: x,
		      h: x,
		      hh: x,
		      d: x,
		      dd: x,
		      M: x,
		      MM: x,
		      y: x,
		      yy: x
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("sq", {
		    months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N\xebntor_Dhjetor".split("_"),
		    monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N\xebn_Dhj".split("_"),
		    weekdays: "E Diel_E H\xebn\xeb_E Mart\xeb_E M\xebrkur\xeb_E Enjte_E Premte_E Shtun\xeb".split("_"),
		    weekdaysShort: "Die_H\xebn_Mar_M\xebr_Enj_Pre_Sht".split("_"),
		    weekdaysMin: "D_H_Ma_M\xeb_E_P_Sh".split("_"),
		    weekdaysParseExact: !0,
		    meridiemParse: /PD|MD/,
		    isPM: function (e) {
		      return "M" === e.charAt(0);
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "PD" : "MD";
		    },
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Sot n\xeb] LT",
		      nextDay: "[Nes\xebr n\xeb] LT",
		      nextWeek: "dddd [n\xeb] LT",
		      lastDay: "[Dje n\xeb] LT",
		      lastWeek: "dddd [e kaluar n\xeb] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "n\xeb %s",
		      past: "%s m\xeb par\xeb",
		      s: "disa sekonda",
		      ss: "%d sekonda",
		      m: "nj\xeb minut\xeb",
		      mm: "%d minuta",
		      h: "nj\xeb or\xeb",
		      hh: "%d or\xeb",
		      d: "nj\xeb dit\xeb",
		      dd: "%d dit\xeb",
		      M: "nj\xeb muaj",
		      MM: "%d muaj",
		      y: "nj\xeb vit",
		      yy: "%d vite"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var P = {
		    words: {
		      ss: ["\u0441\u0435\u043a\u0443\u043d\u0434\u0430", "\u0441\u0435\u043a\u0443\u043d\u0434\u0435", "\u0441\u0435\u043a\u0443\u043d\u0434\u0438"],
		      m: ["\u0458\u0435\u0434\u0430\u043d \u043c\u0438\u043d\u0443\u0442", "\u0458\u0435\u0434\u043d\u043e\u0433 \u043c\u0438\u043d\u0443\u0442\u0430"],
		      mm: ["\u043c\u0438\u043d\u0443\u0442", "\u043c\u0438\u043d\u0443\u0442\u0430", "\u043c\u0438\u043d\u0443\u0442\u0430"],
		      h: ["\u0458\u0435\u0434\u0430\u043d \u0441\u0430\u0442", "\u0458\u0435\u0434\u043d\u043e\u0433 \u0441\u0430\u0442\u0430"],
		      hh: ["\u0441\u0430\u0442", "\u0441\u0430\u0442\u0430", "\u0441\u0430\u0442\u0438"],
		      d: ["\u0458\u0435\u0434\u0430\u043d \u0434\u0430\u043d", "\u0458\u0435\u0434\u043d\u043e\u0433 \u0434\u0430\u043d\u0430"],
		      dd: ["\u0434\u0430\u043d", "\u0434\u0430\u043d\u0430", "\u0434\u0430\u043d\u0430"],
		      M: ["\u0458\u0435\u0434\u0430\u043d \u043c\u0435\u0441\u0435\u0446", "\u0458\u0435\u0434\u043d\u043e\u0433 \u043c\u0435\u0441\u0435\u0446\u0430"],
		      MM: ["\u043c\u0435\u0441\u0435\u0446", "\u043c\u0435\u0441\u0435\u0446\u0430", "\u043c\u0435\u0441\u0435\u0446\u0438"],
		      y: ["\u0458\u0435\u0434\u043d\u0443 \u0433\u043e\u0434\u0438\u043d\u0443", "\u0458\u0435\u0434\u043d\u0435 \u0433\u043e\u0434\u0438\u043d\u0435"],
		      yy: ["\u0433\u043e\u0434\u0438\u043d\u0443", "\u0433\u043e\u0434\u0438\u043d\u0435", "\u0433\u043e\u0434\u0438\u043d\u0430"]
		    },
		    correctGrammaticalCase: function (e, a) {
		      return 1 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? e % 10 == 1 ? a[0] : a[1] : a[2];
		    },
		    translate: function (e, a, _, s) {
		      var d = P.words[_];
		      return 1 === _.length ? "y" === _ && a ? "\u0458\u0435\u0434\u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0430" : s || a ? d[0] : d[1] : (s = P.correctGrammaticalCase(e, d), "yy" === _ && a && "\u0433\u043e\u0434\u0438\u043d\u0443" === s ? e + " \u0433\u043e\u0434\u0438\u043d\u0430" : e + " " + s);
		    }
		  },
		      W = (e.defineLocale("sr-cyrl", {
		    months: "\u0458\u0430\u043d\u0443\u0430\u0440_\u0444\u0435\u0431\u0440\u0443\u0430\u0440_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0431\u0430\u0440_\u043e\u043a\u0442\u043e\u0431\u0430\u0440_\u043d\u043e\u0432\u0435\u043c\u0431\u0430\u0440_\u0434\u0435\u0446\u0435\u043c\u0431\u0430\u0440".split("_"),
		    monthsShort: "\u0458\u0430\u043d._\u0444\u0435\u0431._\u043c\u0430\u0440._\u0430\u043f\u0440._\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433._\u0441\u0435\u043f._\u043e\u043a\u0442._\u043d\u043e\u0432._\u0434\u0435\u0446.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u043d\u0435\u0434\u0435\u0459\u0430_\u043f\u043e\u043d\u0435\u0434\u0435\u0459\u0430\u043a_\u0443\u0442\u043e\u0440\u0430\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043a_\u043f\u0435\u0442\u0430\u043a_\u0441\u0443\u0431\u043e\u0442\u0430".split("_"),
		    weekdaysShort: "\u043d\u0435\u0434._\u043f\u043e\u043d._\u0443\u0442\u043e._\u0441\u0440\u0435._\u0447\u0435\u0442._\u043f\u0435\u0442._\u0441\u0443\u0431.".split("_"),
		    weekdaysMin: "\u043d\u0435_\u043f\u043e_\u0443\u0442_\u0441\u0440_\u0447\u0435_\u043f\u0435_\u0441\u0443".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "D. M. YYYY.",
		      LL: "D. MMMM YYYY.",
		      LLL: "D. MMMM YYYY. H:mm",
		      LLLL: "dddd, D. MMMM YYYY. H:mm"
		    },
		    calendar: {
		      sameDay: "[\u0434\u0430\u043d\u0430\u0441 \u0443] LT",
		      nextDay: "[\u0441\u0443\u0442\u0440\u0430 \u0443] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[\u0443] [\u043d\u0435\u0434\u0435\u0459\u0443] [\u0443] LT";

		          case 3:
		            return "[\u0443] [\u0441\u0440\u0435\u0434\u0443] [\u0443] LT";

		          case 6:
		            return "[\u0443] [\u0441\u0443\u0431\u043e\u0442\u0443] [\u0443] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[\u0443] dddd [\u0443] LT";
		        }
		      },
		      lastDay: "[\u0458\u0443\u0447\u0435 \u0443] LT",
		      lastWeek: function () {
		        return ["[\u043f\u0440\u043e\u0448\u043b\u0435] [\u043d\u0435\u0434\u0435\u0459\u0435] [\u0443] LT", "[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u043f\u043e\u043d\u0435\u0434\u0435\u0459\u043a\u0430] [\u0443] LT", "[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u0443\u0442\u043e\u0440\u043a\u0430] [\u0443] LT", "[\u043f\u0440\u043e\u0448\u043b\u0435] [\u0441\u0440\u0435\u0434\u0435] [\u0443] LT", "[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u0447\u0435\u0442\u0432\u0440\u0442\u043a\u0430] [\u0443] LT", "[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u043f\u0435\u0442\u043a\u0430] [\u0443] LT", "[\u043f\u0440\u043e\u0448\u043b\u0435] [\u0441\u0443\u0431\u043e\u0442\u0435] [\u0443] LT"][this.day()];
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0437\u0430 %s",
		      past: "\u043f\u0440\u0435 %s",
		      s: "\u043d\u0435\u043a\u043e\u043b\u0438\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\u0438",
		      ss: P.translate,
		      m: P.translate,
		      mm: P.translate,
		      h: P.translate,
		      hh: P.translate,
		      d: P.translate,
		      dd: P.translate,
		      M: P.translate,
		      MM: P.translate,
		      y: P.translate,
		      yy: P.translate
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), {
		    words: {
		      ss: ["sekunda", "sekunde", "sekundi"],
		      m: ["jedan minut", "jednog minuta"],
		      mm: ["minut", "minuta", "minuta"],
		      h: ["jedan sat", "jednog sata"],
		      hh: ["sat", "sata", "sati"],
		      d: ["jedan dan", "jednog dana"],
		      dd: ["dan", "dana", "dana"],
		      M: ["jedan mesec", "jednog meseca"],
		      MM: ["mesec", "meseca", "meseci"],
		      y: ["jednu godinu", "jedne godine"],
		      yy: ["godinu", "godine", "godina"]
		    },
		    correctGrammaticalCase: function (e, a) {
		      return 1 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? e % 10 == 1 ? a[0] : a[1] : a[2];
		    },
		    translate: function (e, a, _, s) {
		      var d = W.words[_];
		      return 1 === _.length ? "y" === _ && a ? "jedna godina" : s || a ? d[0] : d[1] : (s = W.correctGrammaticalCase(e, d), "yy" === _ && a && "godinu" === s ? e + " godina" : e + " " + s);
		    }
		  }),
		      aa = (e.defineLocale("sr", {
		    months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
		    monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "nedelja_ponedeljak_utorak_sreda_\u010detvrtak_petak_subota".split("_"),
		    weekdaysShort: "ned._pon._uto._sre._\u010det._pet._sub.".split("_"),
		    weekdaysMin: "ne_po_ut_sr_\u010de_pe_su".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "D. M. YYYY.",
		      LL: "D. MMMM YYYY.",
		      LLL: "D. MMMM YYYY. H:mm",
		      LLLL: "dddd, D. MMMM YYYY. H:mm"
		    },
		    calendar: {
		      sameDay: "[danas u] LT",
		      nextDay: "[sutra u] LT",
		      nextWeek: function () {
		        switch (this.day()) {
		          case 0:
		            return "[u] [nedelju] [u] LT";

		          case 3:
		            return "[u] [sredu] [u] LT";

		          case 6:
		            return "[u] [subotu] [u] LT";

		          case 1:
		          case 2:
		          case 4:
		          case 5:
		            return "[u] dddd [u] LT";
		        }
		      },
		      lastDay: "[ju\u010de u] LT",
		      lastWeek: function () {
		        return ["[pro\u0161le] [nedelje] [u] LT", "[pro\u0161log] [ponedeljka] [u] LT", "[pro\u0161log] [utorka] [u] LT", "[pro\u0161le] [srede] [u] LT", "[pro\u0161log] [\u010detvrtka] [u] LT", "[pro\u0161log] [petka] [u] LT", "[pro\u0161le] [subote] [u] LT"][this.day()];
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "za %s",
		      past: "pre %s",
		      s: "nekoliko sekundi",
		      ss: W.translate,
		      m: W.translate,
		      mm: W.translate,
		      h: W.translate,
		      hh: W.translate,
		      d: W.translate,
		      dd: W.translate,
		      M: W.translate,
		      MM: W.translate,
		      y: W.translate,
		      yy: W.translate
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("ss", {
		    months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),
		    monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),
		    weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),
		    weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
		    weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY h:mm A",
		      LLLL: "dddd, D MMMM YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: "[Namuhla nga] LT",
		      nextDay: "[Kusasa nga] LT",
		      nextWeek: "dddd [nga] LT",
		      lastDay: "[Itolo nga] LT",
		      lastWeek: "dddd [leliphelile] [nga] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "nga %s",
		      past: "wenteka nga %s",
		      s: "emizuzwana lomcane",
		      ss: "%d mzuzwana",
		      m: "umzuzu",
		      mm: "%d emizuzu",
		      h: "lihora",
		      hh: "%d emahora",
		      d: "lilanga",
		      dd: "%d emalanga",
		      M: "inyanga",
		      MM: "%d tinyanga",
		      y: "umnyaka",
		      yy: "%d iminyaka"
		    },
		    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
		    meridiem: function (e, a, _) {
		      return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku";
		    },
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "ekuseni" === a ? e : "emini" === a ? 11 <= e ? e : e + 12 : "entsambama" === a || "ebusuku" === a ? 0 === e ? 0 : e + 12 : void 0;
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}/,
		    ordinal: "%d",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("sv", {
		    months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
		    monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
		    weekdays: "s\xf6ndag_m\xe5ndag_tisdag_onsdag_torsdag_fredag_l\xf6rdag".split("_"),
		    weekdaysShort: "s\xf6n_m\xe5n_tis_ons_tor_fre_l\xf6r".split("_"),
		    weekdaysMin: "s\xf6_m\xe5_ti_on_to_fr_l\xf6".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY [kl.] HH:mm",
		      LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
		      lll: "D MMM YYYY HH:mm",
		      llll: "ddd D MMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Idag] LT",
		      nextDay: "[Imorgon] LT",
		      lastDay: "[Ig\xe5r] LT",
		      nextWeek: "[P\xe5] dddd LT",
		      lastWeek: "[I] dddd[s] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "om %s",
		      past: "f\xf6r %s sedan",
		      s: "n\xe5gra sekunder",
		      ss: "%d sekunder",
		      m: "en minut",
		      mm: "%d minuter",
		      h: "en timme",
		      hh: "%d timmar",
		      d: "en dag",
		      dd: "%d dagar",
		      M: "en m\xe5nad",
		      MM: "%d m\xe5nader",
		      y: "ett \xe5r",
		      yy: "%d \xe5r"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 != ~~(e % 100 / 10) && (1 == a || 2 == a) ? ":a" : ":e");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("sw", {
		    months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),
		    monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),
		    weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),
		    weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
		    weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "hh:mm A",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[leo saa] LT",
		      nextDay: "[kesho saa] LT",
		      nextWeek: "[wiki ijayo] dddd [saat] LT",
		      lastDay: "[jana] LT",
		      lastWeek: "[wiki iliyopita] dddd [saat] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s baadaye",
		      past: "tokea %s",
		      s: "hivi punde",
		      ss: "sekunde %d",
		      m: "dakika moja",
		      mm: "dakika %d",
		      h: "saa limoja",
		      hh: "masaa %d",
		      d: "siku moja",
		      dd: "siku %d",
		      M: "mwezi mmoja",
		      MM: "miezi %d",
		      y: "mwaka mmoja",
		      yy: "miaka %d"
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), {
		    1: "\u0be7",
		    2: "\u0be8",
		    3: "\u0be9",
		    4: "\u0bea",
		    5: "\u0beb",
		    6: "\u0bec",
		    7: "\u0bed",
		    8: "\u0bee",
		    9: "\u0bef",
		    0: "\u0be6"
		  }),
		      _a = {
		    "\u0be7": "1",
		    "\u0be8": "2",
		    "\u0be9": "3",
		    "\u0bea": "4",
		    "\u0beb": "5",
		    "\u0bec": "6",
		    "\u0bed": "7",
		    "\u0bee": "8",
		    "\u0bef": "9",
		    "\u0be6": "0"
		  },
		      sa = (e.defineLocale("ta", {
		    months: "\u0b9c\u0ba9\u0bb5\u0bb0\u0bbf_\u0baa\u0bbf\u0baa\u0bcd\u0bb0\u0bb5\u0bb0\u0bbf_\u0bae\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd_\u0b8f\u0baa\u0bcd\u0bb0\u0bb2\u0bcd_\u0bae\u0bc7_\u0b9c\u0bc2\u0ba9\u0bcd_\u0b9c\u0bc2\u0bb2\u0bc8_\u0b86\u0b95\u0bb8\u0bcd\u0b9f\u0bcd_\u0b9a\u0bc6\u0baa\u0bcd\u0b9f\u0bc6\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b85\u0b95\u0bcd\u0b9f\u0bc7\u0bbe\u0baa\u0bb0\u0bcd_\u0ba8\u0bb5\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd".split("_"),
		    monthsShort: "\u0b9c\u0ba9\u0bb5\u0bb0\u0bbf_\u0baa\u0bbf\u0baa\u0bcd\u0bb0\u0bb5\u0bb0\u0bbf_\u0bae\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd_\u0b8f\u0baa\u0bcd\u0bb0\u0bb2\u0bcd_\u0bae\u0bc7_\u0b9c\u0bc2\u0ba9\u0bcd_\u0b9c\u0bc2\u0bb2\u0bc8_\u0b86\u0b95\u0bb8\u0bcd\u0b9f\u0bcd_\u0b9a\u0bc6\u0baa\u0bcd\u0b9f\u0bc6\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b85\u0b95\u0bcd\u0b9f\u0bc7\u0bbe\u0baa\u0bb0\u0bcd_\u0ba8\u0bb5\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd".split("_"),
		    weekdays: "\u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bcd\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0ba4\u0bbf\u0b99\u0bcd\u0b95\u0b9f\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0b9a\u0bc6\u0bb5\u0bcd\u0bb5\u0bbe\u0baf\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0baa\u0bc1\u0ba4\u0ba9\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0bb5\u0bbf\u0baf\u0bbe\u0bb4\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0bb5\u0bc6\u0bb3\u0bcd\u0bb3\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0b9a\u0ba9\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8".split("_"),
		    weekdaysShort: "\u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bc1_\u0ba4\u0bbf\u0b99\u0bcd\u0b95\u0bb3\u0bcd_\u0b9a\u0bc6\u0bb5\u0bcd\u0bb5\u0bbe\u0baf\u0bcd_\u0baa\u0bc1\u0ba4\u0ba9\u0bcd_\u0bb5\u0bbf\u0baf\u0bbe\u0bb4\u0ba9\u0bcd_\u0bb5\u0bc6\u0bb3\u0bcd\u0bb3\u0bbf_\u0b9a\u0ba9\u0bbf".split("_"),
		    weekdaysMin: "\u0b9e\u0bbe_\u0ba4\u0bbf_\u0b9a\u0bc6_\u0baa\u0bc1_\u0bb5\u0bbf_\u0bb5\u0bc6_\u0b9a".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, HH:mm",
		      LLLL: "dddd, D MMMM YYYY, HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0b87\u0ba9\u0bcd\u0bb1\u0bc1] LT",
		      nextDay: "[\u0ba8\u0bbe\u0bb3\u0bc8] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0ba8\u0bc7\u0bb1\u0bcd\u0bb1\u0bc1] LT",
		      lastWeek: "[\u0b95\u0b9f\u0ba8\u0bcd\u0ba4 \u0bb5\u0bbe\u0bb0\u0bae\u0bcd] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0b87\u0bb2\u0bcd",
		      past: "%s \u0bae\u0bc1\u0ba9\u0bcd",
		      s: "\u0b92\u0bb0\u0bc1 \u0b9a\u0bbf\u0bb2 \u0bb5\u0bbf\u0ba8\u0bbe\u0b9f\u0bbf\u0b95\u0bb3\u0bcd",
		      ss: "%d \u0bb5\u0bbf\u0ba8\u0bbe\u0b9f\u0bbf\u0b95\u0bb3\u0bcd",
		      m: "\u0b92\u0bb0\u0bc1 \u0ba8\u0bbf\u0bae\u0bbf\u0b9f\u0bae\u0bcd",
		      mm: "%d \u0ba8\u0bbf\u0bae\u0bbf\u0b9f\u0b99\u0bcd\u0b95\u0bb3\u0bcd",
		      h: "\u0b92\u0bb0\u0bc1 \u0bae\u0ba3\u0bbf \u0ba8\u0bc7\u0bb0\u0bae\u0bcd",
		      hh: "%d \u0bae\u0ba3\u0bbf \u0ba8\u0bc7\u0bb0\u0bae\u0bcd",
		      d: "\u0b92\u0bb0\u0bc1 \u0ba8\u0bbe\u0bb3\u0bcd",
		      dd: "%d \u0ba8\u0bbe\u0b9f\u0bcd\u0b95\u0bb3\u0bcd",
		      M: "\u0b92\u0bb0\u0bc1 \u0bae\u0bbe\u0ba4\u0bae\u0bcd",
		      MM: "%d \u0bae\u0bbe\u0ba4\u0b99\u0bcd\u0b95\u0bb3\u0bcd",
		      y: "\u0b92\u0bb0\u0bc1 \u0bb5\u0bb0\u0bc1\u0b9f\u0bae\u0bcd",
		      yy: "%d \u0b86\u0ba3\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\u0bb5\u0ba4\u0bc1/,
		    ordinal: function (e) {
		      return e + "\u0bb5\u0ba4\u0bc1";
		    },
		    preparse: function (e) {
		      return e.replace(/[\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0be6]/g, function (e) {
		        return _a[e];
		      });
		    },
		    postformat: function (e) {
		      return e.replace(/\d/g, function (e) {
		        return aa[e];
		      });
		    },
		    meridiemParse: /\u0baf\u0bbe\u0bae\u0bae\u0bcd|\u0bb5\u0bc8\u0b95\u0bb1\u0bc8|\u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd|\u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1|\u0bae\u0bbe\u0bb2\u0bc8/,
		    meridiem: function (e, a, _) {
		      return e < 2 ? " \u0baf\u0bbe\u0bae\u0bae\u0bcd" : e < 6 ? " \u0bb5\u0bc8\u0b95\u0bb1\u0bc8" : e < 10 ? " \u0b95\u0bbe\u0bb2\u0bc8" : e < 14 ? " \u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd" : e < 18 ? " \u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1" : e < 22 ? " \u0bae\u0bbe\u0bb2\u0bc8" : " \u0baf\u0bbe\u0bae\u0bae\u0bcd";
		    },
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0baf\u0bbe\u0bae\u0bae\u0bcd" === a ? e < 2 ? e : e + 12 : "\u0bb5\u0bc8\u0b95\u0bb1\u0bc8" === a || "\u0b95\u0bbe\u0bb2\u0bc8" === a || "\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd" === a && 10 <= e ? e : e + 12;
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("te", {
		    months: "\u0c1c\u0c28\u0c35\u0c30\u0c3f_\u0c2b\u0c3f\u0c2c\u0c4d\u0c30\u0c35\u0c30\u0c3f_\u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c3f_\u0c0f\u0c2a\u0c4d\u0c30\u0c3f\u0c32\u0c4d_\u0c2e\u0c47_\u0c1c\u0c42\u0c28\u0c4d_\u0c1c\u0c41\u0c32\u0c48_\u0c06\u0c17\u0c38\u0c4d\u0c1f\u0c41_\u0c38\u0c46\u0c2a\u0c4d\u0c1f\u0c46\u0c02\u0c2c\u0c30\u0c4d_\u0c05\u0c15\u0c4d\u0c1f\u0c4b\u0c2c\u0c30\u0c4d_\u0c28\u0c35\u0c02\u0c2c\u0c30\u0c4d_\u0c21\u0c3f\u0c38\u0c46\u0c02\u0c2c\u0c30\u0c4d".split("_"),
		    monthsShort: "\u0c1c\u0c28._\u0c2b\u0c3f\u0c2c\u0c4d\u0c30._\u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c3f_\u0c0f\u0c2a\u0c4d\u0c30\u0c3f._\u0c2e\u0c47_\u0c1c\u0c42\u0c28\u0c4d_\u0c1c\u0c41\u0c32\u0c48_\u0c06\u0c17._\u0c38\u0c46\u0c2a\u0c4d._\u0c05\u0c15\u0c4d\u0c1f\u0c4b._\u0c28\u0c35._\u0c21\u0c3f\u0c38\u0c46.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0c06\u0c26\u0c3f\u0c35\u0c3e\u0c30\u0c02_\u0c38\u0c4b\u0c2e\u0c35\u0c3e\u0c30\u0c02_\u0c2e\u0c02\u0c17\u0c33\u0c35\u0c3e\u0c30\u0c02_\u0c2c\u0c41\u0c27\u0c35\u0c3e\u0c30\u0c02_\u0c17\u0c41\u0c30\u0c41\u0c35\u0c3e\u0c30\u0c02_\u0c36\u0c41\u0c15\u0c4d\u0c30\u0c35\u0c3e\u0c30\u0c02_\u0c36\u0c28\u0c3f\u0c35\u0c3e\u0c30\u0c02".split("_"),
		    weekdaysShort: "\u0c06\u0c26\u0c3f_\u0c38\u0c4b\u0c2e_\u0c2e\u0c02\u0c17\u0c33_\u0c2c\u0c41\u0c27_\u0c17\u0c41\u0c30\u0c41_\u0c36\u0c41\u0c15\u0c4d\u0c30_\u0c36\u0c28\u0c3f".split("_"),
		    weekdaysMin: "\u0c06_\u0c38\u0c4b_\u0c2e\u0c02_\u0c2c\u0c41_\u0c17\u0c41_\u0c36\u0c41_\u0c36".split("_"),
		    longDateFormat: {
		      LT: "A h:mm",
		      LTS: "A h:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY, A h:mm",
		      LLLL: "dddd, D MMMM YYYY, A h:mm"
		    },
		    calendar: {
		      sameDay: "[\u0c28\u0c47\u0c21\u0c41] LT",
		      nextDay: "[\u0c30\u0c47\u0c2a\u0c41] LT",
		      nextWeek: "dddd, LT",
		      lastDay: "[\u0c28\u0c3f\u0c28\u0c4d\u0c28] LT",
		      lastWeek: "[\u0c17\u0c24] dddd, LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0c32\u0c4b",
		      past: "%s \u0c15\u0c4d\u0c30\u0c3f\u0c24\u0c02",
		      s: "\u0c15\u0c4a\u0c28\u0c4d\u0c28\u0c3f \u0c15\u0c4d\u0c37\u0c23\u0c3e\u0c32\u0c41",
		      ss: "%d \u0c38\u0c46\u0c15\u0c28\u0c4d\u0c32\u0c41",
		      m: "\u0c12\u0c15 \u0c28\u0c3f\u0c2e\u0c3f\u0c37\u0c02",
		      mm: "%d \u0c28\u0c3f\u0c2e\u0c3f\u0c37\u0c3e\u0c32\u0c41",
		      h: "\u0c12\u0c15 \u0c17\u0c02\u0c1f",
		      hh: "%d \u0c17\u0c02\u0c1f\u0c32\u0c41",
		      d: "\u0c12\u0c15 \u0c30\u0c4b\u0c1c\u0c41",
		      dd: "%d \u0c30\u0c4b\u0c1c\u0c41\u0c32\u0c41",
		      M: "\u0c12\u0c15 \u0c28\u0c46\u0c32",
		      MM: "%d \u0c28\u0c46\u0c32\u0c32\u0c41",
		      y: "\u0c12\u0c15 \u0c38\u0c02\u0c35\u0c24\u0c4d\u0c38\u0c30\u0c02",
		      yy: "%d \u0c38\u0c02\u0c35\u0c24\u0c4d\u0c38\u0c30\u0c3e\u0c32\u0c41"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\u0c35/,
		    ordinal: "%d\u0c35",
		    meridiemParse: /\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f|\u0c09\u0c26\u0c2f\u0c02|\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02|\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f" === a ? e < 4 ? e : e + 12 : "\u0c09\u0c26\u0c2f\u0c02" === a ? e : "\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02" === a ? 10 <= e ? e : e + 12 : "\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f" : e < 10 ? "\u0c09\u0c26\u0c2f\u0c02" : e < 17 ? "\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02" : e < 20 ? "\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02" : "\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f";
		    },
		    week: {
		      dow: 0,
		      doy: 6
		    }
		  }), e.defineLocale("tet", {
		    months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Ju\xf1u_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),
		    monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
		    weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),
		    weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),
		    weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[Ohin iha] LT",
		      nextDay: "[Aban iha] LT",
		      nextWeek: "dddd [iha] LT",
		      lastDay: "[Horiseik iha] LT",
		      lastWeek: "dddd [semana kotuk] [iha] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "iha %s",
		      past: "%s liuba",
		      s: "segundu balun",
		      ss: "segundu %d",
		      m: "minutu ida",
		      mm: "minutu %d",
		      h: "oras ida",
		      hh: "oras %d",
		      d: "loron ida",
		      dd: "loron %d",
		      M: "fulan ida",
		      MM: "fulan %d",
		      y: "tinan ida",
		      yy: "tinan %d"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), {
		    0: "-\u0443\u043c",
		    1: "-\u0443\u043c",
		    2: "-\u044e\u043c",
		    3: "-\u044e\u043c",
		    4: "-\u0443\u043c",
		    5: "-\u0443\u043c",
		    6: "-\u0443\u043c",
		    7: "-\u0443\u043c",
		    8: "-\u0443\u043c",
		    9: "-\u0443\u043c",
		    10: "-\u0443\u043c",
		    12: "-\u0443\u043c",
		    13: "-\u0443\u043c",
		    20: "-\u0443\u043c",
		    30: "-\u044e\u043c",
		    40: "-\u0443\u043c",
		    50: "-\u0443\u043c",
		    60: "-\u0443\u043c",
		    70: "-\u0443\u043c",
		    80: "-\u0443\u043c",
		    90: "-\u0443\u043c",
		    100: "-\u0443\u043c"
		  }),
		      da = (e.defineLocale("tg", {
		    months: {
		      format: "\u044f\u043d\u0432\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0430\u043b\u0438_\u043c\u0430\u0440\u0442\u0438_\u0430\u043f\u0440\u0435\u043b\u0438_\u043c\u0430\u0439\u0438_\u0438\u044e\u043d\u0438_\u0438\u044e\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442\u0438_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u0438_\u043e\u043a\u0442\u044f\u0431\u0440\u0438_\u043d\u043e\u044f\u0431\u0440\u0438_\u0434\u0435\u043a\u0430\u0431\u0440\u0438".split("_"),
		      standalone: "\u044f\u043d\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043b_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440_\u043e\u043a\u0442\u044f\u0431\u0440_\u043d\u043e\u044f\u0431\u0440_\u0434\u0435\u043a\u0430\u0431\u0440".split("_")
		    },
		    monthsShort: "\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a".split("_"),
		    weekdays: "\u044f\u043a\u0448\u0430\u043d\u0431\u0435_\u0434\u0443\u0448\u0430\u043d\u0431\u0435_\u0441\u0435\u0448\u0430\u043d\u0431\u0435_\u0447\u043e\u0440\u0448\u0430\u043d\u0431\u0435_\u043f\u0430\u043d\u04b7\u0448\u0430\u043d\u0431\u0435_\u04b7\u0443\u043c\u044a\u0430_\u0448\u0430\u043d\u0431\u0435".split("_"),
		    weekdaysShort: "\u044f\u0448\u0431_\u0434\u0448\u0431_\u0441\u0448\u0431_\u0447\u0448\u0431_\u043f\u0448\u0431_\u04b7\u0443\u043c_\u0448\u043d\u0431".split("_"),
		    weekdaysMin: "\u044f\u0448_\u0434\u0448_\u0441\u0448_\u0447\u0448_\u043f\u0448_\u04b7\u043c_\u0448\u0431".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0418\u043c\u0440\u04ef\u0437 \u0441\u043e\u0430\u0442\u0438] LT",
		      nextDay: "[\u0424\u0430\u0440\u0434\u043e \u0441\u043e\u0430\u0442\u0438] LT",
		      lastDay: "[\u0414\u0438\u0440\u04ef\u0437 \u0441\u043e\u0430\u0442\u0438] LT",
		      nextWeek: "dddd[\u0438] [\u04b3\u0430\u0444\u0442\u0430\u0438 \u043e\u044f\u043d\u0434\u0430 \u0441\u043e\u0430\u0442\u0438] LT",
		      lastWeek: "dddd[\u0438] [\u04b3\u0430\u0444\u0442\u0430\u0438 \u0433\u0443\u0437\u0430\u0448\u0442\u0430 \u0441\u043e\u0430\u0442\u0438] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0431\u0430\u044a\u0434\u0438 %s",
		      past: "%s \u043f\u0435\u0448",
		      s: "\u044f\u043a\u0447\u0430\u043d\u0434 \u0441\u043e\u043d\u0438\u044f",
		      m: "\u044f\u043a \u0434\u0430\u049b\u0438\u049b\u0430",
		      mm: "%d \u0434\u0430\u049b\u0438\u049b\u0430",
		      h: "\u044f\u043a \u0441\u043e\u0430\u0442",
		      hh: "%d \u0441\u043e\u0430\u0442",
		      d: "\u044f\u043a \u0440\u04ef\u0437",
		      dd: "%d \u0440\u04ef\u0437",
		      M: "\u044f\u043a \u043c\u043e\u04b3",
		      MM: "%d \u043c\u043e\u04b3",
		      y: "\u044f\u043a \u0441\u043e\u043b",
		      yy: "%d \u0441\u043e\u043b"
		    },
		    meridiemParse: /\u0448\u0430\u0431|\u0441\u0443\u0431\u04b3|\u0440\u04ef\u0437|\u0431\u0435\u0433\u043e\u04b3/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u0448\u0430\u0431" === a ? e < 4 ? e : e + 12 : "\u0441\u0443\u0431\u04b3" === a ? e : "\u0440\u04ef\u0437" === a ? 11 <= e ? e : e + 12 : "\u0431\u0435\u0433\u043e\u04b3" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u0448\u0430\u0431" : e < 11 ? "\u0441\u0443\u0431\u04b3" : e < 16 ? "\u0440\u04ef\u0437" : e < 19 ? "\u0431\u0435\u0433\u043e\u04b3" : "\u0448\u0430\u0431";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0443\u043c|\u044e\u043c)/,
		    ordinal: function (e) {
		      return e + (sa[e] || sa[e % 10] || sa[100 <= e ? 100 : null]);
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("th", {
		    months: "\u0e21\u0e01\u0e23\u0e32\u0e04\u0e21_\u0e01\u0e38\u0e21\u0e20\u0e32\u0e1e\u0e31\u0e19\u0e18\u0e4c_\u0e21\u0e35\u0e19\u0e32\u0e04\u0e21_\u0e40\u0e21\u0e29\u0e32\u0e22\u0e19_\u0e1e\u0e24\u0e29\u0e20\u0e32\u0e04\u0e21_\u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19_\u0e01\u0e23\u0e01\u0e0e\u0e32\u0e04\u0e21_\u0e2a\u0e34\u0e07\u0e2b\u0e32\u0e04\u0e21_\u0e01\u0e31\u0e19\u0e22\u0e32\u0e22\u0e19_\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21_\u0e1e\u0e24\u0e28\u0e08\u0e34\u0e01\u0e32\u0e22\u0e19_\u0e18\u0e31\u0e19\u0e27\u0e32\u0e04\u0e21".split("_"),
		    monthsShort: "\u0e21.\u0e04._\u0e01.\u0e1e._\u0e21\u0e35.\u0e04._\u0e40\u0e21.\u0e22._\u0e1e.\u0e04._\u0e21\u0e34.\u0e22._\u0e01.\u0e04._\u0e2a.\u0e04._\u0e01.\u0e22._\u0e15.\u0e04._\u0e1e.\u0e22._\u0e18.\u0e04.".split("_"),
		    monthsParseExact: !0,
		    weekdays: "\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c_\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c_\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23_\u0e1e\u0e38\u0e18_\u0e1e\u0e24\u0e2b\u0e31\u0e2a\u0e1a\u0e14\u0e35_\u0e28\u0e38\u0e01\u0e23\u0e4c_\u0e40\u0e2a\u0e32\u0e23\u0e4c".split("_"),
		    weekdaysShort: "\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c_\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c_\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23_\u0e1e\u0e38\u0e18_\u0e1e\u0e24\u0e2b\u0e31\u0e2a_\u0e28\u0e38\u0e01\u0e23\u0e4c_\u0e40\u0e2a\u0e32\u0e23\u0e4c".split("_"),
		    weekdaysMin: "\u0e2d\u0e32._\u0e08._\u0e2d._\u0e1e._\u0e1e\u0e24._\u0e28._\u0e2a.".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "H:mm",
		      LTS: "H:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY \u0e40\u0e27\u0e25\u0e32 H:mm",
		      LLLL: "\u0e27\u0e31\u0e19dddd\u0e17\u0e35\u0e48 D MMMM YYYY \u0e40\u0e27\u0e25\u0e32 H:mm"
		    },
		    meridiemParse: /\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07|\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07/,
		    isPM: function (e) {
		      return "\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07" : "\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07";
		    },
		    calendar: {
		      sameDay: "[\u0e27\u0e31\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT",
		      nextDay: "[\u0e1e\u0e23\u0e38\u0e48\u0e07\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT",
		      nextWeek: "dddd[\u0e2b\u0e19\u0e49\u0e32 \u0e40\u0e27\u0e25\u0e32] LT",
		      lastDay: "[\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e27\u0e32\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT",
		      lastWeek: "[\u0e27\u0e31\u0e19]dddd[\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e27\u0e25\u0e32] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0e2d\u0e35\u0e01 %s",
		      past: "%s\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27",
		      s: "\u0e44\u0e21\u0e48\u0e01\u0e35\u0e48\u0e27\u0e34\u0e19\u0e32\u0e17\u0e35",
		      ss: "%d \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35",
		      m: "1 \u0e19\u0e32\u0e17\u0e35",
		      mm: "%d \u0e19\u0e32\u0e17\u0e35",
		      h: "1 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07",
		      hh: "%d \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07",
		      d: "1 \u0e27\u0e31\u0e19",
		      dd: "%d \u0e27\u0e31\u0e19",
		      w: "1 \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c",
		      ww: "%d \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c",
		      M: "1 \u0e40\u0e14\u0e37\u0e2d\u0e19",
		      MM: "%d \u0e40\u0e14\u0e37\u0e2d\u0e19",
		      y: "1 \u0e1b\u0e35",
		      yy: "%d \u0e1b\u0e35"
		    }
		  }), {
		    1: "'inji",
		    5: "'inji",
		    8: "'inji",
		    70: "'inji",
		    80: "'inji",
		    2: "'nji",
		    7: "'nji",
		    20: "'nji",
		    50: "'nji",
		    3: "'\xfcnji",
		    4: "'\xfcnji",
		    100: "'\xfcnji",
		    6: "'njy",
		    9: "'unjy",
		    10: "'unjy",
		    30: "'unjy",
		    60: "'ynjy",
		    90: "'ynjy"
		  }),
		      ta = (e.defineLocale("tk", {
		    months: "\xddanwar_Fewral_Mart_Aprel_Ma\xfd_I\xfdun_I\xfdul_Awgust_Sent\xfdabr_Okt\xfdabr_No\xfdabr_Dekabr".split("_"),
		    monthsShort: "\xddan_Few_Mar_Apr_Ma\xfd_I\xfdn_I\xfdl_Awg_Sen_Okt_No\xfd_Dek".split("_"),
		    weekdays: "\xddek\u015fenbe_Du\u015fenbe_Si\u015fenbe_\xc7ar\u015fenbe_Pen\u015fenbe_Anna_\u015eenbe".split("_"),
		    weekdaysShort: "\xddek_Du\u015f_Si\u015f_\xc7ar_Pen_Ann_\u015een".split("_"),
		    weekdaysMin: "\xddk_D\u015f_S\u015f_\xc7r_Pn_An_\u015en".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[bug\xfcn sagat] LT",
		      nextDay: "[ertir sagat] LT",
		      nextWeek: "[indiki] dddd [sagat] LT",
		      lastDay: "[d\xfc\xfdn] LT",
		      lastWeek: "[ge\xe7en] dddd [sagat] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s so\u0148",
		      past: "%s \xf6\u0148",
		      s: "birn\xe4\xe7e sekunt",
		      m: "bir minut",
		      mm: "%d minut",
		      h: "bir sagat",
		      hh: "%d sagat",
		      d: "bir g\xfcn",
		      dd: "%d g\xfcn",
		      M: "bir a\xfd",
		      MM: "%d a\xfd",
		      y: "bir \xfdyl",
		      yy: "%d \xfdyl"
		    },
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "Do":
		        case "DD":
		          return e;

		        default:
		          if (0 === e) return e + "'unjy";

		          var _ = e % 10;

		          return e + (da[_] || da[e % 100 - _] || da[100 <= e ? 100 : null]);
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("tl-ph", {
		    months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
		    monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
		    weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
		    weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
		    weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "MM/D/YYYY",
		      LL: "MMMM D, YYYY",
		      LLL: "MMMM D, YYYY HH:mm",
		      LLLL: "dddd, MMMM DD, YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "LT [ngayong araw]",
		      nextDay: "[Bukas ng] LT",
		      nextWeek: "LT [sa susunod na] dddd",
		      lastDay: "LT [kahapon]",
		      lastWeek: "LT [noong nakaraang] dddd",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "sa loob ng %s",
		      past: "%s ang nakalipas",
		      s: "ilang segundo",
		      ss: "%d segundo",
		      m: "isang minuto",
		      mm: "%d minuto",
		      h: "isang oras",
		      hh: "%d oras",
		      d: "isang araw",
		      dd: "%d araw",
		      M: "isang buwan",
		      MM: "%d buwan",
		      y: "isang taon",
		      yy: "%d taon"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}/,
		    ordinal: function (e) {
		      return e;
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), "pagh_wa\u2019_cha\u2019_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"));

		  function na(e, a, _, s) {
		    var d = function (e) {
		      var a = Math.floor(e % 1e3 / 100),
		          _ = Math.floor(e % 100 / 10),
		          e = e % 10,
		          s = "";

		      0 < a && (s += ta[a] + "vatlh");
		      0 < _ && (s += ("" !== s ? " " : "") + ta[_] + "maH");
		      0 < e && (s += ("" !== s ? " " : "") + ta[e]);
		      return "" === s ? "pagh" : s;
		    }(e);

		    switch (_) {
		      case "ss":
		        return d + " lup";

		      case "mm":
		        return d + " tup";

		      case "hh":
		        return d + " rep";

		      case "dd":
		        return d + " jaj";

		      case "MM":
		        return d + " jar";

		      case "yy":
		        return d + " DIS";
		    }
		  }

		  e.defineLocale("tlh", {
		    months: "tera\u2019 jar wa\u2019_tera\u2019 jar cha\u2019_tera\u2019 jar wej_tera\u2019 jar loS_tera\u2019 jar vagh_tera\u2019 jar jav_tera\u2019 jar Soch_tera\u2019 jar chorgh_tera\u2019 jar Hut_tera\u2019 jar wa\u2019maH_tera\u2019 jar wa\u2019maH wa\u2019_tera\u2019 jar wa\u2019maH cha\u2019".split("_"),
		    monthsShort: "jar wa\u2019_jar cha\u2019_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa\u2019maH_jar wa\u2019maH wa\u2019_jar wa\u2019maH cha\u2019".split("_"),
		    monthsParseExact: !0,
		    weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
		    weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
		    weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[DaHjaj] LT",
		      nextDay: "[wa\u2019leS] LT",
		      nextWeek: "LLL",
		      lastDay: "[wa\u2019Hu\u2019] LT",
		      lastWeek: "LLL",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: function (e) {
		        var a = e;
		        return a = -1 !== e.indexOf("jaj") ? a.slice(0, -3) + "leS" : -1 !== e.indexOf("jar") ? a.slice(0, -3) + "waQ" : -1 !== e.indexOf("DIS") ? a.slice(0, -3) + "nem" : a + " pIq";
		      },
		      past: function (e) {
		        var a = e;
		        return a = -1 !== e.indexOf("jaj") ? a.slice(0, -3) + "Hu\u2019" : -1 !== e.indexOf("jar") ? a.slice(0, -3) + "wen" : -1 !== e.indexOf("DIS") ? a.slice(0, -3) + "ben" : a + " ret";
		      },
		      s: "puS lup",
		      ss: na,
		      m: "wa\u2019 tup",
		      mm: na,
		      h: "wa\u2019 rep",
		      hh: na,
		      d: "wa\u2019 jaj",
		      dd: na,
		      M: "wa\u2019 jar",
		      MM: na,
		      y: "wa\u2019 DIS",
		      yy: na
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  });
		  var ra = {
		    1: "'inci",
		    5: "'inci",
		    8: "'inci",
		    70: "'inci",
		    80: "'inci",
		    2: "'nci",
		    7: "'nci",
		    20: "'nci",
		    50: "'nci",
		    3: "'\xfcnc\xfc",
		    4: "'\xfcnc\xfc",
		    100: "'\xfcnc\xfc",
		    6: "'nc\u0131",
		    9: "'uncu",
		    10: "'uncu",
		    30: "'uncu",
		    60: "'\u0131nc\u0131",
		    90: "'\u0131nc\u0131"
		  };

		  function A(e, a, _, s) {
		    e = {
		      s: ["viensas secunds", "'iensas secunds"],
		      ss: [e + " secunds", e + " secunds"],
		      m: ["'n m\xedut", "'iens m\xedut"],
		      mm: [e + " m\xeduts", e + " m\xeduts"],
		      h: ["'n \xfeora", "'iensa \xfeora"],
		      hh: [e + " \xfeoras", e + " \xfeoras"],
		      d: ["'n ziua", "'iensa ziua"],
		      dd: [e + " ziuas", e + " ziuas"],
		      M: ["'n mes", "'iens mes"],
		      MM: [e + " mesen", e + " mesen"],
		      y: ["'n ar", "'iens ar"],
		      yy: [e + " ars", e + " ars"]
		    };
		    return s || a ? e[_][0] : e[_][1];
		  }

		  function O(e, a, _) {
		    return "m" === _ ? a ? "\u0445\u0432\u0438\u043b\u0438\u043d\u0430" : "\u0445\u0432\u0438\u043b\u0438\u043d\u0443" : "h" === _ ? a ? "\u0433\u043e\u0434\u0438\u043d\u0430" : "\u0433\u043e\u0434\u0438\u043d\u0443" : e + " " + (e = +e, a = (a = {
		      ss: a ? "\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u0438_\u0441\u0435\u043a\u0443\u043d\u0434" : "\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u0438_\u0441\u0435\u043a\u0443\u043d\u0434",
		      mm: a ? "\u0445\u0432\u0438\u043b\u0438\u043d\u0430_\u0445\u0432\u0438\u043b\u0438\u043d\u0438_\u0445\u0432\u0438\u043b\u0438\u043d" : "\u0445\u0432\u0438\u043b\u0438\u043d\u0443_\u0445\u0432\u0438\u043b\u0438\u043d\u0438_\u0445\u0432\u0438\u043b\u0438\u043d",
		      hh: a ? "\u0433\u043e\u0434\u0438\u043d\u0430_\u0433\u043e\u0434\u0438\u043d\u0438_\u0433\u043e\u0434\u0438\u043d" : "\u0433\u043e\u0434\u0438\u043d\u0443_\u0433\u043e\u0434\u0438\u043d\u0438_\u0433\u043e\u0434\u0438\u043d",
		      dd: "\u0434\u0435\u043d\u044c_\u0434\u043d\u0456_\u0434\u043d\u0456\u0432",
		      MM: "\u043c\u0456\u0441\u044f\u0446\u044c_\u043c\u0456\u0441\u044f\u0446\u0456_\u043c\u0456\u0441\u044f\u0446\u0456\u0432",
		      yy: "\u0440\u0456\u043a_\u0440\u043e\u043a\u0438_\u0440\u043e\u043a\u0456\u0432"
		    }[_]).split("_"), e % 10 == 1 && e % 100 != 11 ? a[0] : 2 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? a[1] : a[2]);
		  }

		  function ia(e) {
		    return function () {
		      return e + "\u043e" + (11 === this.hours() ? "\u0431" : "") + "] LT";
		    };
		  }

		  e.defineLocale("tr", {
		    months: "Ocak_\u015eubat_Mart_Nisan_May\u0131s_Haziran_Temmuz_A\u011fustos_Eyl\xfcl_Ekim_Kas\u0131m_Aral\u0131k".split("_"),
		    monthsShort: "Oca_\u015eub_Mar_Nis_May_Haz_Tem_A\u011fu_Eyl_Eki_Kas_Ara".split("_"),
		    weekdays: "Pazar_Pazartesi_Sal\u0131_\xc7ar\u015famba_Per\u015fembe_Cuma_Cumartesi".split("_"),
		    weekdaysShort: "Paz_Pzt_Sal_\xc7ar_Per_Cum_Cmt".split("_"),
		    weekdaysMin: "Pz_Pt_Sa_\xc7a_Pe_Cu_Ct".split("_"),
		    meridiem: function (e, a, _) {
		      return e < 12 ? _ ? "\xf6\xf6" : "\xd6\xd6" : _ ? "\xf6s" : "\xd6S";
		    },
		    meridiemParse: /\xf6\xf6|\xd6\xd6|\xf6s|\xd6S/,
		    isPM: function (e) {
		      return "\xf6s" === e || "\xd6S" === e;
		    },
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[bug\xfcn saat] LT",
		      nextDay: "[yar\u0131n saat] LT",
		      nextWeek: "[gelecek] dddd [saat] LT",
		      lastDay: "[d\xfcn] LT",
		      lastWeek: "[ge\xe7en] dddd [saat] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s sonra",
		      past: "%s \xf6nce",
		      s: "birka\xe7 saniye",
		      ss: "%d saniye",
		      m: "bir dakika",
		      mm: "%d dakika",
		      h: "bir saat",
		      hh: "%d saat",
		      d: "bir g\xfcn",
		      dd: "%d g\xfcn",
		      w: "bir hafta",
		      ww: "%d hafta",
		      M: "bir ay",
		      MM: "%d ay",
		      y: "bir y\u0131l",
		      yy: "%d y\u0131l"
		    },
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "Do":
		        case "DD":
		          return e;

		        default:
		          if (0 === e) return e + "'\u0131nc\u0131";

		          var _ = e % 10;

		          return e + (ra[_] || ra[e % 100 - _] || ra[100 <= e ? 100 : null]);
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("tzl", {
		    months: "Januar_Fevraglh_Mar\xe7_Avr\xefu_Mai_G\xfcn_Julia_Guscht_Setemvar_Listop\xe4ts_Noemvar_Zecemvar".split("_"),
		    monthsShort: "Jan_Fev_Mar_Avr_Mai_G\xfcn_Jul_Gus_Set_Lis_Noe_Zec".split("_"),
		    weekdays: "S\xfaladi_L\xfane\xe7i_Maitzi_M\xe1rcuri_Xh\xfaadi_Vi\xe9ner\xe7i_S\xe1turi".split("_"),
		    weekdaysShort: "S\xfal_L\xfan_Mai_M\xe1r_Xh\xfa_Vi\xe9_S\xe1t".split("_"),
		    weekdaysMin: "S\xfa_L\xfa_Ma_M\xe1_Xh_Vi_S\xe1".split("_"),
		    longDateFormat: {
		      LT: "HH.mm",
		      LTS: "HH.mm.ss",
		      L: "DD.MM.YYYY",
		      LL: "D. MMMM [dallas] YYYY",
		      LLL: "D. MMMM [dallas] YYYY HH.mm",
		      LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm"
		    },
		    meridiemParse: /d\'o|d\'a/i,
		    isPM: function (e) {
		      return "d'o" === e.toLowerCase();
		    },
		    meridiem: function (e, a, _) {
		      return 11 < e ? _ ? "d'o" : "D'O" : _ ? "d'a" : "D'A";
		    },
		    calendar: {
		      sameDay: "[oxhi \xe0] LT",
		      nextDay: "[dem\xe0 \xe0] LT",
		      nextWeek: "dddd [\xe0] LT",
		      lastDay: "[ieiri \xe0] LT",
		      lastWeek: "[s\xfcr el] dddd [lasteu \xe0] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "osprei %s",
		      past: "ja%s",
		      s: A,
		      ss: A,
		      m: A,
		      mm: A,
		      h: A,
		      hh: A,
		      d: A,
		      dd: A,
		      M: A,
		      MM: A,
		      y: A,
		      yy: A
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}\./,
		    ordinal: "%d.",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("tzm-latn", {
		    months: "innayr_br\u02e4ayr\u02e4_mar\u02e4s\u02e4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02e4wbr\u02e4_nwwanbir_dwjnbir".split("_"),
		    monthsShort: "innayr_br\u02e4ayr\u02e4_mar\u02e4s\u02e4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02e4wbr\u02e4_nwwanbir_dwjnbir".split("_"),
		    weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas".split("_"),
		    weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas".split("_"),
		    weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[asdkh g] LT",
		      nextDay: "[aska g] LT",
		      nextWeek: "dddd [g] LT",
		      lastDay: "[assant g] LT",
		      lastWeek: "dddd [g] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "dadkh s yan %s",
		      past: "yan %s",
		      s: "imik",
		      ss: "%d imik",
		      m: "minu\u1e0d",
		      mm: "%d minu\u1e0d",
		      h: "sa\u025ba",
		      hh: "%d tassa\u025bin",
		      d: "ass",
		      dd: "%d ossan",
		      M: "ayowr",
		      MM: "%d iyyirn",
		      y: "asgas",
		      yy: "%d isgasn"
		    },
		    week: {
		      dow: 6,
		      doy: 12
		    }
		  }), e.defineLocale("tzm", {
		    months: "\u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d54_\u2d31\u2d55\u2d30\u2d62\u2d55_\u2d4e\u2d30\u2d55\u2d5a_\u2d49\u2d31\u2d54\u2d49\u2d54_\u2d4e\u2d30\u2d62\u2d62\u2d53_\u2d62\u2d53\u2d4f\u2d62\u2d53_\u2d62\u2d53\u2d4d\u2d62\u2d53\u2d63_\u2d56\u2d53\u2d5b\u2d5c_\u2d5b\u2d53\u2d5c\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d3d\u2d5f\u2d53\u2d31\u2d55_\u2d4f\u2d53\u2d61\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d37\u2d53\u2d4a\u2d4f\u2d31\u2d49\u2d54".split("_"),
		    monthsShort: "\u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d54_\u2d31\u2d55\u2d30\u2d62\u2d55_\u2d4e\u2d30\u2d55\u2d5a_\u2d49\u2d31\u2d54\u2d49\u2d54_\u2d4e\u2d30\u2d62\u2d62\u2d53_\u2d62\u2d53\u2d4f\u2d62\u2d53_\u2d62\u2d53\u2d4d\u2d62\u2d53\u2d63_\u2d56\u2d53\u2d5b\u2d5c_\u2d5b\u2d53\u2d5c\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d3d\u2d5f\u2d53\u2d31\u2d55_\u2d4f\u2d53\u2d61\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d37\u2d53\u2d4a\u2d4f\u2d31\u2d49\u2d54".split("_"),
		    weekdays: "\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59".split("_"),
		    weekdaysShort: "\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59".split("_"),
		    weekdaysMin: "\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u2d30\u2d59\u2d37\u2d45 \u2d34] LT",
		      nextDay: "[\u2d30\u2d59\u2d3d\u2d30 \u2d34] LT",
		      nextWeek: "dddd [\u2d34] LT",
		      lastDay: "[\u2d30\u2d5a\u2d30\u2d4f\u2d5c \u2d34] LT",
		      lastWeek: "dddd [\u2d34] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u2d37\u2d30\u2d37\u2d45 \u2d59 \u2d62\u2d30\u2d4f %s",
		      past: "\u2d62\u2d30\u2d4f %s",
		      s: "\u2d49\u2d4e\u2d49\u2d3d",
		      ss: "%d \u2d49\u2d4e\u2d49\u2d3d",
		      m: "\u2d4e\u2d49\u2d4f\u2d53\u2d3a",
		      mm: "%d \u2d4e\u2d49\u2d4f\u2d53\u2d3a",
		      h: "\u2d59\u2d30\u2d44\u2d30",
		      hh: "%d \u2d5c\u2d30\u2d59\u2d59\u2d30\u2d44\u2d49\u2d4f",
		      d: "\u2d30\u2d59\u2d59",
		      dd: "%d o\u2d59\u2d59\u2d30\u2d4f",
		      M: "\u2d30\u2d62o\u2d53\u2d54",
		      MM: "%d \u2d49\u2d62\u2d62\u2d49\u2d54\u2d4f",
		      y: "\u2d30\u2d59\u2d33\u2d30\u2d59",
		      yy: "%d \u2d49\u2d59\u2d33\u2d30\u2d59\u2d4f"
		    },
		    week: {
		      dow: 6,
		      doy: 12
		    }
		  }), e.defineLocale("ug-cn", {
		    months: "\u064a\u0627\u0646\u06cb\u0627\u0631_\u0641\u06d0\u06cb\u0631\u0627\u0644_\u0645\u0627\u0631\u062a_\u0626\u0627\u067e\u0631\u06d0\u0644_\u0645\u0627\u064a_\u0626\u0649\u064a\u06c7\u0646_\u0626\u0649\u064a\u06c7\u0644_\u0626\u0627\u06cb\u063a\u06c7\u0633\u062a_\u0633\u06d0\u0646\u062a\u06d5\u0628\u0649\u0631_\u0626\u06c6\u0643\u062a\u06d5\u0628\u0649\u0631_\u0646\u0648\u064a\u0627\u0628\u0649\u0631_\u062f\u06d0\u0643\u0627\u0628\u0649\u0631".split("_"),
		    monthsShort: "\u064a\u0627\u0646\u06cb\u0627\u0631_\u0641\u06d0\u06cb\u0631\u0627\u0644_\u0645\u0627\u0631\u062a_\u0626\u0627\u067e\u0631\u06d0\u0644_\u0645\u0627\u064a_\u0626\u0649\u064a\u06c7\u0646_\u0626\u0649\u064a\u06c7\u0644_\u0626\u0627\u06cb\u063a\u06c7\u0633\u062a_\u0633\u06d0\u0646\u062a\u06d5\u0628\u0649\u0631_\u0626\u06c6\u0643\u062a\u06d5\u0628\u0649\u0631_\u0646\u0648\u064a\u0627\u0628\u0649\u0631_\u062f\u06d0\u0643\u0627\u0628\u0649\u0631".split("_"),
		    weekdays: "\u064a\u06d5\u0643\u0634\u06d5\u0646\u0628\u06d5_\u062f\u06c8\u0634\u06d5\u0646\u0628\u06d5_\u0633\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5_\u0686\u0627\u0631\u0634\u06d5\u0646\u0628\u06d5_\u067e\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5_\u062c\u06c8\u0645\u06d5_\u0634\u06d5\u0646\u0628\u06d5".split("_"),
		    weekdaysShort: "\u064a\u06d5_\u062f\u06c8_\u0633\u06d5_\u0686\u0627_\u067e\u06d5_\u062c\u06c8_\u0634\u06d5".split("_"),
		    weekdaysMin: "\u064a\u06d5_\u062f\u06c8_\u0633\u06d5_\u0686\u0627_\u067e\u06d5_\u062c\u06c8_\u0634\u06d5".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY-MM-DD",
		      LL: "YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649",
		      LLL: "YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649\u060c HH:mm",
		      LLLL: "dddd\u060c YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649\u060c HH:mm"
		    },
		    meridiemParse: /\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5|\u0633\u06d5\u06be\u06d5\u0631|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646|\u0686\u06c8\u0634|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646|\u0643\u06d5\u0686/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5" === a || "\u0633\u06d5\u06be\u06d5\u0631" === a || "\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646" === a || "\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646" !== a && "\u0643\u06d5\u0686" !== a && 11 <= e ? e : e + 12;
		    },
		    meridiem: function (e, a, _) {
		      e = 100 * e + a;
		      return e < 600 ? "\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5" : e < 900 ? "\u0633\u06d5\u06be\u06d5\u0631" : e < 1130 ? "\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646" : e < 1230 ? "\u0686\u06c8\u0634" : e < 1800 ? "\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646" : "\u0643\u06d5\u0686";
		    },
		    calendar: {
		      sameDay: "[\u0628\u06c8\u06af\u06c8\u0646 \u0633\u0627\u0626\u06d5\u062a] LT",
		      nextDay: "[\u0626\u06d5\u062a\u06d5 \u0633\u0627\u0626\u06d5\u062a] LT",
		      nextWeek: "[\u0643\u06d0\u0644\u06d5\u0631\u0643\u0649] dddd [\u0633\u0627\u0626\u06d5\u062a] LT",
		      lastDay: "[\u062a\u06c6\u0646\u06c8\u06af\u06c8\u0646] LT",
		      lastWeek: "[\u0626\u0627\u0644\u062f\u0649\u0646\u0642\u0649] dddd [\u0633\u0627\u0626\u06d5\u062a] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0643\u06d0\u064a\u0649\u0646",
		      past: "%s \u0628\u06c7\u0631\u06c7\u0646",
		      s: "\u0646\u06d5\u0686\u0686\u06d5 \u0633\u06d0\u0643\u0648\u0646\u062a",
		      ss: "%d \u0633\u06d0\u0643\u0648\u0646\u062a",
		      m: "\u0628\u0649\u0631 \u0645\u0649\u0646\u06c7\u062a",
		      mm: "%d \u0645\u0649\u0646\u06c7\u062a",
		      h: "\u0628\u0649\u0631 \u0633\u0627\u0626\u06d5\u062a",
		      hh: "%d \u0633\u0627\u0626\u06d5\u062a",
		      d: "\u0628\u0649\u0631 \u0643\u06c8\u0646",
		      dd: "%d \u0643\u06c8\u0646",
		      M: "\u0628\u0649\u0631 \u0626\u0627\u064a",
		      MM: "%d \u0626\u0627\u064a",
		      y: "\u0628\u0649\u0631 \u064a\u0649\u0644",
		      yy: "%d \u064a\u0649\u0644"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(-\u0643\u06c8\u0646\u0649|-\u0626\u0627\u064a|-\u06be\u06d5\u067e\u062a\u06d5)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + "-\u0643\u06c8\u0646\u0649";

		        case "w":
		        case "W":
		          return e + "-\u06be\u06d5\u067e\u062a\u06d5";

		        default:
		          return e;
		      }
		    },
		    preparse: function (e) {
		      return e.replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("uk", {
		    months: {
		      format: "\u0441\u0456\u0447\u043d\u044f_\u043b\u044e\u0442\u043e\u0433\u043e_\u0431\u0435\u0440\u0435\u0437\u043d\u044f_\u043a\u0432\u0456\u0442\u043d\u044f_\u0442\u0440\u0430\u0432\u043d\u044f_\u0447\u0435\u0440\u0432\u043d\u044f_\u043b\u0438\u043f\u043d\u044f_\u0441\u0435\u0440\u043f\u043d\u044f_\u0432\u0435\u0440\u0435\u0441\u043d\u044f_\u0436\u043e\u0432\u0442\u043d\u044f_\u043b\u0438\u0441\u0442\u043e\u043f\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043d\u044f".split("_"),
		      standalone: "\u0441\u0456\u0447\u0435\u043d\u044c_\u043b\u044e\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043d\u044c_\u043a\u0432\u0456\u0442\u0435\u043d\u044c_\u0442\u0440\u0430\u0432\u0435\u043d\u044c_\u0447\u0435\u0440\u0432\u0435\u043d\u044c_\u043b\u0438\u043f\u0435\u043d\u044c_\u0441\u0435\u0440\u043f\u0435\u043d\u044c_\u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c_\u0436\u043e\u0432\u0442\u0435\u043d\u044c_\u043b\u0438\u0441\u0442\u043e\u043f\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043d\u044c".split("_")
		    },
		    monthsShort: "\u0441\u0456\u0447_\u043b\u044e\u0442_\u0431\u0435\u0440_\u043a\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043b\u0438\u043f_\u0441\u0435\u0440\u043f_\u0432\u0435\u0440_\u0436\u043e\u0432\u0442_\u043b\u0438\u0441\u0442_\u0433\u0440\u0443\u0434".split("_"),
		    weekdays: function (e, a) {
		      var _ = {
		        nominative: "\u043d\u0435\u0434\u0456\u043b\u044f_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a_\u0432\u0456\u0432\u0442\u043e\u0440\u043e\u043a_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u044f_\u0441\u0443\u0431\u043e\u0442\u0430".split("_"),
		        accusative: "\u043d\u0435\u0434\u0456\u043b\u044e_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a_\u0432\u0456\u0432\u0442\u043e\u0440\u043e\u043a_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u044e_\u0441\u0443\u0431\u043e\u0442\u0443".split("_"),
		        genitive: "\u043d\u0435\u0434\u0456\u043b\u0456_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043a\u0430_\u0432\u0456\u0432\u0442\u043e\u0440\u043a\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u0456_\u0441\u0443\u0431\u043e\u0442\u0438".split("_")
		      };
		      return !0 === e ? _.nominative.slice(1, 7).concat(_.nominative.slice(0, 1)) : e ? _[/(\[[\u0412\u0432\u0423\u0443]\]) ?dddd/.test(a) ? "accusative" : /\[?(?:\u043c\u0438\u043d\u0443\u043b\u043e\u0457|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0457)? ?\] ?dddd/.test(a) ? "genitive" : "nominative"][e.day()] : _.nominative;
		    },
		    weekdaysShort: "\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),
		    weekdaysMin: "\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD.MM.YYYY",
		      LL: "D MMMM YYYY \u0440.",
		      LLL: "D MMMM YYYY \u0440., HH:mm",
		      LLLL: "dddd, D MMMM YYYY \u0440., HH:mm"
		    },
		    calendar: {
		      sameDay: ia("[\u0421\u044c\u043e\u0433\u043e\u0434\u043d\u0456 "),
		      nextDay: ia("[\u0417\u0430\u0432\u0442\u0440\u0430 "),
		      lastDay: ia("[\u0412\u0447\u043e\u0440\u0430 "),
		      nextWeek: ia("[\u0423] dddd ["),
		      lastWeek: function () {
		        switch (this.day()) {
		          case 0:
		          case 3:
		          case 5:
		          case 6:
		            return ia("[\u041c\u0438\u043d\u0443\u043b\u043e\u0457] dddd [").call(this);

		          case 1:
		          case 2:
		          case 4:
		            return ia("[\u041c\u0438\u043d\u0443\u043b\u043e\u0433\u043e] dddd [").call(this);
		        }
		      },
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u0437\u0430 %s",
		      past: "%s \u0442\u043e\u043c\u0443",
		      s: "\u0434\u0435\u043a\u0456\u043b\u044c\u043a\u0430 \u0441\u0435\u043a\u0443\u043d\u0434",
		      ss: O,
		      m: O,
		      mm: O,
		      h: "\u0433\u043e\u0434\u0438\u043d\u0443",
		      hh: O,
		      d: "\u0434\u0435\u043d\u044c",
		      dd: O,
		      M: "\u043c\u0456\u0441\u044f\u0446\u044c",
		      MM: O,
		      y: "\u0440\u0456\u043a",
		      yy: O
		    },
		    meridiemParse: /\u043d\u043e\u0447\u0456|\u0440\u0430\u043d\u043a\u0443|\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430/,
		    isPM: function (e) {
		      return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430)$/.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 4 ? "\u043d\u043e\u0447\u0456" : e < 12 ? "\u0440\u0430\u043d\u043a\u0443" : e < 17 ? "\u0434\u043d\u044f" : "\u0432\u0435\u0447\u043e\u0440\u0430";
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "M":
		        case "d":
		        case "DDD":
		        case "w":
		        case "W":
		          return e + "-\u0439";

		        case "D":
		          return e + "-\u0433\u043e";

		        default:
		          return e;
		      }
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  });
		  n = ["\u062c\u0646\u0648\u0631\u06cc", "\u0641\u0631\u0648\u0631\u06cc", "\u0645\u0627\u0631\u0686", "\u0627\u067e\u0631\u06cc\u0644", "\u0645\u0626\u06cc", "\u062c\u0648\u0646", "\u062c\u0648\u0644\u0627\u0626\u06cc", "\u0627\u06af\u0633\u062a", "\u0633\u062a\u0645\u0628\u0631", "\u0627\u06a9\u062a\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062f\u0633\u0645\u0628\u0631"], r = ["\u0627\u062a\u0648\u0627\u0631", "\u067e\u06cc\u0631", "\u0645\u0646\u06af\u0644", "\u0628\u062f\u06be", "\u062c\u0645\u0639\u0631\u0627\u062a", "\u062c\u0645\u0639\u06c1", "\u06c1\u0641\u062a\u06c1"];
		  return e.defineLocale("ur", {
		    months: n,
		    monthsShort: n,
		    weekdays: r,
		    weekdaysShort: r,
		    weekdaysMin: r,
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd\u060c D MMMM YYYY HH:mm"
		    },
		    meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/,
		    isPM: function (e) {
		      return "\u0634\u0627\u0645" === e;
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? "\u0635\u0628\u062d" : "\u0634\u0627\u0645";
		    },
		    calendar: {
		      sameDay: "[\u0622\u062c \u0628\u0648\u0642\u062a] LT",
		      nextDay: "[\u06a9\u0644 \u0628\u0648\u0642\u062a] LT",
		      nextWeek: "dddd [\u0628\u0648\u0642\u062a] LT",
		      lastDay: "[\u06af\u0630\u0634\u062a\u06c1 \u0631\u0648\u0632 \u0628\u0648\u0642\u062a] LT",
		      lastWeek: "[\u06af\u0630\u0634\u062a\u06c1] dddd [\u0628\u0648\u0642\u062a] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s \u0628\u0639\u062f",
		      past: "%s \u0642\u0628\u0644",
		      s: "\u0686\u0646\u062f \u0633\u06cc\u06a9\u0646\u0688",
		      ss: "%d \u0633\u06cc\u06a9\u0646\u0688",
		      m: "\u0627\u06cc\u06a9 \u0645\u0646\u0679",
		      mm: "%d \u0645\u0646\u0679",
		      h: "\u0627\u06cc\u06a9 \u06af\u06be\u0646\u0679\u06c1",
		      hh: "%d \u06af\u06be\u0646\u0679\u06d2",
		      d: "\u0627\u06cc\u06a9 \u062f\u0646",
		      dd: "%d \u062f\u0646",
		      M: "\u0627\u06cc\u06a9 \u0645\u0627\u06c1",
		      MM: "%d \u0645\u0627\u06c1",
		      y: "\u0627\u06cc\u06a9 \u0633\u0627\u0644",
		      yy: "%d \u0633\u0627\u0644"
		    },
		    preparse: function (e) {
		      return e.replace(/\u060c/g, ",");
		    },
		    postformat: function (e) {
		      return e.replace(/,/g, "\u060c");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("uz-latn", {
		    months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),
		    monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),
		    weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),
		    weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),
		    weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "D MMMM YYYY, dddd HH:mm"
		    },
		    calendar: {
		      sameDay: "[Bugun soat] LT [da]",
		      nextDay: "[Ertaga] LT [da]",
		      nextWeek: "dddd [kuni soat] LT [da]",
		      lastDay: "[Kecha soat] LT [da]",
		      lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "Yaqin %s ichida",
		      past: "Bir necha %s oldin",
		      s: "soniya",
		      ss: "%d soniya",
		      m: "bir daqiqa",
		      mm: "%d daqiqa",
		      h: "bir soat",
		      hh: "%d soat",
		      d: "bir kun",
		      dd: "%d kun",
		      M: "bir oy",
		      MM: "%d oy",
		      y: "bir yil",
		      yy: "%d yil"
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("uz", {
		    months: "\u044f\u043d\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043b_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440_\u043e\u043a\u0442\u044f\u0431\u0440_\u043d\u043e\u044f\u0431\u0440_\u0434\u0435\u043a\u0430\u0431\u0440".split("_"),
		    monthsShort: "\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a".split("_"),
		    weekdays: "\u042f\u043a\u0448\u0430\u043d\u0431\u0430_\u0414\u0443\u0448\u0430\u043d\u0431\u0430_\u0421\u0435\u0448\u0430\u043d\u0431\u0430_\u0427\u043e\u0440\u0448\u0430\u043d\u0431\u0430_\u041f\u0430\u0439\u0448\u0430\u043d\u0431\u0430_\u0416\u0443\u043c\u0430_\u0428\u0430\u043d\u0431\u0430".split("_"),
		    weekdaysShort: "\u042f\u043a\u0448_\u0414\u0443\u0448_\u0421\u0435\u0448_\u0427\u043e\u0440_\u041f\u0430\u0439_\u0416\u0443\u043c_\u0428\u0430\u043d".split("_"),
		    weekdaysMin: "\u042f\u043a_\u0414\u0443_\u0421\u0435_\u0427\u043e_\u041f\u0430_\u0416\u0443_\u0428\u0430".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "D MMMM YYYY, dddd HH:mm"
		    },
		    calendar: {
		      sameDay: "[\u0411\u0443\u0433\u0443\u043d \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",
		      nextDay: "[\u042d\u0440\u0442\u0430\u0433\u0430] LT [\u0434\u0430]",
		      nextWeek: "dddd [\u043a\u0443\u043d\u0438 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",
		      lastDay: "[\u041a\u0435\u0447\u0430 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",
		      lastWeek: "[\u0423\u0442\u0433\u0430\u043d] dddd [\u043a\u0443\u043d\u0438 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\u042f\u043a\u0438\u043d %s \u0438\u0447\u0438\u0434\u0430",
		      past: "\u0411\u0438\u0440 \u043d\u0435\u0447\u0430 %s \u043e\u043b\u0434\u0438\u043d",
		      s: "\u0444\u0443\u0440\u0441\u0430\u0442",
		      ss: "%d \u0444\u0443\u0440\u0441\u0430\u0442",
		      m: "\u0431\u0438\u0440 \u0434\u0430\u043a\u0438\u043a\u0430",
		      mm: "%d \u0434\u0430\u043a\u0438\u043a\u0430",
		      h: "\u0431\u0438\u0440 \u0441\u043e\u0430\u0442",
		      hh: "%d \u0441\u043e\u0430\u0442",
		      d: "\u0431\u0438\u0440 \u043a\u0443\u043d",
		      dd: "%d \u043a\u0443\u043d",
		      M: "\u0431\u0438\u0440 \u043e\u0439",
		      MM: "%d \u043e\u0439",
		      y: "\u0431\u0438\u0440 \u0439\u0438\u043b",
		      yy: "%d \u0439\u0438\u043b"
		    },
		    week: {
		      dow: 1,
		      doy: 7
		    }
		  }), e.defineLocale("vi", {
		    months: "th\xe1ng 1_th\xe1ng 2_th\xe1ng 3_th\xe1ng 4_th\xe1ng 5_th\xe1ng 6_th\xe1ng 7_th\xe1ng 8_th\xe1ng 9_th\xe1ng 10_th\xe1ng 11_th\xe1ng 12".split("_"),
		    monthsShort: "Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),
		    monthsParseExact: !0,
		    weekdays: "ch\u1ee7 nh\u1eadt_th\u1ee9 hai_th\u1ee9 ba_th\u1ee9 t\u01b0_th\u1ee9 n\u0103m_th\u1ee9 s\xe1u_th\u1ee9 b\u1ea3y".split("_"),
		    weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
		    weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
		    weekdaysParseExact: !0,
		    meridiemParse: /sa|ch/i,
		    isPM: function (e) {
		      return /^ch$/i.test(e);
		    },
		    meridiem: function (e, a, _) {
		      return e < 12 ? _ ? "sa" : "SA" : _ ? "ch" : "CH";
		    },
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM [n\u0103m] YYYY",
		      LLL: "D MMMM [n\u0103m] YYYY HH:mm",
		      LLLL: "dddd, D MMMM [n\u0103m] YYYY HH:mm",
		      l: "DD/M/YYYY",
		      ll: "D MMM YYYY",
		      lll: "D MMM YYYY HH:mm",
		      llll: "ddd, D MMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[H\xf4m nay l\xfac] LT",
		      nextDay: "[Ng\xe0y mai l\xfac] LT",
		      nextWeek: "dddd [tu\u1ea7n t\u1edbi l\xfac] LT",
		      lastDay: "[H\xf4m qua l\xfac] LT",
		      lastWeek: "dddd [tu\u1ea7n tr\u01b0\u1edbc l\xfac] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "%s t\u1edbi",
		      past: "%s tr\u01b0\u1edbc",
		      s: "v\xe0i gi\xe2y",
		      ss: "%d gi\xe2y",
		      m: "m\u1ed9t ph\xfat",
		      mm: "%d ph\xfat",
		      h: "m\u1ed9t gi\u1edd",
		      hh: "%d gi\u1edd",
		      d: "m\u1ed9t ng\xe0y",
		      dd: "%d ng\xe0y",
		      w: "m\u1ed9t tu\u1ea7n",
		      ww: "%d tu\u1ea7n",
		      M: "m\u1ed9t th\xe1ng",
		      MM: "%d th\xe1ng",
		      y: "m\u1ed9t n\u0103m",
		      yy: "%d n\u0103m"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}/,
		    ordinal: function (e) {
		      return e;
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("x-pseudo", {
		    months: "J~\xe1\xf1\xfa\xe1~r\xfd_F~\xe9br\xfa~\xe1r\xfd_~M\xe1rc~h_\xc1p~r\xedl_~M\xe1\xfd_~J\xfa\xf1\xe9~_J\xfal~\xfd_\xc1\xfa~g\xfast~_S\xe9p~t\xe9mb~\xe9r_\xd3~ct\xf3b~\xe9r_\xd1~\xf3v\xe9m~b\xe9r_~D\xe9c\xe9~mb\xe9r".split("_"),
		    monthsShort: "J~\xe1\xf1_~F\xe9b_~M\xe1r_~\xc1pr_~M\xe1\xfd_~J\xfa\xf1_~J\xfal_~\xc1\xfag_~S\xe9p_~\xd3ct_~\xd1\xf3v_~D\xe9c".split("_"),
		    monthsParseExact: !0,
		    weekdays: "S~\xfa\xf1d\xe1~\xfd_M\xf3~\xf1d\xe1\xfd~_T\xfa\xe9~sd\xe1\xfd~_W\xe9d~\xf1\xe9sd~\xe1\xfd_T~h\xfars~d\xe1\xfd_~Fr\xedd~\xe1\xfd_S~\xe1t\xfar~d\xe1\xfd".split("_"),
		    weekdaysShort: "S~\xfa\xf1_~M\xf3\xf1_~T\xfa\xe9_~W\xe9d_~Th\xfa_~Fr\xed_~S\xe1t".split("_"),
		    weekdaysMin: "S~\xfa_M\xf3~_T\xfa_~W\xe9_T~h_Fr~_S\xe1".split("_"),
		    weekdaysParseExact: !0,
		    longDateFormat: {
		      LT: "HH:mm",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY HH:mm",
		      LLLL: "dddd, D MMMM YYYY HH:mm"
		    },
		    calendar: {
		      sameDay: "[T~\xf3d\xe1~\xfd \xe1t] LT",
		      nextDay: "[T~\xf3m\xf3~rr\xf3~w \xe1t] LT",
		      nextWeek: "dddd [\xe1t] LT",
		      lastDay: "[\xdd~\xe9st~\xe9rd\xe1~\xfd \xe1t] LT",
		      lastWeek: "[L~\xe1st] dddd [\xe1t] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "\xed~\xf1 %s",
		      past: "%s \xe1~g\xf3",
		      s: "\xe1 ~f\xe9w ~s\xe9c\xf3~\xf1ds",
		      ss: "%d s~\xe9c\xf3\xf1~ds",
		      m: "\xe1 ~m\xed\xf1~\xfat\xe9",
		      mm: "%d m~\xed\xf1\xfa~t\xe9s",
		      h: "\xe1~\xf1 h\xf3~\xfar",
		      hh: "%d h~\xf3\xfars",
		      d: "\xe1 ~d\xe1\xfd",
		      dd: "%d d~\xe1\xfds",
		      M: "\xe1 ~m\xf3\xf1~th",
		      MM: "%d m~\xf3\xf1t~hs",
		      y: "\xe1 ~\xfd\xe9\xe1r",
		      yy: "%d \xfd~\xe9\xe1rs"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
		    ordinal: function (e) {
		      var a = e % 10;
		      return e + (1 == ~~(e % 100 / 10) ? "th" : 1 == a ? "st" : 2 == a ? "nd" : 3 == a ? "rd" : "th");
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("yo", {
		    months: "S\u1eb9\u0301r\u1eb9\u0301_E\u0300re\u0300le\u0300_\u1eb8r\u1eb9\u0300na\u0300_I\u0300gbe\u0301_E\u0300bibi_O\u0300ku\u0300du_Ag\u1eb9mo_O\u0300gu\u0301n_Owewe_\u1ecc\u0300wa\u0300ra\u0300_Be\u0301lu\u0301_\u1ecc\u0300p\u1eb9\u0300\u0300".split("_"),
		    monthsShort: "S\u1eb9\u0301r_E\u0300rl_\u1eb8rn_I\u0300gb_E\u0300bi_O\u0300ku\u0300_Ag\u1eb9_O\u0300gu\u0301_Owe_\u1ecc\u0300wa\u0300_Be\u0301l_\u1ecc\u0300p\u1eb9\u0300\u0300".split("_"),
		    weekdays: "A\u0300i\u0300ku\u0301_Aje\u0301_I\u0300s\u1eb9\u0301gun_\u1eccj\u1ecd\u0301ru\u0301_\u1eccj\u1ecd\u0301b\u1ecd_\u1eb8ti\u0300_A\u0300ba\u0301m\u1eb9\u0301ta".split("_"),
		    weekdaysShort: "A\u0300i\u0300k_Aje\u0301_I\u0300s\u1eb9\u0301_\u1eccjr_\u1eccjb_\u1eb8ti\u0300_A\u0300ba\u0301".split("_"),
		    weekdaysMin: "A\u0300i\u0300_Aj_I\u0300s_\u1eccr_\u1eccb_\u1eb8t_A\u0300b".split("_"),
		    longDateFormat: {
		      LT: "h:mm A",
		      LTS: "h:mm:ss A",
		      L: "DD/MM/YYYY",
		      LL: "D MMMM YYYY",
		      LLL: "D MMMM YYYY h:mm A",
		      LLLL: "dddd, D MMMM YYYY h:mm A"
		    },
		    calendar: {
		      sameDay: "[O\u0300ni\u0300 ni] LT",
		      nextDay: "[\u1ecc\u0300la ni] LT",
		      nextWeek: "dddd [\u1eccs\u1eb9\u0300 to\u0301n'b\u1ecd] [ni] LT",
		      lastDay: "[A\u0300na ni] LT",
		      lastWeek: "dddd [\u1eccs\u1eb9\u0300 to\u0301l\u1ecd\u0301] [ni] LT",
		      sameElse: "L"
		    },
		    relativeTime: {
		      future: "ni\u0301 %s",
		      past: "%s k\u1ecdja\u0301",
		      s: "i\u0300s\u1eb9ju\u0301 aaya\u0301 die",
		      ss: "aaya\u0301 %d",
		      m: "i\u0300s\u1eb9ju\u0301 kan",
		      mm: "i\u0300s\u1eb9ju\u0301 %d",
		      h: "wa\u0301kati kan",
		      hh: "wa\u0301kati %d",
		      d: "\u1ecdj\u1ecd\u0301 kan",
		      dd: "\u1ecdj\u1ecd\u0301 %d",
		      M: "osu\u0300 kan",
		      MM: "osu\u0300 %d",
		      y: "\u1ecddu\u0301n kan",
		      yy: "\u1ecddu\u0301n %d"
		    },
		    dayOfMonthOrdinalParse: /\u1ecdj\u1ecd\u0301\s\d{1,2}/,
		    ordinal: "\u1ecdj\u1ecd\u0301 %d",
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("zh-cn", {
		    months: "\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),
		    monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
		    weekdays: "\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),
		    weekdaysShort: "\u5468\u65e5_\u5468\u4e00_\u5468\u4e8c_\u5468\u4e09_\u5468\u56db_\u5468\u4e94_\u5468\u516d".split("_"),
		    weekdaysMin: "\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY/MM/DD",
		      LL: "YYYY\u5e74M\u6708D\u65e5",
		      LLL: "YYYY\u5e74M\u6708D\u65e5Ah\u70b9mm\u5206",
		      LLLL: "YYYY\u5e74M\u6708D\u65e5ddddAh\u70b9mm\u5206",
		      l: "YYYY/M/D",
		      ll: "YYYY\u5e74M\u6708D\u65e5",
		      lll: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      llll: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm"
		    },
		    meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u51cc\u6668" === a || "\u65e9\u4e0a" === a || "\u4e0a\u5348" === a || "\u4e0b\u5348" !== a && "\u665a\u4e0a" !== a && 11 <= e ? e : e + 12;
		    },
		    meridiem: function (e, a, _) {
		      e = 100 * e + a;
		      return e < 600 ? "\u51cc\u6668" : e < 900 ? "\u65e9\u4e0a" : e < 1130 ? "\u4e0a\u5348" : e < 1230 ? "\u4e2d\u5348" : e < 1800 ? "\u4e0b\u5348" : "\u665a\u4e0a";
		    },
		    calendar: {
		      sameDay: "[\u4eca\u5929]LT",
		      nextDay: "[\u660e\u5929]LT",
		      nextWeek: function (e) {
		        return e.week() !== this.week() ? "[\u4e0b]dddLT" : "[\u672c]dddLT";
		      },
		      lastDay: "[\u6628\u5929]LT",
		      lastWeek: function (e) {
		        return this.week() !== e.week() ? "[\u4e0a]dddLT" : "[\u672c]dddLT";
		      },
		      sameElse: "L"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u5468)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + "\u65e5";

		        case "M":
		          return e + "\u6708";

		        case "w":
		        case "W":
		          return e + "\u5468";

		        default:
		          return e;
		      }
		    },
		    relativeTime: {
		      future: "%s\u540e",
		      past: "%s\u524d",
		      s: "\u51e0\u79d2",
		      ss: "%d \u79d2",
		      m: "1 \u5206\u949f",
		      mm: "%d \u5206\u949f",
		      h: "1 \u5c0f\u65f6",
		      hh: "%d \u5c0f\u65f6",
		      d: "1 \u5929",
		      dd: "%d \u5929",
		      w: "1 \u5468",
		      ww: "%d \u5468",
		      M: "1 \u4e2a\u6708",
		      MM: "%d \u4e2a\u6708",
		      y: "1 \u5e74",
		      yy: "%d \u5e74"
		    },
		    week: {
		      dow: 1,
		      doy: 4
		    }
		  }), e.defineLocale("zh-hk", {
		    months: "\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),
		    monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
		    weekdays: "\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),
		    weekdaysShort: "\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d".split("_"),
		    weekdaysMin: "\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY/MM/DD",
		      LL: "YYYY\u5e74M\u6708D\u65e5",
		      LLL: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      LLLL: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm",
		      l: "YYYY/M/D",
		      ll: "YYYY\u5e74M\u6708D\u65e5",
		      lll: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      llll: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm"
		    },
		    meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u51cc\u6668" === a || "\u65e9\u4e0a" === a || "\u4e0a\u5348" === a ? e : "\u4e2d\u5348" === a ? 11 <= e ? e : e + 12 : "\u4e0b\u5348" === a || "\u665a\u4e0a" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      e = 100 * e + a;
		      return e < 600 ? "\u51cc\u6668" : e < 900 ? "\u65e9\u4e0a" : e < 1200 ? "\u4e0a\u5348" : 1200 === e ? "\u4e2d\u5348" : e < 1800 ? "\u4e0b\u5348" : "\u665a\u4e0a";
		    },
		    calendar: {
		      sameDay: "[\u4eca\u5929]LT",
		      nextDay: "[\u660e\u5929]LT",
		      nextWeek: "[\u4e0b]ddddLT",
		      lastDay: "[\u6628\u5929]LT",
		      lastWeek: "[\u4e0a]ddddLT",
		      sameElse: "L"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + "\u65e5";

		        case "M":
		          return e + "\u6708";

		        case "w":
		        case "W":
		          return e + "\u9031";

		        default:
		          return e;
		      }
		    },
		    relativeTime: {
		      future: "%s\u5f8c",
		      past: "%s\u524d",
		      s: "\u5e7e\u79d2",
		      ss: "%d \u79d2",
		      m: "1 \u5206\u9418",
		      mm: "%d \u5206\u9418",
		      h: "1 \u5c0f\u6642",
		      hh: "%d \u5c0f\u6642",
		      d: "1 \u5929",
		      dd: "%d \u5929",
		      M: "1 \u500b\u6708",
		      MM: "%d \u500b\u6708",
		      y: "1 \u5e74",
		      yy: "%d \u5e74"
		    }
		  }), e.defineLocale("zh-mo", {
		    months: "\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),
		    monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
		    weekdays: "\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),
		    weekdaysShort: "\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d".split("_"),
		    weekdaysMin: "\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "DD/MM/YYYY",
		      LL: "YYYY\u5e74M\u6708D\u65e5",
		      LLL: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      LLLL: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm",
		      l: "D/M/YYYY",
		      ll: "YYYY\u5e74M\u6708D\u65e5",
		      lll: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      llll: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm"
		    },
		    meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u51cc\u6668" === a || "\u65e9\u4e0a" === a || "\u4e0a\u5348" === a ? e : "\u4e2d\u5348" === a ? 11 <= e ? e : e + 12 : "\u4e0b\u5348" === a || "\u665a\u4e0a" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      e = 100 * e + a;
		      return e < 600 ? "\u51cc\u6668" : e < 900 ? "\u65e9\u4e0a" : e < 1130 ? "\u4e0a\u5348" : e < 1230 ? "\u4e2d\u5348" : e < 1800 ? "\u4e0b\u5348" : "\u665a\u4e0a";
		    },
		    calendar: {
		      sameDay: "[\u4eca\u5929] LT",
		      nextDay: "[\u660e\u5929] LT",
		      nextWeek: "[\u4e0b]dddd LT",
		      lastDay: "[\u6628\u5929] LT",
		      lastWeek: "[\u4e0a]dddd LT",
		      sameElse: "L"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + "\u65e5";

		        case "M":
		          return e + "\u6708";

		        case "w":
		        case "W":
		          return e + "\u9031";

		        default:
		          return e;
		      }
		    },
		    relativeTime: {
		      future: "%s\u5167",
		      past: "%s\u524d",
		      s: "\u5e7e\u79d2",
		      ss: "%d \u79d2",
		      m: "1 \u5206\u9418",
		      mm: "%d \u5206\u9418",
		      h: "1 \u5c0f\u6642",
		      hh: "%d \u5c0f\u6642",
		      d: "1 \u5929",
		      dd: "%d \u5929",
		      M: "1 \u500b\u6708",
		      MM: "%d \u500b\u6708",
		      y: "1 \u5e74",
		      yy: "%d \u5e74"
		    }
		  }), e.defineLocale("zh-tw", {
		    months: "\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),
		    monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),
		    weekdays: "\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),
		    weekdaysShort: "\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d".split("_"),
		    weekdaysMin: "\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),
		    longDateFormat: {
		      LT: "HH:mm",
		      LTS: "HH:mm:ss",
		      L: "YYYY/MM/DD",
		      LL: "YYYY\u5e74M\u6708D\u65e5",
		      LLL: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      LLLL: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm",
		      l: "YYYY/M/D",
		      ll: "YYYY\u5e74M\u6708D\u65e5",
		      lll: "YYYY\u5e74M\u6708D\u65e5 HH:mm",
		      llll: "YYYY\u5e74M\u6708D\u65e5dddd HH:mm"
		    },
		    meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,
		    meridiemHour: function (e, a) {
		      return 12 === e && (e = 0), "\u51cc\u6668" === a || "\u65e9\u4e0a" === a || "\u4e0a\u5348" === a ? e : "\u4e2d\u5348" === a ? 11 <= e ? e : e + 12 : "\u4e0b\u5348" === a || "\u665a\u4e0a" === a ? e + 12 : void 0;
		    },
		    meridiem: function (e, a, _) {
		      e = 100 * e + a;
		      return e < 600 ? "\u51cc\u6668" : e < 900 ? "\u65e9\u4e0a" : e < 1130 ? "\u4e0a\u5348" : e < 1230 ? "\u4e2d\u5348" : e < 1800 ? "\u4e0b\u5348" : "\u665a\u4e0a";
		    },
		    calendar: {
		      sameDay: "[\u4eca\u5929] LT",
		      nextDay: "[\u660e\u5929] LT",
		      nextWeek: "[\u4e0b]dddd LT",
		      lastDay: "[\u6628\u5929] LT",
		      lastWeek: "[\u4e0a]dddd LT",
		      sameElse: "L"
		    },
		    dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/,
		    ordinal: function (e, a) {
		      switch (a) {
		        case "d":
		        case "D":
		        case "DDD":
		          return e + "\u65e5";

		        case "M":
		          return e + "\u6708";

		        case "w":
		        case "W":
		          return e + "\u9031";

		        default:
		          return e;
		      }
		    },
		    relativeTime: {
		      future: "%s\u5f8c",
		      past: "%s\u524d",
		      s: "\u5e7e\u79d2",
		      ss: "%d \u79d2",
		      m: "1 \u5206\u9418",
		      mm: "%d \u5206\u9418",
		      h: "1 \u5c0f\u6642",
		      hh: "%d \u5c0f\u6642",
		      d: "1 \u5929",
		      dd: "%d \u5929",
		      M: "1 \u500b\u6708",
		      MM: "%d \u500b\u6708",
		      y: "1 \u5e74",
		      yy: "%d \u5e74"
		    }
		  }), e.locale("en"), e;
		});
	} ());

	class ReactDateTimeUI extends react.Component {
	    constructor() {
	        super(...arguments);
	        this.onBlurHandle = this.onBlur.bind(this);
	        this.onChangeHandle = this.onChange.bind(this);
	        this.onFocusHandle = this.onFocus.bind(this);
	        this.OnButtonClickHandle = this.openCalendar.bind(this);
	        this.onScroll = this.calculatePosition.bind(this);
	        this.closeDate = Date.now();
	        this.widgetRef = react.createRef();
	        this.state = {
	            value: undefined
	        };
	        this.isOpen = false;
	    }
	    onBlur(dateTimeSelected) {
	        //on leave, call onclick method and pass the selected datetime
	        this.closeDate = Date.now();
	        this.props.onBlur(dateTimeSelected);
	        this.isOpen = false;
	    }
	    onChange(dateTimeSelected) {
	        if (moment$2.isMoment(dateTimeSelected)) {
	            this.setState({ value: dateTimeSelected });
	        }
	    }
	    componentDidMount() {
	        document.addEventListener('scroll', this.onScroll, true);
	        this.setState({ value: this.props.dateTimeValue });
	    }
	    componentWillUnmount() {
	        document.removeEventListener('scroll', this.onScroll, true);
	    }
	    componentDidUpdate(prevProps) {
	        if ((prevProps.dateTimeValue && prevProps.dateTimeValue.isSame(this.props.dateTimeValue))) {
	            return;
	        }
	        else if (!(this.props.dateTimeValue) && !(prevProps.dateTimeValue)) {
	            return;
	        }
	        else {
	            this.setState({ value: this.props.dateTimeValue });
	        }
	    }
	    onFocus() {
	        //When button is clicked, open the calendar
	        this.datetimeRef.openCalendar();
	        this.isOpen = true;
	        this.calculatePosition();
	    }
	    openCalendar() {
	        //if button is clicked, first onBlur is triggered, so when this is the case, the calendar should not be opened
	        let timeElapsed = Date.now() - this.closeDate;
	        if (timeElapsed > 100) {
	            this.datetimeRef.openCalendar();
	            this.isOpen = true;
	            this.calculatePosition();
	        }
	    }
	    /**
	     * Calculate the position of the datepicker. Will be based on the input element, since it can be scrolled while open.
	     */
	    calculatePosition() {
	        if (this.isOpen && this.widgetRef.current !== null) {
	            const widgetElement = this.widgetRef.current;
	            let datePicker = widgetElement.getElementsByClassName('rdtPicker')[0];
	            const widgetRect = widgetElement.getBoundingClientRect();
	            //Check the margin from the widget to the bottom of the screen, to determine if datepicker should be shown below or above input field
	            const widgetMarginBottom = window.innerHeight - widgetRect.bottom;
	            if (widgetMarginBottom < datePicker.scrollHeight) {
	                datePicker.style.bottom = (window.innerHeight - widgetRect.top) + 'px';
	                datePicker.style.top = '';
	            }
	            else {
	                datePicker.style.top = widgetRect.bottom + 'px';
	                datePicker.style.bottom = '';
	            }
	            datePicker.style.left = widgetRect.left + 'px';
	        }
	    }
	    render() {
	        // specify placeholder and disabled property in inputprops
	        let inputProps = { placeholder: this.props.placeholder, disabled: this.props.disabled };
	        // Set time contrains (min, max and step)
	        let timeConstraints = { seconds: { min: this.props.minSeconds, max: this.props.maxSeconds, step: this.props.secondStep },
	            minutes: { min: this.props.minMinutes, max: this.props.maxMinutes, step: this.props.minuteStep },
	            hours: { min: this.props.minHours, max: this.props.maxHours, step: this.props.hourStep } };
	        //Only set this attribute if user selected to disable dates in past or entered a min or max date, otherwise leave as undefined
	        let validDate = undefined;
	        if (this.props.disablePast || typeof this.props.minDate !== 'undefined' || typeof this.props.maxDate !== 'undefined') {
	            //Check if date is in the past
	            let yesterday = new Date;
	            yesterday.setDate(yesterday.getDate() - 1);
	            let yesterDayMoment = moment$2(yesterday);
	            var disablePast = this.props.disablePast;
	            var minDate = this.props.minDate;
	            var maxDate = this.props.maxDate;
	            validDate = function (currentDate) {
	                var valid = true;
	                //check if date is in the past
	                if (disablePast) {
	                    valid = currentDate.isAfter(yesterDayMoment);
	                }
	                //check if date is after mindate
	                if (valid && typeof minDate !== 'undefined') {
	                    valid = currentDate.isSameOrAfter(minDate);
	                }
	                //check if date is before maxdate
	                if (valid && typeof maxDate !== 'undefined') {
	                    valid = currentDate.isSameOrBefore(maxDate);
	                }
	                return valid;
	            };
	        }
	        let classNamesButton = "btn mx-button spacing-outer-left";
	        let classNameDiv = "reactDateTimePicker mx-compound-control";
	        if (this.props.disabled) {
	            classNamesButton += " disabled";
	            if (this.props.readOnlyAsText) {
	                classNameDiv = "form-control-static rdtAsText";
	            }
	        }
	        let viewDate = this.props.initialViewDate;
	        if (moment$2.isMoment(this.state.value)) {
	            viewDate = this.state.value;
	        }
	        return react.createElement(react.Fragment, null,
	            react.createElement("div", { className: classNameDiv, ref: this.widgetRef },
	                react.createElement(DateTime, { onBlur: this.onBlurHandle, onChange: this.onChangeHandle, onFocus: this.onFocusHandle, inputProps: inputProps, timeConstraints: timeConstraints, timeFormat: this.props.timeFormat, dateFormat: this.props.dateFormat, closeOnSelect: this.props.closeOnSelect, locale: this.props.locale, isValidDate: validDate, value: this.state.value, viewDate: viewDate, ref: ref => {
	                        this.datetimeRef = ref;
	                    }, showWeekNumbers: this.props.showWeekNumbers }),
	                this.props.readOnlyAsText ? undefined :
	                    react.createElement("button", { type: "button", className: classNamesButton, onClick: this.OnButtonClickHandle },
	                        react.createElement("span", { className: "glyphicon glyphicon-calendar" }))));
	    }
	}

	var classnames = {exports: {}};

	/*!
	  Copyright (c) 2018 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	(function (module) {
		/* global define */
		(function () {

		  var hasOwn = {}.hasOwnProperty;

		  function classNames() {
		    var classes = [];

		    for (var i = 0; i < arguments.length; i++) {
		      var arg = arguments[i];
		      if (!arg) continue;
		      var argType = typeof arg;

		      if (argType === 'string' || argType === 'number') {
		        classes.push(arg);
		      } else if (Array.isArray(arg)) {
		        if (arg.length) {
		          var inner = classNames.apply(null, arg);

		          if (inner) {
		            classes.push(inner);
		          }
		        }
		      } else if (argType === 'object') {
		        if (arg.toString === Object.prototype.toString) {
		          for (var key in arg) {
		            if (hasOwn.call(arg, key) && arg[key]) {
		              classes.push(key);
		            }
		          }
		        } else {
		          classes.push(arg.toString());
		        }
		      }
		    }

		    return classes.join(' ');
		  }

		  if (module.exports) {
		    classNames.default = classNames;
		    module.exports = classNames;
		  } else {
		    window.classNames = classNames;
		  }
		})();
	} (classnames));

	var classNames = classnames.exports;

	const Alert = ({ alertStyle, className, children, id }) => children ? (react.createElement("div", { id: id, className: classNames(`alert alert-${alertStyle} mx-validation-message`, className) }, children)) : null;
	Alert.displayName = "Alert";
	Alert.defaultProps = { alertStyle: "danger" };

	class ReactDateTimePicker extends react.Component {
	    constructor() {
	        super(...arguments);
	        this.onBlurHandle = this.onBlur.bind(this);
	    }
	    //On leave of the datepicker, set the attribute to the selected date
	    onBlur(dateTimeSelected) {
	        // If datetimeSelected is not a string, the date is valid
	        if (typeof dateTimeSelected !== 'string') {
	            // Set the value to the attribute
	            this.props.dateTimeAttribute.setValue(new Date(dateTimeSelected.toDate()));
	            // Set validDate to true, to be used in the renderer
	            this.setInvalidDateAttribute(true);
	        }
	        else if (dateTimeSelected === "") {
	            //If the value is empty, set the attribute to undefined(empty)
	            this.props.dateTimeAttribute.setValue(undefined);
	            this.setInvalidDateAttribute(true);
	        }
	        else {
	            // If no valid date is chosen, set validDate to false, to be used in the renderer
	            this.setInvalidDateAttribute(false);
	        }
	        if (this.props.onChangeAction && this.props.onChangeAction.canExecute) {
	            this.props.onChangeAction.execute();
	        }
	    }
	    setInvalidDateAttribute(newValue) {
	        if (this.props.invalidDateAttribute) {
	            if (this.props.invalidDateAttribute.readOnly) {
	                console.warn("React DateTimePicker: User has no write access to 'Valid date' property");
	            }
	            this.props.invalidDateAttribute.setValue(newValue);
	        }
	    }
	    render() {
	        // determine placeholder
	        let placeholder = typeof this.props.placeholder === 'undefined' ? "" : this.props.placeholder.value;
	        // initialize validationFeedback, which can be either undefined or a string
	        let validationFeedback;
	        // If the validationFeedback is set, check whether there is a validation message set
	        if (typeof this.props.dateTimeAttribute.validation !== 'undefined') {
	            validationFeedback = this.props.dateTimeAttribute.validation;
	        }
	        // check if locale has been set
	        let locale = typeof this.props.locale === 'undefined' || this.props.locale.value === "" ? undefined : this.props.locale.value;
	        moment$2.locale(locale);
	        // dateFormat can be undefined(use default), a boolean (true if want to use locale default), or a string
	        let dateFormat;
	        dateFormat = false;
	        if (this.props.picker === 'datetimepicker' || this.props.picker === 'datepicker') {
	            dateFormat = typeof this.props.dateFormat === 'undefined' || this.props.dateFormat.value === "" ? true : this.props.dateFormat.value;
	        }
	        // timeFormat can be undefined(use default), a boolean (true if want to use locale default), or a string
	        let timeFormat;
	        timeFormat = false;
	        if (this.props.picker === 'datetimepicker' || this.props.picker === 'timepicker') {
	            timeFormat = typeof this.props.timeFormat === 'undefined' || this.props.timeFormat.value === "" ? true : this.props.timeFormat.value;
	        }
	        let dateTimeValue = typeof this.props.dateTimeAttribute.value === 'undefined' ? undefined : moment$2(this.props.dateTimeAttribute.value);
	        //determine min and max date (can be undefined and value can be undefined)
	        let minDate = typeof this.props.minDateAttribute === 'undefined' ? undefined :
	            typeof this.props.minDateAttribute.value === 'undefined' ? undefined : moment$2(this.props.minDateAttribute.value);
	        let maxDate = typeof this.props.maxDateAttribute === 'undefined' ? undefined :
	            typeof this.props.maxDateAttribute.value === 'undefined' ? undefined : moment$2(this.props.maxDateAttribute.value);
	        // set the initial view data if provided (can be undefined)
	        let initialViewDate = typeof this.props.initialViewDate === 'undefined' ? undefined :
	            typeof this.props.initialViewDate.value === 'undefined' ? undefined : moment$2(this.props.initialViewDate.value);
	        // if widget is readOnly and show as text, only show the text
	        const disabled = this.props.dateTimeAttribute.readOnly;
	        const readOnlyAsText = disabled && this.props.readOnlyStyle === 'text';
	        //Only render widget when the attribute is available, otherwise the default value is set to undefined
	        if (this.props.dateTimeAttribute.status !== 'available') {
	            return null;
	        }
	        else {
	            return react.createElement(react.Fragment, null,
	                react.createElement(ReactDateTimeUI, { onBlur: this.onBlurHandle, placeholder: placeholder, dateFormat: dateFormat, timeFormat: timeFormat, minHours: this.props.minHours, maxHours: this.props.maxHours, hourStep: this.props.hourStep, minSeconds: this.props.minSeconds, maxSeconds: this.props.maxSeconds, secondStep: this.props.secondStep, minMinutes: this.props.minMinutes, maxMinutes: this.props.maxMinutes, minuteStep: this.props.minuteStep, closeOnSelect: this.props.closeOnSelect, disabled: disabled, locale: locale, disablePast: this.props.disablePast, dateTimeValue: dateTimeValue, minDate: minDate, maxDate: maxDate, showWeekNumbers: this.props.showWeekNumbers, initialViewDate: initialViewDate, readOnlyAsText: readOnlyAsText }),
	                react.createElement(Alert, { id: this.props.id + "-error" }, validationFeedback));
	        }
	    }
	}

	return ReactDateTimePicker;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
